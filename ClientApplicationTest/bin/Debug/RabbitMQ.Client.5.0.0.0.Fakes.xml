<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RabbitMQ.Client.5.0.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.RabbitMQClientDelegates">
            <summary>Contains custom delegates used for the stubs and shims of RabbitMQ.Client</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpApigenAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpApigenAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpApigenAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpApigenAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpApigenAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpApigenAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpApigenAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpApigenAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpApigenAttribute.ConstructorString">
            <summary>Sets the shim of AmqpApigenAttribute.AmqpApigenAttribute(String namespaceName)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpAsynchronousHandlerAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpAsynchronousHandlerAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpAsynchronousHandlerAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpAsynchronousHandlerAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpAsynchronousHandlerAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpAsynchronousHandlerAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpAsynchronousHandlerAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpAsynchronousHandlerAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpAsynchronousHandlerAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpAsynchronousHandlerAttribute.ConstructorString">
            <summary>Sets the shim of AmqpAsynchronousHandlerAttribute.AmqpAsynchronousHandlerAttribute(String namespaceName)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentBodyMappingAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpContentBodyMappingAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentBodyMappingAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentBodyMappingAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpContentBodyMappingAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentBodyMappingAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentBodyMappingAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentBodyMappingAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentBodyMappingAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentBodyMappingAttribute.Constructor">
            <summary>Sets the shim of AmqpContentBodyMappingAttribute.AmqpContentBodyMappingAttribute()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderFactoryAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderFactoryAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderFactoryAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderFactoryAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderFactoryAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderFactoryAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderFactoryAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderFactoryAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderFactoryAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderFactoryAttribute.ConstructorString">
            <summary>Sets the shim of AmqpContentHeaderFactoryAttribute.AmqpContentHeaderFactoryAttribute(String contentClass)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderMappingAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderMappingAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderMappingAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderMappingAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderMappingAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderMappingAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderMappingAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderMappingAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderMappingAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpContentHeaderMappingAttribute.Constructor">
            <summary>Sets the shim of AmqpContentHeaderMappingAttribute.AmqpContentHeaderMappingAttribute()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpFieldMappingAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpFieldMappingAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpFieldMappingAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpFieldMappingAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpFieldMappingAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpFieldMappingAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpFieldMappingAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpFieldMappingAttribute.ConstructorStringString">
            <summary>Sets the shim of AmqpFieldMappingAttribute.AmqpFieldMappingAttribute(String namespaceName, String fieldName)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpForceOneWayAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpForceOneWayAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpForceOneWayAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpForceOneWayAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpForceOneWayAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpForceOneWayAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpForceOneWayAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpForceOneWayAttribute.Constructor">
            <summary>Sets the shim of AmqpForceOneWayAttribute.AmqpForceOneWayAttribute()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodDoNotImplementAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodDoNotImplementAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodDoNotImplementAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodDoNotImplementAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodDoNotImplementAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodDoNotImplementAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodDoNotImplementAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodDoNotImplementAttribute.ConstructorString">
            <summary>Sets the shim of AmqpMethodDoNotImplementAttribute.AmqpMethodDoNotImplementAttribute(String namespaceName)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodMappingAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodMappingAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodMappingAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodMappingAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodMappingAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodMappingAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodMappingAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpMethodMappingAttribute.ConstructorStringStringString">
            <summary>Sets the shim of AmqpMethodMappingAttribute.AmqpMethodMappingAttribute(String namespaceName, String className, String methodName)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpNowaitArgumentAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpNowaitArgumentAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpNowaitArgumentAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpNowaitArgumentAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpNowaitArgumentAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpNowaitArgumentAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpNowaitArgumentAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpNowaitArgumentAttribute.ConstructorString">
            <summary>Sets the shim of AmqpNowaitArgumentAttribute.AmqpNowaitArgumentAttribute(String namespaceName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpNowaitArgumentAttribute.ConstructorStringString">
            <summary>Sets the shim of AmqpNowaitArgumentAttribute.AmqpNowaitArgumentAttribute(String namespaceName, String replacementExpression)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpUnsupportedAttribute">
            <summary>Shim type of RabbitMQ.Client.Apigen.Attributes.AmqpUnsupportedAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpUnsupportedAttribute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpUnsupportedAttribute.#ctor(RabbitMQ.Client.Apigen.Attributes.AmqpUnsupportedAttribute)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpUnsupportedAttribute.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpUnsupportedAttribute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpUnsupportedAttribute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpUnsupportedAttribute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.ShimAmqpUnsupportedAttribute.ConstructorString">
            <summary>Sets the shim of AmqpUnsupportedAttribute.AmqpUnsupportedAttribute(String namespaceName)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpApigenAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpApigenAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpApigenAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpAsynchronousHandlerAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpAsynchronousHandlerAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpAsynchronousHandlerAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpContentBodyMappingAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpContentBodyMappingAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentBodyMappingAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderFactoryAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpContentHeaderFactoryAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderFactoryAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpContentHeaderMappingAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpContentHeaderMappingAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpContentHeaderMappingAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpFieldMappingAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpFieldMappingAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpFieldMappingAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpForceOneWayAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpForceOneWayAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpForceOneWayAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpMethodDoNotImplementAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpMethodDoNotImplementAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodDoNotImplementAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpMethodMappingAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpMethodMappingAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpMethodMappingAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpNowaitArgumentAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpNowaitArgumentAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpNowaitArgumentAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute">
            <summary>Stub type of RabbitMQ.Client.Apigen.Attributes.AmqpUnsupportedAttribute</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.Equals(System.Object)">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.EqualsObject">
            <summary>Sets the stub of Attribute.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.GetHashCode">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.GetHashCode01">
            <summary>Sets the stub of Attribute.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpUnsupportedAttribute</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.IsDefaultAttribute">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.IsDefaultAttribute01">
            <summary>Sets the stub of Attribute.IsDefaultAttribute()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.Match(System.Object)">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.MatchObject">
            <summary>Sets the stub of Attribute.Match(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.TypeId">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Apigen.Attributes.Fakes.StubAmqpUnsupportedAttribute.TypeIdGet">
            <summary>Sets the stub of Attribute.get_TypeId()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder">
            <summary>Shim type of RabbitMQ.Client.Content.BasicMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.#ctor(RabbitMQ.Client.Content.BasicMessageBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.BodyStreamGet">
            <summary>Sets the shim of BasicMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.GetContentBody">
            <summary>Sets the shim of BasicMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.GetContentHeader">
            <summary>Sets the shim of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.GetDefaultContentType">
            <summary>Sets the shim of BasicMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.HeadersGet">
            <summary>Sets the shim of BasicMessageBuilder.get_Headers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.PropertiesGet">
            <summary>Sets the shim of BasicMessageBuilder.get_Properties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.PropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicMessageBuilder.set_Properties(IBasicProperties value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.RawWriteByte">
            <summary>Sets the shim of BasicMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.RawWriteByteArray">
            <summary>Sets the shim of BasicMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.RawWriteByteArrayInt32Int32">
            <summary>Sets the shim of BasicMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.AllInstances.WriterGet">
            <summary>Sets the shim of BasicMessageBuilder.get_Writer()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.Bind(RabbitMQ.Client.Content.IMessageBuilder)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.BodyStreamGet">
            <summary>Sets the shim of BasicMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.ConstructorIModel">
            <summary>Sets the shim of BasicMessageBuilder.BasicMessageBuilder(IModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.ConstructorIModelInt32">
            <summary>Sets the shim of BasicMessageBuilder.BasicMessageBuilder(IModel model, Int32 initialAccumulatorSize)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.GetContentBody">
            <summary>Sets the shim of BasicMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.GetContentHeader">
            <summary>Sets the shim of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.GetDefaultContentType">
            <summary>Sets the shim of BasicMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.HeadersGet">
            <summary>Sets the shim of BasicMessageBuilder.get_Headers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.PropertiesGet">
            <summary>Sets the shim of BasicMessageBuilder.get_Properties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.PropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicMessageBuilder.set_Properties(IBasicProperties value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.RawWriteByte">
            <summary>Sets the shim of BasicMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.RawWriteByteArray">
            <summary>Sets the shim of BasicMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.RawWriteByteArrayInt32Int32">
            <summary>Sets the shim of BasicMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageBuilder.WriterGet">
            <summary>Sets the shim of BasicMessageBuilder.get_Writer()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader">
            <summary>Shim type of RabbitMQ.Client.Content.BasicMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.#ctor(RabbitMQ.Client.Content.BasicMessageReader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances.BodyBytesGet">
            <summary>Sets the shim of BasicMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances.BodyBytesSetByteArray">
            <summary>Sets the shim of BasicMessageReader.set_BodyBytes(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances.BodyStreamGet">
            <summary>Sets the shim of BasicMessageReader.get_BodyStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances.HeadersGet">
            <summary>Sets the shim of BasicMessageReader.get_Headers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances.PropertiesGet">
            <summary>Sets the shim of BasicMessageReader.get_Properties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances.PropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicMessageReader.set_Properties(IBasicProperties value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances.RawRead">
            <summary>Sets the shim of BasicMessageReader.RawRead()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances.RawReadByteArrayInt32Int32">
            <summary>Sets the shim of BasicMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.AllInstances.ReaderGet">
            <summary>Sets the shim of BasicMessageReader.get_Reader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.Bind(RabbitMQ.Client.Content.IMessageReader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.BodyBytesGet">
            <summary>Sets the shim of BasicMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.BodyBytesSetByteArray">
            <summary>Sets the shim of BasicMessageReader.set_BodyBytes(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.BodyStreamGet">
            <summary>Sets the shim of BasicMessageReader.get_BodyStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.ConstructorIBasicPropertiesByteArray">
            <summary>Sets the shim of BasicMessageReader.BasicMessageReader(IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.HeadersGet">
            <summary>Sets the shim of BasicMessageReader.get_Headers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.PropertiesGet">
            <summary>Sets the shim of BasicMessageReader.get_Properties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.PropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicMessageReader.set_Properties(IBasicProperties value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.RawRead">
            <summary>Sets the shim of BasicMessageReader.RawRead()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.RawReadByteArrayInt32Int32">
            <summary>Sets the shim of BasicMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBasicMessageReader.ReaderGet">
            <summary>Sets the shim of BasicMessageReader.get_Reader()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder">
            <summary>Shim type of RabbitMQ.Client.Content.BytesMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.#ctor(RabbitMQ.Client.Content.BytesMessageBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.GetDefaultContentType">
            <summary>Sets the shim of BytesMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteByteArrayInt32Int32">
            <summary>Sets the shim of BytesMessageBuilder.Write(Byte[] source, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteByteByte">
            <summary>Sets the shim of BytesMessageBuilder.WriteByte(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteBytesByteArray">
            <summary>Sets the shim of BytesMessageBuilder.WriteBytes(Byte[] source)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteCharChar">
            <summary>Sets the shim of BytesMessageBuilder.WriteChar(Char value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteDoubleDouble">
            <summary>Sets the shim of BytesMessageBuilder.WriteDouble(Double value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteInt16Int16">
            <summary>Sets the shim of BytesMessageBuilder.WriteInt16(Int16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteInt32Int32">
            <summary>Sets the shim of BytesMessageBuilder.WriteInt32(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteInt64Int64">
            <summary>Sets the shim of BytesMessageBuilder.WriteInt64(Int64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteSingleSingle">
            <summary>Sets the shim of BytesMessageBuilder.WriteSingle(Single value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.AllInstances.WriteStringString">
            <summary>Sets the shim of BytesMessageBuilder.WriteString(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.Bind(RabbitMQ.Client.Content.IBytesMessageBuilder)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.Bind(RabbitMQ.Client.Content.IMessageBuilder)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.ConstructorIModel">
            <summary>Sets the shim of BytesMessageBuilder.BytesMessageBuilder(IModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.ConstructorIModelInt32">
            <summary>Sets the shim of BytesMessageBuilder.BytesMessageBuilder(IModel model, Int32 initialAccumulatorSize)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.GetDefaultContentType">
            <summary>Sets the shim of BytesMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteByteArrayInt32Int32">
            <summary>Sets the shim of BytesMessageBuilder.Write(Byte[] source, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteByteByte">
            <summary>Sets the shim of BytesMessageBuilder.WriteByte(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteBytesByteArray">
            <summary>Sets the shim of BytesMessageBuilder.WriteBytes(Byte[] source)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteCharChar">
            <summary>Sets the shim of BytesMessageBuilder.WriteChar(Char value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteDoubleDouble">
            <summary>Sets the shim of BytesMessageBuilder.WriteDouble(Double value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteInt16Int16">
            <summary>Sets the shim of BytesMessageBuilder.WriteInt16(Int16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteInt32Int32">
            <summary>Sets the shim of BytesMessageBuilder.WriteInt32(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteInt64Int64">
            <summary>Sets the shim of BytesMessageBuilder.WriteInt64(Int64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteSingleSingle">
            <summary>Sets the shim of BytesMessageBuilder.WriteSingle(Single value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageBuilder.WriteStringString">
            <summary>Sets the shim of BytesMessageBuilder.WriteString(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader">
            <summary>Shim type of RabbitMQ.Client.Content.BytesMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.#ctor(RabbitMQ.Client.Content.BytesMessageReader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadByte">
            <summary>Sets the shim of BytesMessageReader.ReadByte()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadByteArrayInt32Int32">
            <summary>Sets the shim of BytesMessageReader.Read(Byte[] target, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadBytesInt32">
            <summary>Sets the shim of BytesMessageReader.ReadBytes(Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadChar">
            <summary>Sets the shim of BytesMessageReader.ReadChar()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadDouble">
            <summary>Sets the shim of BytesMessageReader.ReadDouble()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadInt16">
            <summary>Sets the shim of BytesMessageReader.ReadInt16()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadInt32">
            <summary>Sets the shim of BytesMessageReader.ReadInt32()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadInt64">
            <summary>Sets the shim of BytesMessageReader.ReadInt64()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadSingle">
            <summary>Sets the shim of BytesMessageReader.ReadSingle()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.AllInstances.ReadString">
            <summary>Sets the shim of BytesMessageReader.ReadString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.Bind(RabbitMQ.Client.Content.IBytesMessageReader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.Bind(RabbitMQ.Client.Content.IMessageReader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ConstructorIBasicPropertiesByteArray">
            <summary>Sets the shim of BytesMessageReader.BytesMessageReader(IBasicProperties properties, Byte[] payload)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadByte">
            <summary>Sets the shim of BytesMessageReader.ReadByte()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadByteArrayInt32Int32">
            <summary>Sets the shim of BytesMessageReader.Read(Byte[] target, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadBytesInt32">
            <summary>Sets the shim of BytesMessageReader.ReadBytes(Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadChar">
            <summary>Sets the shim of BytesMessageReader.ReadChar()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadDouble">
            <summary>Sets the shim of BytesMessageReader.ReadDouble()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadInt16">
            <summary>Sets the shim of BytesMessageReader.ReadInt16()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadInt32">
            <summary>Sets the shim of BytesMessageReader.ReadInt32()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadInt64">
            <summary>Sets the shim of BytesMessageReader.ReadInt64()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadSingle">
            <summary>Sets the shim of BytesMessageReader.ReadSingle()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.ReadString">
            <summary>Sets the shim of BytesMessageReader.ReadString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesMessageReader.StaticConstructor">
            <summary>Sets the shim of BytesMessageReader.BytesMessageReader()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting">
            <summary>Shim type of RabbitMQ.Client.Content.BytesWireFormatting</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadByteNetworkBinaryReader">
            <summary>Sets the shim of BytesWireFormatting.ReadByte(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadBytesNetworkBinaryReaderInt32">
            <summary>Sets the shim of BytesWireFormatting.ReadBytes(NetworkBinaryReader reader, Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadCharNetworkBinaryReader">
            <summary>Sets the shim of BytesWireFormatting.ReadChar(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadDoubleNetworkBinaryReader">
            <summary>Sets the shim of BytesWireFormatting.ReadDouble(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadInt16NetworkBinaryReader">
            <summary>Sets the shim of BytesWireFormatting.ReadInt16(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadInt32NetworkBinaryReader">
            <summary>Sets the shim of BytesWireFormatting.ReadInt32(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadInt64NetworkBinaryReader">
            <summary>Sets the shim of BytesWireFormatting.ReadInt64(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadNetworkBinaryReaderByteArrayInt32Int32">
            <summary>Sets the shim of BytesWireFormatting.Read(NetworkBinaryReader reader, Byte[] target, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadSingleNetworkBinaryReader">
            <summary>Sets the shim of BytesWireFormatting.ReadSingle(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.ReadStringNetworkBinaryReader">
            <summary>Sets the shim of BytesWireFormatting.ReadString(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteByteNetworkBinaryWriterByte">
            <summary>Sets the shim of BytesWireFormatting.WriteByte(NetworkBinaryWriter writer, Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteBytesNetworkBinaryWriterByteArray">
            <summary>Sets the shim of BytesWireFormatting.WriteBytes(NetworkBinaryWriter writer, Byte[] source)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteCharNetworkBinaryWriterChar">
            <summary>Sets the shim of BytesWireFormatting.WriteChar(NetworkBinaryWriter writer, Char value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteDoubleNetworkBinaryWriterDouble">
            <summary>Sets the shim of BytesWireFormatting.WriteDouble(NetworkBinaryWriter writer, Double value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteInt16NetworkBinaryWriterInt16">
            <summary>Sets the shim of BytesWireFormatting.WriteInt16(NetworkBinaryWriter writer, Int16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteInt32NetworkBinaryWriterInt32">
            <summary>Sets the shim of BytesWireFormatting.WriteInt32(NetworkBinaryWriter writer, Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteInt64NetworkBinaryWriterInt64">
            <summary>Sets the shim of BytesWireFormatting.WriteInt64(NetworkBinaryWriter writer, Int64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteNetworkBinaryWriterByteArrayInt32Int32">
            <summary>Sets the shim of BytesWireFormatting.Write(NetworkBinaryWriter writer, Byte[] source, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteSingleNetworkBinaryWriterSingle">
            <summary>Sets the shim of BytesWireFormatting.WriteSingle(NetworkBinaryWriter writer, Single value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimBytesWireFormatting.WriteStringNetworkBinaryWriterString">
            <summary>Sets the shim of BytesWireFormatting.WriteString(NetworkBinaryWriter writer, String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder">
            <summary>Shim type of RabbitMQ.Client.Content.MapMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.#ctor(RabbitMQ.Client.Content.MapMessageBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.AllInstances.BodyGet">
            <summary>Sets the shim of MapMessageBuilder.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.AllInstances.BodySetIDictionaryOfStringObject">
            <summary>Sets the shim of MapMessageBuilder.set_Body(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.AllInstances.GetContentBody">
            <summary>Sets the shim of MapMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.AllInstances.GetDefaultContentType">
            <summary>Sets the shim of MapMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.Bind(RabbitMQ.Client.Content.IMapMessageBuilder)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.Bind(RabbitMQ.Client.Content.IMessageBuilder)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.BodyGet">
            <summary>Sets the shim of MapMessageBuilder.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.BodySetIDictionaryOfStringObject">
            <summary>Sets the shim of MapMessageBuilder.set_Body(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.ConstructorIModel">
            <summary>Sets the shim of MapMessageBuilder.MapMessageBuilder(IModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.ConstructorIModelInt32">
            <summary>Sets the shim of MapMessageBuilder.MapMessageBuilder(IModel model, Int32 initialAccumulatorSize)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.GetContentBody">
            <summary>Sets the shim of MapMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageBuilder.GetDefaultContentType">
            <summary>Sets the shim of MapMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader">
            <summary>Shim type of RabbitMQ.Client.Content.MapMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.#ctor(RabbitMQ.Client.Content.MapMessageReader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.AllInstances.BodyGet">
            <summary>Sets the shim of MapMessageReader.get_Body()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.Bind(RabbitMQ.Client.Content.IMapMessageReader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.Bind(RabbitMQ.Client.Content.IMessageReader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.BodyGet">
            <summary>Sets the shim of MapMessageReader.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapMessageReader.ConstructorIBasicPropertiesByteArray">
            <summary>Sets the shim of MapMessageReader.MapMessageReader(IBasicProperties properties, Byte[] payload)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimMapWireFormatting">
            <summary>Shim type of RabbitMQ.Client.Content.MapWireFormatting</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapWireFormatting.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapWireFormatting.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimMapWireFormatting.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapWireFormatting.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapWireFormatting.ReadMapNetworkBinaryReader">
            <summary>Sets the shim of MapWireFormatting.ReadMap(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimMapWireFormatting.WriteMapNetworkBinaryWriterIDictionaryOfStringObject">
            <summary>Sets the shim of MapWireFormatting.WriteMap(NetworkBinaryWriter writer, IDictionary`2&lt;String,Object&gt; table)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser">
            <summary>Shim type of RabbitMQ.Client.Content.PrimitiveParser</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.CreateProtocolViolationExceptionStringObject">
            <summary>Sets the shim of PrimitiveParser.CreateProtocolViolationException(String targetType, Object source)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.ParseBoolString">
            <summary>Sets the shim of PrimitiveParser.ParseBool(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.ParseByteString">
            <summary>Sets the shim of PrimitiveParser.ParseByte(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.ParseDoubleString">
            <summary>Sets the shim of PrimitiveParser.ParseDouble(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.ParseFloatString">
            <summary>Sets the shim of PrimitiveParser.ParseFloat(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.ParseIntString">
            <summary>Sets the shim of PrimitiveParser.ParseInt(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.ParseLongString">
            <summary>Sets the shim of PrimitiveParser.ParseLong(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimPrimitiveParser.ParseShortString">
            <summary>Sets the shim of PrimitiveParser.ParseShort(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder">
            <summary>Shim type of RabbitMQ.Client.Content.StreamMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.#ctor(RabbitMQ.Client.Content.StreamMessageBuilder)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.GetDefaultContentType">
            <summary>Sets the shim of StreamMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteBoolBoolean">
            <summary>Sets the shim of StreamMessageBuilder.WriteBool(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteByteByte">
            <summary>Sets the shim of StreamMessageBuilder.WriteByte(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteBytesByteArray">
            <summary>Sets the shim of StreamMessageBuilder.WriteBytes(Byte[] source)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteBytesByteArrayInt32Int32">
            <summary>Sets the shim of StreamMessageBuilder.WriteBytes(Byte[] source, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteCharChar">
            <summary>Sets the shim of StreamMessageBuilder.WriteChar(Char value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteDoubleDouble">
            <summary>Sets the shim of StreamMessageBuilder.WriteDouble(Double value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteInt16Int16">
            <summary>Sets the shim of StreamMessageBuilder.WriteInt16(Int16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteInt32Int32">
            <summary>Sets the shim of StreamMessageBuilder.WriteInt32(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteInt64Int64">
            <summary>Sets the shim of StreamMessageBuilder.WriteInt64(Int64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteObjectObject">
            <summary>Sets the shim of StreamMessageBuilder.WriteObject(Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteObjectsObjectArray">
            <summary>Sets the shim of StreamMessageBuilder.WriteObjects(Object[] values)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteSingleSingle">
            <summary>Sets the shim of StreamMessageBuilder.WriteSingle(Single value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.AllInstances.WriteStringString">
            <summary>Sets the shim of StreamMessageBuilder.WriteString(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.Bind(RabbitMQ.Client.Content.IMessageBuilder)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.Bind(RabbitMQ.Client.Content.IStreamMessageBuilder)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.ConstructorIModel">
            <summary>Sets the shim of StreamMessageBuilder.StreamMessageBuilder(IModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.ConstructorIModelInt32">
            <summary>Sets the shim of StreamMessageBuilder.StreamMessageBuilder(IModel model, Int32 initialAccumulatorSize)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.GetDefaultContentType">
            <summary>Sets the shim of StreamMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteBoolBoolean">
            <summary>Sets the shim of StreamMessageBuilder.WriteBool(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteByteByte">
            <summary>Sets the shim of StreamMessageBuilder.WriteByte(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteBytesByteArray">
            <summary>Sets the shim of StreamMessageBuilder.WriteBytes(Byte[] source)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteBytesByteArrayInt32Int32">
            <summary>Sets the shim of StreamMessageBuilder.WriteBytes(Byte[] source, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteCharChar">
            <summary>Sets the shim of StreamMessageBuilder.WriteChar(Char value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteDoubleDouble">
            <summary>Sets the shim of StreamMessageBuilder.WriteDouble(Double value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteInt16Int16">
            <summary>Sets the shim of StreamMessageBuilder.WriteInt16(Int16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteInt32Int32">
            <summary>Sets the shim of StreamMessageBuilder.WriteInt32(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteInt64Int64">
            <summary>Sets the shim of StreamMessageBuilder.WriteInt64(Int64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteObjectObject">
            <summary>Sets the shim of StreamMessageBuilder.WriteObject(Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteObjectsObjectArray">
            <summary>Sets the shim of StreamMessageBuilder.WriteObjects(Object[] values)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteSingleSingle">
            <summary>Sets the shim of StreamMessageBuilder.WriteSingle(Single value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageBuilder.WriteStringString">
            <summary>Sets the shim of StreamMessageBuilder.WriteString(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader">
            <summary>Shim type of RabbitMQ.Client.Content.StreamMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.#ctor(RabbitMQ.Client.Content.StreamMessageReader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadBool">
            <summary>Sets the shim of StreamMessageReader.ReadBool()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadByte">
            <summary>Sets the shim of StreamMessageReader.ReadByte()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadBytes">
            <summary>Sets the shim of StreamMessageReader.ReadBytes()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadChar">
            <summary>Sets the shim of StreamMessageReader.ReadChar()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadDouble">
            <summary>Sets the shim of StreamMessageReader.ReadDouble()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadInt16">
            <summary>Sets the shim of StreamMessageReader.ReadInt16()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadInt32">
            <summary>Sets the shim of StreamMessageReader.ReadInt32()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadInt64">
            <summary>Sets the shim of StreamMessageReader.ReadInt64()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadObject">
            <summary>Sets the shim of StreamMessageReader.ReadObject()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadObjects">
            <summary>Sets the shim of StreamMessageReader.ReadObjects()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadSingle">
            <summary>Sets the shim of StreamMessageReader.ReadSingle()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.AllInstances.ReadString">
            <summary>Sets the shim of StreamMessageReader.ReadString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.Bind(RabbitMQ.Client.Content.IMessageReader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.Bind(RabbitMQ.Client.Content.IStreamMessageReader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ConstructorIBasicPropertiesByteArray">
            <summary>Sets the shim of StreamMessageReader.StreamMessageReader(IBasicProperties properties, Byte[] payload)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadBool">
            <summary>Sets the shim of StreamMessageReader.ReadBool()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadByte">
            <summary>Sets the shim of StreamMessageReader.ReadByte()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadBytes">
            <summary>Sets the shim of StreamMessageReader.ReadBytes()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadChar">
            <summary>Sets the shim of StreamMessageReader.ReadChar()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadDouble">
            <summary>Sets the shim of StreamMessageReader.ReadDouble()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadInt16">
            <summary>Sets the shim of StreamMessageReader.ReadInt16()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadInt32">
            <summary>Sets the shim of StreamMessageReader.ReadInt32()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadInt64">
            <summary>Sets the shim of StreamMessageReader.ReadInt64()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadObject">
            <summary>Sets the shim of StreamMessageReader.ReadObject()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadObjects">
            <summary>Sets the shim of StreamMessageReader.ReadObjects()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadSingle">
            <summary>Sets the shim of StreamMessageReader.ReadSingle()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.ReadString">
            <summary>Sets the shim of StreamMessageReader.ReadString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamMessageReader.StaticConstructor">
            <summary>Sets the shim of StreamMessageReader.StreamMessageReader()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting">
            <summary>Shim type of RabbitMQ.Client.Content.StreamWireFormatting</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadBoolNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadBool(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadByteNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadByte(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadBytesNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadBytes(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadCharNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadChar(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadDoubleNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadDouble(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadInt16NetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadInt16(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadInt32NetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadInt32(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadInt64NetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadInt64(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadNonnullObjectStringNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadNonnullObject(String target, NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadObjectNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadObject(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadSingleNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadSingle(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadStringNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadString(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.ReadUntypedStringNetworkBinaryReader">
            <summary>Sets the shim of StreamWireFormatting.ReadUntypedString(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteBoolNetworkBinaryWriterBoolean">
            <summary>Sets the shim of StreamWireFormatting.WriteBool(NetworkBinaryWriter writer, Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteByteNetworkBinaryWriterByte">
            <summary>Sets the shim of StreamWireFormatting.WriteByte(NetworkBinaryWriter writer, Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteBytesNetworkBinaryWriterByteArray">
            <summary>Sets the shim of StreamWireFormatting.WriteBytes(NetworkBinaryWriter writer, Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteBytesNetworkBinaryWriterByteArrayInt32Int32">
            <summary>Sets the shim of StreamWireFormatting.WriteBytes(NetworkBinaryWriter writer, Byte[] value, Int32 offset, Int32 length)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteCharNetworkBinaryWriterChar">
            <summary>Sets the shim of StreamWireFormatting.WriteChar(NetworkBinaryWriter writer, Char value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteDoubleNetworkBinaryWriterDouble">
            <summary>Sets the shim of StreamWireFormatting.WriteDouble(NetworkBinaryWriter writer, Double value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteInt16NetworkBinaryWriterInt16">
            <summary>Sets the shim of StreamWireFormatting.WriteInt16(NetworkBinaryWriter writer, Int16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteInt32NetworkBinaryWriterInt32">
            <summary>Sets the shim of StreamWireFormatting.WriteInt32(NetworkBinaryWriter writer, Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteInt64NetworkBinaryWriterInt64">
            <summary>Sets the shim of StreamWireFormatting.WriteInt64(NetworkBinaryWriter writer, Int64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteObjectNetworkBinaryWriterObject">
            <summary>Sets the shim of StreamWireFormatting.WriteObject(NetworkBinaryWriter writer, Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteSingleNetworkBinaryWriterSingle">
            <summary>Sets the shim of StreamWireFormatting.WriteSingle(NetworkBinaryWriter writer, Single value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteStringNetworkBinaryWriterString">
            <summary>Sets the shim of StreamWireFormatting.WriteString(NetworkBinaryWriter writer, String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.ShimStreamWireFormatting.WriteUntypedStringNetworkBinaryWriterString">
            <summary>Sets the shim of StreamWireFormatting.WriteUntypedString(NetworkBinaryWriter writer, String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder">
            <summary>Stub type of RabbitMQ.Client.Content.BasicMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.#ctor(RabbitMQ.Client.IModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.#ctor(RabbitMQ.Client.IModel,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.GetContentBody">
            <summary>Sets the stub of BasicMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.GetContentBody01">
            <summary>Sets the stub of BasicMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.GetContentHeader">
            <summary>Sets the stub of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.GetContentHeader01">
            <summary>Sets the stub of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.GetDefaultContentType">
            <summary>Sets the stub of BasicMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.GetDefaultContentType01">
            <summary>Sets the stub of BasicMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.InitializeStub">
            <summary>Initializes a new instance of type StubBasicMessageBuilder</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBasicMessageBuilder.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubBasicMessageReader">
            <summary>Stub type of RabbitMQ.Client.Content.BasicMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBasicMessageReader.#ctor(RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBasicMessageReader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBasicMessageReader.InitializeStub">
            <summary>Initializes a new instance of type StubBasicMessageReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBasicMessageReader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBasicMessageReader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder">
            <summary>Stub type of RabbitMQ.Client.Content.BytesMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.#ctor(RabbitMQ.Client.IModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.#ctor(RabbitMQ.Client.IModel,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.GetContentBody">
            <summary>Sets the stub of BasicMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.GetContentBody01">
            <summary>Sets the stub of BasicMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.GetContentHeader">
            <summary>Sets the stub of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.GetContentHeader01">
            <summary>Sets the stub of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.GetDefaultContentType">
            <summary>Sets the stub of BytesMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.GetDefaultContentType01">
            <summary>Sets the stub of BytesMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.InitializeStub">
            <summary>Initializes a new instance of type StubBytesMessageBuilder</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBytesMessageBuilder.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubBytesMessageReader">
            <summary>Stub type of RabbitMQ.Client.Content.BytesMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBytesMessageReader.#ctor(RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBytesMessageReader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubBytesMessageReader.InitializeStub">
            <summary>Initializes a new instance of type StubBytesMessageReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBytesMessageReader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubBytesMessageReader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder">
            <summary>Stub type of RabbitMQ.Client.Content.IBytesMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.#ctor">
            <summary>Initializes a new instance of type StubIBytesMessageBuilder</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#BodyStream">
            <summary>Sets the stub of IMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.BodyStreamGet">
            <summary>Sets the stub of IMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.GetContentBody">
            <summary>Sets the stub of IMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.GetContentHeader">
            <summary>Sets the stub of IMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.GetDefaultContentType">
            <summary>Sets the stub of IMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#Headers">
            <summary>Sets the stub of IMessageBuilder.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.HeadersGet">
            <summary>Sets the stub of IMessageBuilder.get_Headers()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IBytesMessageBuilder.Write(Byte[] source, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#WriteByte(System.Byte)">
            <summary>Sets the stub of IBytesMessageBuilder.WriteByte(Byte value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#WriteBytes(System.Byte[])">
            <summary>Sets the stub of IBytesMessageBuilder.WriteBytes(Byte[] source)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#WriteChar(System.Char)">
            <summary>Sets the stub of IBytesMessageBuilder.WriteChar(Char value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#WriteDouble(System.Double)">
            <summary>Sets the stub of IBytesMessageBuilder.WriteDouble(Double value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#WriteInt16(System.Int16)">
            <summary>Sets the stub of IBytesMessageBuilder.WriteInt16(Int16 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#WriteInt32(System.Int32)">
            <summary>Sets the stub of IBytesMessageBuilder.WriteInt32(Int32 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#WriteInt64(System.Int64)">
            <summary>Sets the stub of IBytesMessageBuilder.WriteInt64(Int64 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#WriteSingle(System.Single)">
            <summary>Sets the stub of IBytesMessageBuilder.WriteSingle(Single value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IBytesMessageBuilder#WriteString(System.String)">
            <summary>Sets the stub of IBytesMessageBuilder.WriteString(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetContentBody">
            <summary>Sets the stub of IMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetContentHeader">
            <summary>Sets the stub of IMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetDefaultContentType">
            <summary>Sets the stub of IMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte)">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte[])">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RawWriteByte">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RawWriteByteArray">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.RawWriteByteArrayInt32Int32">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteByteArrayInt32Int32">
            <summary>Sets the stub of IBytesMessageBuilder.Write(Byte[] source, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteByteByte">
            <summary>Sets the stub of IBytesMessageBuilder.WriteByte(Byte value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteBytesByteArray">
            <summary>Sets the stub of IBytesMessageBuilder.WriteBytes(Byte[] source)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteCharChar">
            <summary>Sets the stub of IBytesMessageBuilder.WriteChar(Char value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteDoubleDouble">
            <summary>Sets the stub of IBytesMessageBuilder.WriteDouble(Double value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteInt16Int16">
            <summary>Sets the stub of IBytesMessageBuilder.WriteInt16(Int16 value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteInt32Int32">
            <summary>Sets the stub of IBytesMessageBuilder.WriteInt32(Int32 value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteInt64Int64">
            <summary>Sets the stub of IBytesMessageBuilder.WriteInt64(Int64 value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteSingleSingle">
            <summary>Sets the stub of IBytesMessageBuilder.WriteSingle(Single value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageBuilder.WriteStringString">
            <summary>Sets the stub of IBytesMessageBuilder.WriteString(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader">
            <summary>Stub type of RabbitMQ.Client.Content.IBytesMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.#ctor">
            <summary>Initializes a new instance of type StubIBytesMessageReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IMessageReader#BodyBytes">
            <summary>Sets the stub of IMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.BodyBytesGet">
            <summary>Sets the stub of IMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IMessageReader#BodyStream">
            <summary>Sets the stub of IMessageReader.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.BodyStreamGet">
            <summary>Sets the stub of IMessageReader.get_BodyStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IMessageReader#Headers">
            <summary>Sets the stub of IMessageReader.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.HeadersGet">
            <summary>Sets the stub of IMessageReader.get_Headers()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IBytesMessageReader.Read(Byte[] target, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#ReadByte">
            <summary>Sets the stub of IBytesMessageReader.ReadByte()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#ReadBytes(System.Int32)">
            <summary>Sets the stub of IBytesMessageReader.ReadBytes(Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#ReadChar">
            <summary>Sets the stub of IBytesMessageReader.ReadChar()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#ReadDouble">
            <summary>Sets the stub of IBytesMessageReader.ReadDouble()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#ReadInt16">
            <summary>Sets the stub of IBytesMessageReader.ReadInt16()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#ReadInt32">
            <summary>Sets the stub of IBytesMessageReader.ReadInt32()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#ReadInt64">
            <summary>Sets the stub of IBytesMessageReader.ReadInt64()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#ReadSingle">
            <summary>Sets the stub of IBytesMessageReader.ReadSingle()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IBytesMessageReader#ReadString">
            <summary>Sets the stub of IBytesMessageReader.ReadString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IMessageReader#RawRead">
            <summary>Sets the stub of IMessageReader.RawRead()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RabbitMQ#Client#Content#IMessageReader#RawRead(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RawRead">
            <summary>Sets the stub of IMessageReader.RawRead()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.RawReadByteArrayInt32Int32">
            <summary>Sets the stub of IMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadByte">
            <summary>Sets the stub of IBytesMessageReader.ReadByte()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadByteArrayInt32Int32">
            <summary>Sets the stub of IBytesMessageReader.Read(Byte[] target, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadBytesInt32">
            <summary>Sets the stub of IBytesMessageReader.ReadBytes(Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadChar">
            <summary>Sets the stub of IBytesMessageReader.ReadChar()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadDouble">
            <summary>Sets the stub of IBytesMessageReader.ReadDouble()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadInt16">
            <summary>Sets the stub of IBytesMessageReader.ReadInt16()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadInt32">
            <summary>Sets the stub of IBytesMessageReader.ReadInt32()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadInt64">
            <summary>Sets the stub of IBytesMessageReader.ReadInt64()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadSingle">
            <summary>Sets the stub of IBytesMessageReader.ReadSingle()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIBytesMessageReader.ReadString">
            <summary>Sets the stub of IBytesMessageReader.ReadString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder">
            <summary>Stub type of RabbitMQ.Client.Content.IMapMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.#ctor">
            <summary>Initializes a new instance of type StubIMapMessageBuilder</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RabbitMQ#Client#Content#IMapMessageBuilder#Body">
            <summary>Sets the stub of IMapMessageBuilder.get_Body()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.BodyGet">
            <summary>Sets the stub of IMapMessageBuilder.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#BodyStream">
            <summary>Sets the stub of IMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.BodyStreamGet">
            <summary>Sets the stub of IMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.GetContentBody">
            <summary>Sets the stub of IMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.GetContentHeader">
            <summary>Sets the stub of IMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.GetDefaultContentType">
            <summary>Sets the stub of IMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#Headers">
            <summary>Sets the stub of IMessageBuilder.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.HeadersGet">
            <summary>Sets the stub of IMessageBuilder.get_Headers()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetContentBody">
            <summary>Sets the stub of IMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetContentHeader">
            <summary>Sets the stub of IMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetDefaultContentType">
            <summary>Sets the stub of IMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte)">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte[])">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RawWriteByte">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RawWriteByteArray">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageBuilder.RawWriteByteArrayInt32Int32">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader">
            <summary>Stub type of RabbitMQ.Client.Content.IMapMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.#ctor">
            <summary>Initializes a new instance of type StubIMapMessageReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.RabbitMQ#Client#Content#IMapMessageReader#Body">
            <summary>Sets the stub of IMapMessageReader.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.RabbitMQ#Client#Content#IMessageReader#BodyBytes">
            <summary>Sets the stub of IMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.BodyBytesGet">
            <summary>Sets the stub of IMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.BodyGet">
            <summary>Sets the stub of IMapMessageReader.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.RabbitMQ#Client#Content#IMessageReader#BodyStream">
            <summary>Sets the stub of IMessageReader.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.BodyStreamGet">
            <summary>Sets the stub of IMessageReader.get_BodyStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.RabbitMQ#Client#Content#IMessageReader#Headers">
            <summary>Sets the stub of IMessageReader.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.HeadersGet">
            <summary>Sets the stub of IMessageReader.get_Headers()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.RabbitMQ#Client#Content#IMessageReader#RawRead">
            <summary>Sets the stub of IMessageReader.RawRead()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.RabbitMQ#Client#Content#IMessageReader#RawRead(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.RawRead">
            <summary>Sets the stub of IMessageReader.RawRead()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMapMessageReader.RawReadByteArrayInt32Int32">
            <summary>Sets the stub of IMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder">
            <summary>Stub type of RabbitMQ.Client.Content.IMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.#ctor">
            <summary>Initializes a new instance of type StubIMessageBuilder</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#BodyStream">
            <summary>Sets the stub of IMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.BodyStreamGet">
            <summary>Sets the stub of IMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.GetContentBody">
            <summary>Sets the stub of IMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.GetContentHeader">
            <summary>Sets the stub of IMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.GetDefaultContentType">
            <summary>Sets the stub of IMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#Headers">
            <summary>Sets the stub of IMessageBuilder.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.HeadersGet">
            <summary>Sets the stub of IMessageBuilder.get_Headers()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetContentBody">
            <summary>Sets the stub of IMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetContentHeader">
            <summary>Sets the stub of IMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetDefaultContentType">
            <summary>Sets the stub of IMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte[])">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte)">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RawWriteByte">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RawWriteByteArray">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageBuilder.RawWriteByteArrayInt32Int32">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubIMessageReader">
            <summary>Stub type of RabbitMQ.Client.Content.IMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageReader.#ctor">
            <summary>Initializes a new instance of type StubIMessageReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMessageReader.RabbitMQ#Client#Content#IMessageReader#BodyBytes">
            <summary>Sets the stub of IMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageReader.BodyBytesGet">
            <summary>Sets the stub of IMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMessageReader.RabbitMQ#Client#Content#IMessageReader#BodyStream">
            <summary>Sets the stub of IMessageReader.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageReader.BodyStreamGet">
            <summary>Sets the stub of IMessageReader.get_BodyStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIMessageReader.RabbitMQ#Client#Content#IMessageReader#Headers">
            <summary>Sets the stub of IMessageReader.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageReader.HeadersGet">
            <summary>Sets the stub of IMessageReader.get_Headers()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageReader.RabbitMQ#Client#Content#IMessageReader#RawRead">
            <summary>Sets the stub of IMessageReader.RawRead()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIMessageReader.RabbitMQ#Client#Content#IMessageReader#RawRead(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageReader.RawRead">
            <summary>Sets the stub of IMessageReader.RawRead()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIMessageReader.RawReadByteArrayInt32Int32">
            <summary>Sets the stub of IMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder">
            <summary>Stub type of RabbitMQ.Client.Content.IStreamMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.#ctor">
            <summary>Initializes a new instance of type StubIStreamMessageBuilder</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#BodyStream">
            <summary>Sets the stub of IMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.BodyStreamGet">
            <summary>Sets the stub of IMessageBuilder.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.GetContentBody">
            <summary>Sets the stub of IMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.GetContentHeader">
            <summary>Sets the stub of IMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.GetDefaultContentType">
            <summary>Sets the stub of IMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#Headers">
            <summary>Sets the stub of IMessageBuilder.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.HeadersGet">
            <summary>Sets the stub of IMessageBuilder.get_Headers()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetContentBody">
            <summary>Sets the stub of IMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetContentHeader">
            <summary>Sets the stub of IMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#GetDefaultContentType">
            <summary>Sets the stub of IMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte[])">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte)">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IMessageBuilder#RawWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteBool(System.Boolean)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteBool(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteByte(System.Byte)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteByte(Byte value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteBytes(System.Byte[])">
            <summary>Sets the stub of IStreamMessageBuilder.WriteBytes(Byte[] source)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteBytes(Byte[] source, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteChar(System.Char)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteChar(Char value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteDouble(System.Double)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteDouble(Double value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteInt16(System.Int16)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteInt16(Int16 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteInt32(System.Int32)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteInt32(Int32 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteInt64(System.Int64)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteInt64(Int64 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteObject(System.Object)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteObject(Object value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteObjects(System.Object[])">
            <summary>Sets the stub of IStreamMessageBuilder.WriteObjects(Object[] values)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteSingle(System.Single)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteSingle(Single value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RabbitMQ#Client#Content#IStreamMessageBuilder#WriteString(System.String)">
            <summary>Sets the stub of IStreamMessageBuilder.WriteString(String value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RawWriteByte">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RawWriteByteArray">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.RawWriteByteArrayInt32Int32">
            <summary>Sets the stub of IMessageBuilder.RawWrite(Byte[] bytes, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteBoolBoolean">
            <summary>Sets the stub of IStreamMessageBuilder.WriteBool(Boolean value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteByteByte">
            <summary>Sets the stub of IStreamMessageBuilder.WriteByte(Byte value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteBytesByteArray">
            <summary>Sets the stub of IStreamMessageBuilder.WriteBytes(Byte[] source)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteBytesByteArrayInt32Int32">
            <summary>Sets the stub of IStreamMessageBuilder.WriteBytes(Byte[] source, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteCharChar">
            <summary>Sets the stub of IStreamMessageBuilder.WriteChar(Char value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteDoubleDouble">
            <summary>Sets the stub of IStreamMessageBuilder.WriteDouble(Double value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteInt16Int16">
            <summary>Sets the stub of IStreamMessageBuilder.WriteInt16(Int16 value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteInt32Int32">
            <summary>Sets the stub of IStreamMessageBuilder.WriteInt32(Int32 value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteInt64Int64">
            <summary>Sets the stub of IStreamMessageBuilder.WriteInt64(Int64 value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteObjectObject">
            <summary>Sets the stub of IStreamMessageBuilder.WriteObject(Object value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteObjectsObjectArray">
            <summary>Sets the stub of IStreamMessageBuilder.WriteObjects(Object[] values)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteSingleSingle">
            <summary>Sets the stub of IStreamMessageBuilder.WriteSingle(Single value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageBuilder.WriteStringString">
            <summary>Sets the stub of IStreamMessageBuilder.WriteString(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader">
            <summary>Stub type of RabbitMQ.Client.Content.IStreamMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.#ctor">
            <summary>Initializes a new instance of type StubIStreamMessageReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IMessageReader#BodyBytes">
            <summary>Sets the stub of IMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.BodyBytesGet">
            <summary>Sets the stub of IMessageReader.get_BodyBytes()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IMessageReader#BodyStream">
            <summary>Sets the stub of IMessageReader.get_BodyStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.BodyStreamGet">
            <summary>Sets the stub of IMessageReader.get_BodyStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IMessageReader#Headers">
            <summary>Sets the stub of IMessageReader.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.HeadersGet">
            <summary>Sets the stub of IMessageReader.get_Headers()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IMessageReader#RawRead">
            <summary>Sets the stub of IMessageReader.RawRead()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IMessageReader#RawRead(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of IMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadBool">
            <summary>Sets the stub of IStreamMessageReader.ReadBool()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadByte">
            <summary>Sets the stub of IStreamMessageReader.ReadByte()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadBytes">
            <summary>Sets the stub of IStreamMessageReader.ReadBytes()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadChar">
            <summary>Sets the stub of IStreamMessageReader.ReadChar()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadDouble">
            <summary>Sets the stub of IStreamMessageReader.ReadDouble()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadInt16">
            <summary>Sets the stub of IStreamMessageReader.ReadInt16()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadInt32">
            <summary>Sets the stub of IStreamMessageReader.ReadInt32()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadInt64">
            <summary>Sets the stub of IStreamMessageReader.ReadInt64()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadObject">
            <summary>Sets the stub of IStreamMessageReader.ReadObject()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadObjects">
            <summary>Sets the stub of IStreamMessageReader.ReadObjects()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadSingle">
            <summary>Sets the stub of IStreamMessageReader.ReadSingle()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RabbitMQ#Client#Content#IStreamMessageReader#ReadString">
            <summary>Sets the stub of IStreamMessageReader.ReadString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RawRead">
            <summary>Sets the stub of IMessageReader.RawRead()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.RawReadByteArrayInt32Int32">
            <summary>Sets the stub of IMessageReader.RawRead(Byte[] target, Int32 offset, Int32 length)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadBool">
            <summary>Sets the stub of IStreamMessageReader.ReadBool()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadByte">
            <summary>Sets the stub of IStreamMessageReader.ReadByte()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadBytes">
            <summary>Sets the stub of IStreamMessageReader.ReadBytes()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadChar">
            <summary>Sets the stub of IStreamMessageReader.ReadChar()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadDouble">
            <summary>Sets the stub of IStreamMessageReader.ReadDouble()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadInt16">
            <summary>Sets the stub of IStreamMessageReader.ReadInt16()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadInt32">
            <summary>Sets the stub of IStreamMessageReader.ReadInt32()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadInt64">
            <summary>Sets the stub of IStreamMessageReader.ReadInt64()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadObject">
            <summary>Sets the stub of IStreamMessageReader.ReadObject()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadObjects">
            <summary>Sets the stub of IStreamMessageReader.ReadObjects()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadSingle">
            <summary>Sets the stub of IStreamMessageReader.ReadSingle()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubIStreamMessageReader.ReadString">
            <summary>Sets the stub of IStreamMessageReader.ReadString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder">
            <summary>Stub type of RabbitMQ.Client.Content.MapMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.#ctor(RabbitMQ.Client.IModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.#ctor(RabbitMQ.Client.IModel,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.GetContentBody">
            <summary>Sets the stub of MapMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.GetContentBody01">
            <summary>Sets the stub of MapMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.GetContentHeader">
            <summary>Sets the stub of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.GetContentHeader01">
            <summary>Sets the stub of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.GetDefaultContentType">
            <summary>Sets the stub of MapMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.GetDefaultContentType01">
            <summary>Sets the stub of MapMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.InitializeStub">
            <summary>Initializes a new instance of type StubMapMessageBuilder</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubMapMessageBuilder.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubMapMessageReader">
            <summary>Stub type of RabbitMQ.Client.Content.MapMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubMapMessageReader.#ctor(RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubMapMessageReader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubMapMessageReader.InitializeStub">
            <summary>Initializes a new instance of type StubMapMessageReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubMapMessageReader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubMapMessageReader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder">
            <summary>Stub type of RabbitMQ.Client.Content.StreamMessageBuilder</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.#ctor(RabbitMQ.Client.IModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.#ctor(RabbitMQ.Client.IModel,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.GetContentBody">
            <summary>Sets the stub of BasicMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.GetContentBody01">
            <summary>Sets the stub of BasicMessageBuilder.GetContentBody()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.GetContentHeader">
            <summary>Sets the stub of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.GetContentHeader01">
            <summary>Sets the stub of BasicMessageBuilder.GetContentHeader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.GetDefaultContentType">
            <summary>Sets the stub of StreamMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.GetDefaultContentType01">
            <summary>Sets the stub of StreamMessageBuilder.GetDefaultContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.InitializeStub">
            <summary>Initializes a new instance of type StubStreamMessageBuilder</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubStreamMessageBuilder.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Content.Fakes.StubStreamMessageReader">
            <summary>Stub type of RabbitMQ.Client.Content.StreamMessageReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubStreamMessageReader.#ctor(RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubStreamMessageReader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Content.Fakes.StubStreamMessageReader.InitializeStub">
            <summary>Initializes a new instance of type StubStreamMessageReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubStreamMessageReader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Content.Fakes.StubStreamMessageReader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer">
            <summary>Shim type of RabbitMQ.Client.Events.AsyncEventingBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.#ctor(RabbitMQ.Client.Events.AsyncEventingBasicConsumer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.HandleBasicCancelOkString">
            <summary>Sets the shim of AsyncEventingBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.HandleBasicConsumeOkString">
            <summary>Sets the shim of AsyncEventingBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AsyncEventingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.RaiseOf1AsyncEventHandlerOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{RabbitMQ.Client.Events.AsyncEventingBasicConsumer,RabbitMQ.Client.Events.AsyncEventHandler{``0},``0,System.Threading.Tasks.Task})">
            <summary>Sets the shim of AsyncEventingBasicConsumer.Raise(AsyncEventHandler`1&lt;!!0&gt; eventHandler, !!0 evt)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.ReceivedAddAsyncEventHandlerOfBasicDeliverEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.add_Received(AsyncEventHandler`1&lt;BasicDeliverEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.ReceivedRemoveAsyncEventHandlerOfBasicDeliverEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.remove_Received(AsyncEventHandler`1&lt;BasicDeliverEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.RegisteredAddAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.add_Registered(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.RegisteredRemoveAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.remove_Registered(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.ShutdownAddAsyncEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.add_Shutdown(AsyncEventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.ShutdownRemoveAsyncEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.remove_Shutdown(AsyncEventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.UnregisteredAddAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.add_Unregistered(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances.UnregisteredRemoveAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.remove_Unregistered(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances._n__0String">
            <summary>Sets the shim of AsyncEventingBasicConsumer.&lt;&gt;n__0(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances._n__1String">
            <summary>Sets the shim of AsyncEventingBasicConsumer.&lt;&gt;n__1(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances._n__2StringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AsyncEventingBasicConsumer.&lt;&gt;n__2(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.AllInstances._n__3ObjectShutdownEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.&lt;&gt;n__3(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.Bind(RabbitMQ.Client.IAsyncBasicConsumer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.Bind(RabbitMQ.Client.IBasicConsumer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.ConstructorIModel">
            <summary>Sets the shim of AsyncEventingBasicConsumer.AsyncEventingBasicConsumer(IModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the shim of AsyncEventingBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the shim of AsyncEventingBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AsyncEventingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.RaiseOf1AsyncEventHandlerOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{RabbitMQ.Client.Events.AsyncEventHandler{``0},``0,System.Threading.Tasks.Task})">
            <summary>Sets the shim of AsyncEventingBasicConsumer.Raise(AsyncEventHandler`1&lt;!!0&gt; eventHandler, !!0 evt)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.ReceivedAddAsyncEventHandlerOfBasicDeliverEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.add_Received(AsyncEventHandler`1&lt;BasicDeliverEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.ReceivedRemoveAsyncEventHandlerOfBasicDeliverEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.remove_Received(AsyncEventHandler`1&lt;BasicDeliverEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.RegisteredAddAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.add_Registered(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.RegisteredRemoveAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.remove_Registered(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.ShutdownAddAsyncEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.add_Shutdown(AsyncEventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.ShutdownRemoveAsyncEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.remove_Shutdown(AsyncEventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.UnregisteredAddAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.add_Unregistered(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer.UnregisteredRemoveAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.remove_Unregistered(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer._n__0String">
            <summary>Sets the shim of AsyncEventingBasicConsumer.&lt;&gt;n__0(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer._n__1String">
            <summary>Sets the shim of AsyncEventingBasicConsumer.&lt;&gt;n__1(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer._n__2StringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AsyncEventingBasicConsumer.&lt;&gt;n__2(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimAsyncEventingBasicConsumer._n__3ObjectShutdownEventArgs">
            <summary>Sets the shim of AsyncEventingBasicConsumer.&lt;&gt;n__3(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.BaseExceptionEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.#ctor(RabbitMQ.Client.Events.BaseExceptionEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.AllInstances.DetailGet">
            <summary>Sets the shim of BaseExceptionEventArgs.get_Detail()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.AllInstances.DetailSetIDictionaryOfStringObject">
            <summary>Sets the shim of BaseExceptionEventArgs.set_Detail(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.AllInstances.ExceptionGet">
            <summary>Sets the shim of BaseExceptionEventArgs.get_Exception()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.AllInstances.ExceptionSetException">
            <summary>Sets the shim of BaseExceptionEventArgs.set_Exception(Exception value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.AllInstances.UpdateDetailsIDictionaryOfStringObject">
            <summary>Sets the shim of BaseExceptionEventArgs.UpdateDetails(IDictionary`2&lt;String,Object&gt; other)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.ConstructorException">
            <summary>Sets the shim of BaseExceptionEventArgs.BaseExceptionEventArgs(Exception exception)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.DetailGet">
            <summary>Sets the shim of BaseExceptionEventArgs.get_Detail()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.DetailSetIDictionaryOfStringObject">
            <summary>Sets the shim of BaseExceptionEventArgs.set_Detail(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.ExceptionGet">
            <summary>Sets the shim of BaseExceptionEventArgs.get_Exception()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.ExceptionSetException">
            <summary>Sets the shim of BaseExceptionEventArgs.set_Exception(Exception value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBaseExceptionEventArgs.UpdateDetailsIDictionaryOfStringObject">
            <summary>Sets the shim of BaseExceptionEventArgs.UpdateDetails(IDictionary`2&lt;String,Object&gt; other)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.BasicAckEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.#ctor(RabbitMQ.Client.Events.BasicAckEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.AllInstances.DeliveryTagGet">
            <summary>Sets the shim of BasicAckEventArgs.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.AllInstances.DeliveryTagSetUInt64">
            <summary>Sets the shim of BasicAckEventArgs.set_DeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.AllInstances.MultipleGet">
            <summary>Sets the shim of BasicAckEventArgs.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.AllInstances.MultipleSetBoolean">
            <summary>Sets the shim of BasicAckEventArgs.set_Multiple(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.Constructor">
            <summary>Sets the shim of BasicAckEventArgs.BasicAckEventArgs()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.DeliveryTagGet">
            <summary>Sets the shim of BasicAckEventArgs.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.DeliveryTagSetUInt64">
            <summary>Sets the shim of BasicAckEventArgs.set_DeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.MultipleGet">
            <summary>Sets the shim of BasicAckEventArgs.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicAckEventArgs.MultipleSetBoolean">
            <summary>Sets the shim of BasicAckEventArgs.set_Multiple(Boolean value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.BasicDeliverEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.#ctor(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.BasicPropertiesGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_BasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.BasicPropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicDeliverEventArgs.set_BasicProperties(IBasicProperties value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.BodyGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.BodySetByteArray">
            <summary>Sets the shim of BasicDeliverEventArgs.set_Body(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.ConsumerTagGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.ConsumerTagSetString">
            <summary>Sets the shim of BasicDeliverEventArgs.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.DeliveryTagGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.DeliveryTagSetUInt64">
            <summary>Sets the shim of BasicDeliverEventArgs.set_DeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.ExchangeGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.ExchangeSetString">
            <summary>Sets the shim of BasicDeliverEventArgs.set_Exchange(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.RedeliveredGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.RedeliveredSetBoolean">
            <summary>Sets the shim of BasicDeliverEventArgs.set_Redelivered(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.RoutingKeyGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.AllInstances.RoutingKeySetString">
            <summary>Sets the shim of BasicDeliverEventArgs.set_RoutingKey(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.BasicPropertiesGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_BasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.BasicPropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicDeliverEventArgs.set_BasicProperties(IBasicProperties value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.BodyGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.BodySetByteArray">
            <summary>Sets the shim of BasicDeliverEventArgs.set_Body(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.Constructor">
            <summary>Sets the shim of BasicDeliverEventArgs.BasicDeliverEventArgs()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.ConstructorStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of BasicDeliverEventArgs.BasicDeliverEventArgs(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.ConsumerTagGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.ConsumerTagSetString">
            <summary>Sets the shim of BasicDeliverEventArgs.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.DeliveryTagGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.DeliveryTagSetUInt64">
            <summary>Sets the shim of BasicDeliverEventArgs.set_DeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.ExchangeGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.ExchangeSetString">
            <summary>Sets the shim of BasicDeliverEventArgs.set_Exchange(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.RedeliveredGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.RedeliveredSetBoolean">
            <summary>Sets the shim of BasicDeliverEventArgs.set_Redelivered(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.RoutingKeyGet">
            <summary>Sets the shim of BasicDeliverEventArgs.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicDeliverEventArgs.RoutingKeySetString">
            <summary>Sets the shim of BasicDeliverEventArgs.set_RoutingKey(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.BasicNackEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.#ctor(RabbitMQ.Client.Events.BasicNackEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.AllInstances.DeliveryTagGet">
            <summary>Sets the shim of BasicNackEventArgs.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.AllInstances.DeliveryTagSetUInt64">
            <summary>Sets the shim of BasicNackEventArgs.set_DeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.AllInstances.MultipleGet">
            <summary>Sets the shim of BasicNackEventArgs.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.AllInstances.MultipleSetBoolean">
            <summary>Sets the shim of BasicNackEventArgs.set_Multiple(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.AllInstances.RequeueGet">
            <summary>Sets the shim of BasicNackEventArgs.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.AllInstances.RequeueSetBoolean">
            <summary>Sets the shim of BasicNackEventArgs.set_Requeue(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.Constructor">
            <summary>Sets the shim of BasicNackEventArgs.BasicNackEventArgs()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.DeliveryTagGet">
            <summary>Sets the shim of BasicNackEventArgs.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.DeliveryTagSetUInt64">
            <summary>Sets the shim of BasicNackEventArgs.set_DeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.MultipleGet">
            <summary>Sets the shim of BasicNackEventArgs.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.MultipleSetBoolean">
            <summary>Sets the shim of BasicNackEventArgs.set_Multiple(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.RequeueGet">
            <summary>Sets the shim of BasicNackEventArgs.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicNackEventArgs.RequeueSetBoolean">
            <summary>Sets the shim of BasicNackEventArgs.set_Requeue(Boolean value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.BasicReturnEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.#ctor(RabbitMQ.Client.Events.BasicReturnEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.BasicPropertiesGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_BasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.BasicPropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicReturnEventArgs.set_BasicProperties(IBasicProperties value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.BodyGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.BodySetByteArray">
            <summary>Sets the shim of BasicReturnEventArgs.set_Body(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.ExchangeGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.ExchangeSetString">
            <summary>Sets the shim of BasicReturnEventArgs.set_Exchange(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.ReplyCodeGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.ReplyCodeSetUInt16">
            <summary>Sets the shim of BasicReturnEventArgs.set_ReplyCode(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.ReplyTextGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.ReplyTextSetString">
            <summary>Sets the shim of BasicReturnEventArgs.set_ReplyText(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.RoutingKeyGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.AllInstances.RoutingKeySetString">
            <summary>Sets the shim of BasicReturnEventArgs.set_RoutingKey(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.BasicPropertiesGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_BasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.BasicPropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicReturnEventArgs.set_BasicProperties(IBasicProperties value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.BodyGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.BodySetByteArray">
            <summary>Sets the shim of BasicReturnEventArgs.set_Body(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.Constructor">
            <summary>Sets the shim of BasicReturnEventArgs.BasicReturnEventArgs()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.ExchangeGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.ExchangeSetString">
            <summary>Sets the shim of BasicReturnEventArgs.set_Exchange(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.ReplyCodeGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.ReplyCodeSetUInt16">
            <summary>Sets the shim of BasicReturnEventArgs.set_ReplyCode(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.ReplyTextGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.ReplyTextSetString">
            <summary>Sets the shim of BasicReturnEventArgs.set_ReplyText(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.RoutingKeyGet">
            <summary>Sets the shim of BasicReturnEventArgs.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimBasicReturnEventArgs.RoutingKeySetString">
            <summary>Sets the shim of BasicReturnEventArgs.set_RoutingKey(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.CallbackExceptionEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs.#ctor(RabbitMQ.Client.Events.CallbackExceptionEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs.BuildExceptionIDictionaryOfStringObject">
            <summary>Sets the shim of CallbackExceptionEventArgs.Build(Exception e, IDictionary`2&lt;String,Object&gt; details)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs.BuildExceptionString">
            <summary>Sets the shim of CallbackExceptionEventArgs.Build(Exception e, String context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimCallbackExceptionEventArgs.ConstructorException">
            <summary>Sets the shim of CallbackExceptionEventArgs.CallbackExceptionEventArgs(Exception e)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.ConnectionBlockedEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.#ctor(RabbitMQ.Client.Events.ConnectionBlockedEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.AllInstances.ReasonGet">
            <summary>Sets the shim of ConnectionBlockedEventArgs.get_Reason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.AllInstances.ReasonSetString">
            <summary>Sets the shim of ConnectionBlockedEventArgs.set_Reason(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.ConstructorString">
            <summary>Sets the shim of ConnectionBlockedEventArgs.ConnectionBlockedEventArgs(String reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.ReasonGet">
            <summary>Sets the shim of ConnectionBlockedEventArgs.get_Reason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionBlockedEventArgs.ReasonSetString">
            <summary>Sets the shim of ConnectionBlockedEventArgs.set_Reason(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.#ctor(RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.AllInstances.ExceptionGet">
            <summary>Sets the shim of ConnectionRecoveryErrorEventArgs.get_Exception()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.AllInstances.ExceptionSetException">
            <summary>Sets the shim of ConnectionRecoveryErrorEventArgs.set_Exception(Exception value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.ConstructorException">
            <summary>Sets the shim of ConnectionRecoveryErrorEventArgs.ConnectionRecoveryErrorEventArgs(Exception ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.ExceptionGet">
            <summary>Sets the shim of ConnectionRecoveryErrorEventArgs.get_Exception()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConnectionRecoveryErrorEventArgs.ExceptionSetException">
            <summary>Sets the shim of ConnectionRecoveryErrorEventArgs.set_Exception(Exception value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.ConsumerEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.#ctor(RabbitMQ.Client.Events.ConsumerEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.AllInstances.ConsumerTagGet">
            <summary>Sets the shim of ConsumerEventArgs.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.AllInstances.ConsumerTagSetString">
            <summary>Sets the shim of ConsumerEventArgs.set_ConsumerTag(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.ConstructorString">
            <summary>Sets the shim of ConsumerEventArgs.ConsumerEventArgs(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.ConsumerTagGet">
            <summary>Sets the shim of ConsumerEventArgs.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerEventArgs.ConsumerTagSetString">
            <summary>Sets the shim of ConsumerEventArgs.set_ConsumerTag(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.#ctor(RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.AllInstances.TagAfterGet">
            <summary>Sets the shim of ConsumerTagChangedAfterRecoveryEventArgs.get_TagAfter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.AllInstances.TagAfterSetString">
            <summary>Sets the shim of ConsumerTagChangedAfterRecoveryEventArgs.set_TagAfter(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.AllInstances.TagBeforeGet">
            <summary>Sets the shim of ConsumerTagChangedAfterRecoveryEventArgs.get_TagBefore()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.AllInstances.TagBeforeSetString">
            <summary>Sets the shim of ConsumerTagChangedAfterRecoveryEventArgs.set_TagBefore(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.ConstructorStringString">
            <summary>Sets the shim of ConsumerTagChangedAfterRecoveryEventArgs.ConsumerTagChangedAfterRecoveryEventArgs(String tagBefore, String tagAfter)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.TagAfterGet">
            <summary>Sets the shim of ConsumerTagChangedAfterRecoveryEventArgs.get_TagAfter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.TagAfterSetString">
            <summary>Sets the shim of ConsumerTagChangedAfterRecoveryEventArgs.set_TagAfter(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.TagBeforeGet">
            <summary>Sets the shim of ConsumerTagChangedAfterRecoveryEventArgs.get_TagBefore()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimConsumerTagChangedAfterRecoveryEventArgs.TagBeforeSetString">
            <summary>Sets the shim of ConsumerTagChangedAfterRecoveryEventArgs.set_TagBefore(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer">
            <summary>Shim type of RabbitMQ.Client.Events.EventingBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.#ctor(RabbitMQ.Client.Events.EventingBasicConsumer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.HandleBasicCancelOkString">
            <summary>Sets the shim of EventingBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.HandleBasicConsumeOkString">
            <summary>Sets the shim of EventingBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of EventingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.RaiseOf1EventHandlerOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{RabbitMQ.Client.Events.EventingBasicConsumer,System.EventHandler{``0},``0})">
            <summary>Sets the shim of EventingBasicConsumer.Raise(EventHandler`1&lt;!!0&gt; eventHandler, !!0 evt)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.ReceivedAddEventHandlerOfBasicDeliverEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.add_Received(EventHandler`1&lt;BasicDeliverEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.ReceivedRemoveEventHandlerOfBasicDeliverEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.remove_Received(EventHandler`1&lt;BasicDeliverEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.RegisteredAddEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.add_Registered(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.RegisteredRemoveEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.remove_Registered(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.ShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.add_Shutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.ShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.remove_Shutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.UnregisteredAddEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.add_Unregistered(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.AllInstances.UnregisteredRemoveEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.remove_Unregistered(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.Bind(RabbitMQ.Client.IBasicConsumer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.ConstructorIModel">
            <summary>Sets the shim of EventingBasicConsumer.EventingBasicConsumer(IModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the shim of EventingBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the shim of EventingBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of EventingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.RaiseOf1EventHandlerOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.EventHandler{``0},``0})">
            <summary>Sets the shim of EventingBasicConsumer.Raise(EventHandler`1&lt;!!0&gt; eventHandler, !!0 evt)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.ReceivedAddEventHandlerOfBasicDeliverEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.add_Received(EventHandler`1&lt;BasicDeliverEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.ReceivedRemoveEventHandlerOfBasicDeliverEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.remove_Received(EventHandler`1&lt;BasicDeliverEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.RegisteredAddEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.add_Registered(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.RegisteredRemoveEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.remove_Registered(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.ShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.add_Shutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.ShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.remove_Shutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.UnregisteredAddEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.add_Unregistered(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimEventingBasicConsumer.UnregisteredRemoveEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of EventingBasicConsumer.remove_Unregistered(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.FlowControlEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.#ctor(RabbitMQ.Client.Events.FlowControlEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.ActiveGet">
            <summary>Sets the shim of FlowControlEventArgs.get_Active()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.ActiveSetBoolean">
            <summary>Sets the shim of FlowControlEventArgs.set_Active(Boolean value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.AllInstances.ActiveGet">
            <summary>Sets the shim of FlowControlEventArgs.get_Active()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.AllInstances.ActiveSetBoolean">
            <summary>Sets the shim of FlowControlEventArgs.set_Active(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimFlowControlEventArgs.ConstructorBoolean">
            <summary>Sets the shim of FlowControlEventArgs.FlowControlEventArgs(Boolean active)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.#ctor(RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.AllInstances.NameAfterGet">
            <summary>Sets the shim of QueueNameChangedAfterRecoveryEventArgs.get_NameAfter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.AllInstances.NameAfterSetString">
            <summary>Sets the shim of QueueNameChangedAfterRecoveryEventArgs.set_NameAfter(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.AllInstances.NameBeforeGet">
            <summary>Sets the shim of QueueNameChangedAfterRecoveryEventArgs.get_NameBefore()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.AllInstances.NameBeforeSetString">
            <summary>Sets the shim of QueueNameChangedAfterRecoveryEventArgs.set_NameBefore(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.ConstructorStringString">
            <summary>Sets the shim of QueueNameChangedAfterRecoveryEventArgs.QueueNameChangedAfterRecoveryEventArgs(String nameBefore, String nameAfter)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.NameAfterGet">
            <summary>Sets the shim of QueueNameChangedAfterRecoveryEventArgs.get_NameAfter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.NameAfterSetString">
            <summary>Sets the shim of QueueNameChangedAfterRecoveryEventArgs.set_NameAfter(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.NameBeforeGet">
            <summary>Sets the shim of QueueNameChangedAfterRecoveryEventArgs.get_NameBefore()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimQueueNameChangedAfterRecoveryEventArgs.NameBeforeSetString">
            <summary>Sets the shim of QueueNameChangedAfterRecoveryEventArgs.set_NameBefore(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimRecoveryExceptionEventArgs">
            <summary>Shim type of RabbitMQ.Client.Events.RecoveryExceptionEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimRecoveryExceptionEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimRecoveryExceptionEventArgs.#ctor(RabbitMQ.Client.Events.RecoveryExceptionEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.ShimRecoveryExceptionEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimRecoveryExceptionEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.ShimRecoveryExceptionEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimRecoveryExceptionEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.ShimRecoveryExceptionEventArgs.ConstructorException">
            <summary>Sets the shim of RecoveryExceptionEventArgs.RecoveryExceptionEventArgs(Exception e)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer">
            <summary>Stub type of RabbitMQ.Client.Events.AsyncEventingBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.#ctor(RabbitMQ.Client.IModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleBasicCancel(System.String)">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleBasicCancelOk(System.String)">
            <summary>Sets the stub of AsyncEventingBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the stub of AsyncEventingBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleBasicCancelString">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleBasicConsumeOk(System.String)">
            <summary>Sets the stub of AsyncEventingBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the stub of AsyncEventingBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of AsyncEventingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of AsyncEventingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleModelShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of AsyncEventingBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of AsyncEventingBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.InitializeStub">
            <summary>Initializes a new instance of type StubAsyncEventingBasicConsumer</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.OnCancel">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubAsyncEventingBasicConsumer.OnCancel01">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubBaseExceptionEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.BaseExceptionEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBaseExceptionEventArgs.#ctor(System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBaseExceptionEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBaseExceptionEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubBaseExceptionEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBaseExceptionEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBaseExceptionEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubBasicAckEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.BasicAckEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBasicAckEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicAckEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBasicAckEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubBasicAckEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicAckEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicAckEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubBasicDeliverEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.BasicDeliverEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBasicDeliverEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBasicDeliverEventArgs.#ctor(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicDeliverEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBasicDeliverEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubBasicDeliverEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicDeliverEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicDeliverEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubBasicNackEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.BasicNackEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBasicNackEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicNackEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBasicNackEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubBasicNackEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicNackEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicNackEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubBasicReturnEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.BasicReturnEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBasicReturnEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicReturnEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubBasicReturnEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubBasicReturnEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicReturnEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubBasicReturnEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubCallbackExceptionEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.CallbackExceptionEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubCallbackExceptionEventArgs.#ctor(System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubCallbackExceptionEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubCallbackExceptionEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubCallbackExceptionEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubCallbackExceptionEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubCallbackExceptionEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubConnectionBlockedEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.ConnectionBlockedEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubConnectionBlockedEventArgs.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubConnectionBlockedEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubConnectionBlockedEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionBlockedEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubConnectionBlockedEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubConnectionBlockedEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubConsumerEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.ConsumerEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubConsumerEventArgs.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubConsumerEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubConsumerEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubConsumerEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubConsumerEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubConsumerEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer">
            <summary>Stub type of RabbitMQ.Client.Events.EventingBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.#ctor(RabbitMQ.Client.IModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleBasicCancel(System.String)">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleBasicCancelOk(System.String)">
            <summary>Sets the stub of EventingBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the stub of EventingBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleBasicCancelString">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleBasicConsumeOk(System.String)">
            <summary>Sets the stub of EventingBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the stub of EventingBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of EventingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of EventingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleModelShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of EventingBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of EventingBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.InitializeStub">
            <summary>Initializes a new instance of type StubEventingBasicConsumer</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.OnCancel">
            <summary>Sets the stub of DefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.Fakes.StubEventingBasicConsumer.OnCancel01">
            <summary>Sets the stub of DefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubFlowControlEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.FlowControlEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubFlowControlEventArgs.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubFlowControlEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubFlowControlEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubFlowControlEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubFlowControlEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubFlowControlEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.Fakes.StubRecoveryExceptionEventArgs">
            <summary>Stub type of RabbitMQ.Client.Events.RecoveryExceptionEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubRecoveryExceptionEventArgs.#ctor(System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubRecoveryExceptionEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.Fakes.StubRecoveryExceptionEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubRecoveryExceptionEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubRecoveryExceptionEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.Fakes.StubRecoveryExceptionEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimAlreadyClosedException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.AlreadyClosedException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAlreadyClosedException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAlreadyClosedException.#ctor(RabbitMQ.Client.Exceptions.AlreadyClosedException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimAlreadyClosedException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAlreadyClosedException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAlreadyClosedException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimAlreadyClosedException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAlreadyClosedException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimAlreadyClosedException.ConstructorShutdownEventArgs">
            <summary>Sets the shim of AlreadyClosedException.AlreadyClosedException(ShutdownEventArgs reason)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimAuthenticationFailureException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.AuthenticationFailureException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAuthenticationFailureException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAuthenticationFailureException.#ctor(RabbitMQ.Client.Exceptions.AuthenticationFailureException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimAuthenticationFailureException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAuthenticationFailureException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAuthenticationFailureException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimAuthenticationFailureException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimAuthenticationFailureException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimAuthenticationFailureException.ConstructorString">
            <summary>Sets the shim of AuthenticationFailureException.AuthenticationFailureException(String msg)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimBrokerUnreachableException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.BrokerUnreachableException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimBrokerUnreachableException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimBrokerUnreachableException.#ctor(RabbitMQ.Client.Exceptions.BrokerUnreachableException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimBrokerUnreachableException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimBrokerUnreachableException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimBrokerUnreachableException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimBrokerUnreachableException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimBrokerUnreachableException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimBrokerUnreachableException.ConstructorException">
            <summary>Sets the shim of BrokerUnreachableException.BrokerUnreachableException(Exception Inner)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.ChannelAllocationException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.#ctor(RabbitMQ.Client.Exceptions.ChannelAllocationException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.AllInstances.ChannelGet">
            <summary>Sets the shim of ChannelAllocationException.get_Channel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.AllInstances.ChannelSetInt32">
            <summary>Sets the shim of ChannelAllocationException.set_Channel(Int32 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.ChannelGet">
            <summary>Sets the shim of ChannelAllocationException.get_Channel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.ChannelSetInt32">
            <summary>Sets the shim of ChannelAllocationException.set_Channel(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.Constructor">
            <summary>Sets the shim of ChannelAllocationException.ChannelAllocationException()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimChannelAllocationException.ConstructorInt32">
            <summary>Sets the shim of ChannelAllocationException.ChannelAllocationException(Int32 channel)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimConnectFailureException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.ConnectFailureException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimConnectFailureException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimConnectFailureException.#ctor(RabbitMQ.Client.Exceptions.ConnectFailureException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimConnectFailureException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimConnectFailureException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimConnectFailureException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimConnectFailureException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimConnectFailureException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimConnectFailureException.ConstructorStringException">
            <summary>Sets the shim of ConnectFailureException.ConnectFailureException(String msg, Exception inner)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.OperationInterruptedException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.#ctor(RabbitMQ.Client.Exceptions.OperationInterruptedException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.AllInstances.ShutdownReasonGet">
            <summary>Sets the shim of OperationInterruptedException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.AllInstances.ShutdownReasonSetShutdownEventArgs">
            <summary>Sets the shim of OperationInterruptedException.set_ShutdownReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.Constructor">
            <summary>Sets the shim of OperationInterruptedException.OperationInterruptedException()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.ConstructorShutdownEventArgs">
            <summary>Sets the shim of OperationInterruptedException.OperationInterruptedException(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.ConstructorShutdownEventArgsString">
            <summary>Sets the shim of OperationInterruptedException.OperationInterruptedException(ShutdownEventArgs reason, String prefix)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.ConstructorString">
            <summary>Sets the shim of OperationInterruptedException.OperationInterruptedException(String message)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.ConstructorStringException">
            <summary>Sets the shim of OperationInterruptedException.OperationInterruptedException(String message, Exception inner)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.ShutdownReasonGet">
            <summary>Sets the shim of OperationInterruptedException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimOperationInterruptedException.ShutdownReasonSetShutdownEventArgs">
            <summary>Sets the shim of OperationInterruptedException.set_ShutdownReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.PacketNotRecognizedException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.#ctor(RabbitMQ.Client.Exceptions.PacketNotRecognizedException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.AllInstances.ServerMajorGet">
            <summary>Sets the shim of PacketNotRecognizedException.get_ServerMajor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.AllInstances.ServerMajorSetInt32">
            <summary>Sets the shim of PacketNotRecognizedException.set_ServerMajor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.AllInstances.ServerMinorGet">
            <summary>Sets the shim of PacketNotRecognizedException.get_ServerMinor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.AllInstances.ServerMinorSetInt32">
            <summary>Sets the shim of PacketNotRecognizedException.set_ServerMinor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.AllInstances.TransportHighGet">
            <summary>Sets the shim of PacketNotRecognizedException.get_TransportHigh()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.AllInstances.TransportHighSetInt32">
            <summary>Sets the shim of PacketNotRecognizedException.set_TransportHigh(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.AllInstances.TransportLowGet">
            <summary>Sets the shim of PacketNotRecognizedException.get_TransportLow()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.AllInstances.TransportLowSetInt32">
            <summary>Sets the shim of PacketNotRecognizedException.set_TransportLow(Int32 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.ConstructorInt32Int32Int32Int32">
            <summary>Sets the shim of PacketNotRecognizedException.PacketNotRecognizedException(Int32 transportHigh, Int32 transportLow, Int32 serverMajor, Int32 serverMinor)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.ServerMajorGet">
            <summary>Sets the shim of PacketNotRecognizedException.get_ServerMajor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.ServerMajorSetInt32">
            <summary>Sets the shim of PacketNotRecognizedException.set_ServerMajor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.ServerMinorGet">
            <summary>Sets the shim of PacketNotRecognizedException.get_ServerMinor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.ServerMinorSetInt32">
            <summary>Sets the shim of PacketNotRecognizedException.set_ServerMinor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.TransportHighGet">
            <summary>Sets the shim of PacketNotRecognizedException.get_TransportHigh()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.TransportHighSetInt32">
            <summary>Sets the shim of PacketNotRecognizedException.set_TransportHigh(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.TransportLowGet">
            <summary>Sets the shim of PacketNotRecognizedException.get_TransportLow()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPacketNotRecognizedException.TransportLowSetInt32">
            <summary>Sets the shim of PacketNotRecognizedException.set_TransportLow(Int32 value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.PossibleAuthenticationFailureException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException.#ctor(RabbitMQ.Client.Exceptions.PossibleAuthenticationFailureException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException.ConstructorString">
            <summary>Sets the shim of PossibleAuthenticationFailureException.PossibleAuthenticationFailureException(String msg)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimPossibleAuthenticationFailureException.ConstructorStringException">
            <summary>Sets the shim of PossibleAuthenticationFailureException.PossibleAuthenticationFailureException(String msg, Exception inner)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.#ctor(RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.AllInstances.ClientMajorGet">
            <summary>Sets the shim of ProtocolVersionMismatchException.get_ClientMajor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.AllInstances.ClientMajorSetInt32">
            <summary>Sets the shim of ProtocolVersionMismatchException.set_ClientMajor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.AllInstances.ClientMinorGet">
            <summary>Sets the shim of ProtocolVersionMismatchException.get_ClientMinor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.AllInstances.ClientMinorSetInt32">
            <summary>Sets the shim of ProtocolVersionMismatchException.set_ClientMinor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.AllInstances.ServerMajorGet">
            <summary>Sets the shim of ProtocolVersionMismatchException.get_ServerMajor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.AllInstances.ServerMajorSetInt32">
            <summary>Sets the shim of ProtocolVersionMismatchException.set_ServerMajor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.AllInstances.ServerMinorGet">
            <summary>Sets the shim of ProtocolVersionMismatchException.get_ServerMinor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.AllInstances.ServerMinorSetInt32">
            <summary>Sets the shim of ProtocolVersionMismatchException.set_ServerMinor(Int32 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.ClientMajorGet">
            <summary>Sets the shim of ProtocolVersionMismatchException.get_ClientMajor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.ClientMajorSetInt32">
            <summary>Sets the shim of ProtocolVersionMismatchException.set_ClientMajor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.ClientMinorGet">
            <summary>Sets the shim of ProtocolVersionMismatchException.get_ClientMinor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.ClientMinorSetInt32">
            <summary>Sets the shim of ProtocolVersionMismatchException.set_ClientMinor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.ConstructorInt32Int32Int32Int32">
            <summary>Sets the shim of ProtocolVersionMismatchException.ProtocolVersionMismatchException(Int32 clientMajor, Int32 clientMinor, Int32 serverMajor, Int32 serverMinor)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.ServerMajorGet">
            <summary>Sets the shim of ProtocolVersionMismatchException.get_ServerMajor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.ServerMajorSetInt32">
            <summary>Sets the shim of ProtocolVersionMismatchException.set_ServerMajor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.ServerMinorGet">
            <summary>Sets the shim of ProtocolVersionMismatchException.get_ServerMinor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.ServerMinorSetInt32">
            <summary>Sets the shim of ProtocolVersionMismatchException.set_ServerMinor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimProtocolVersionMismatchException.positiveOrUnknownInt32">
            <summary>Sets the shim of ProtocolVersionMismatchException.positiveOrUnknown(Int32 version)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.UnexpectedMethodException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.#ctor(RabbitMQ.Client.Exceptions.UnexpectedMethodException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.AllInstances.MethodGet">
            <summary>Sets the shim of UnexpectedMethodException.get_Method()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.AllInstances.MethodSetIMethod">
            <summary>Sets the shim of UnexpectedMethodException.set_Method(IMethod value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.ConstructorIMethod">
            <summary>Sets the shim of UnexpectedMethodException.UnexpectedMethodException(IMethod method)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.MethodGet">
            <summary>Sets the shim of UnexpectedMethodException.get_Method()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnexpectedMethodException.MethodSetIMethod">
            <summary>Sets the shim of UnexpectedMethodException.set_Method(IMethod value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.UnsupportedMethodException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.#ctor(RabbitMQ.Client.Exceptions.UnsupportedMethodException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.AllInstances.MethodNameGet">
            <summary>Sets the shim of UnsupportedMethodException.get_MethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.AllInstances.MethodNameSetString">
            <summary>Sets the shim of UnsupportedMethodException.set_MethodName(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.ConstructorString">
            <summary>Sets the shim of UnsupportedMethodException.UnsupportedMethodException(String methodName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.MethodNameGet">
            <summary>Sets the shim of UnsupportedMethodException.get_MethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodException.MethodNameSetString">
            <summary>Sets the shim of UnsupportedMethodException.set_MethodName(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.UnsupportedMethodFieldException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.#ctor(RabbitMQ.Client.Exceptions.UnsupportedMethodFieldException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.AllInstances.FieldNameGet">
            <summary>Sets the shim of UnsupportedMethodFieldException.get_FieldName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.AllInstances.FieldNameSetString">
            <summary>Sets the shim of UnsupportedMethodFieldException.set_FieldName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.AllInstances.MethodNameGet">
            <summary>Sets the shim of UnsupportedMethodFieldException.get_MethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.AllInstances.MethodNameSetString">
            <summary>Sets the shim of UnsupportedMethodFieldException.set_MethodName(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.ConstructorStringString">
            <summary>Sets the shim of UnsupportedMethodFieldException.UnsupportedMethodFieldException(String methodName, String fieldName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.FieldNameGet">
            <summary>Sets the shim of UnsupportedMethodFieldException.get_FieldName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.FieldNameSetString">
            <summary>Sets the shim of UnsupportedMethodFieldException.set_FieldName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.MethodNameGet">
            <summary>Sets the shim of UnsupportedMethodFieldException.get_MethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimUnsupportedMethodFieldException.MethodNameSetString">
            <summary>Sets the shim of UnsupportedMethodFieldException.set_MethodName(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException">
            <summary>Shim type of RabbitMQ.Client.Exceptions.WireFormattingException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.#ctor(RabbitMQ.Client.Exceptions.WireFormattingException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.AllInstances.OffenderGet">
            <summary>Sets the shim of WireFormattingException.get_Offender()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.AllInstances.OffenderSetObject">
            <summary>Sets the shim of WireFormattingException.set_Offender(Object value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.ConstructorString">
            <summary>Sets the shim of WireFormattingException.WireFormattingException(String message)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.ConstructorStringObject">
            <summary>Sets the shim of WireFormattingException.WireFormattingException(String message, Object offender)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.OffenderGet">
            <summary>Sets the shim of WireFormattingException.get_Offender()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.ShimWireFormattingException.OffenderSetObject">
            <summary>Sets the shim of WireFormattingException.set_Offender(Object value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.AlreadyClosedException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.#ctor(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubAlreadyClosedException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubAlreadyClosedException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.InitializeStub">
            <summary>Initializes a new instance of type StubAlreadyClosedException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAlreadyClosedException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.AuthenticationFailureException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubAuthenticationFailureException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubAuthenticationFailureException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.InitializeStub">
            <summary>Initializes a new instance of type StubAuthenticationFailureException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubAuthenticationFailureException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.BrokerUnreachableException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.#ctor(System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubBrokerUnreachableException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubBrokerUnreachableException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.InitializeStub">
            <summary>Initializes a new instance of type StubBrokerUnreachableException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubBrokerUnreachableException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.ChannelAllocationException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.#ctor(System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubChannelAllocationException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubChannelAllocationException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.InitializeStub">
            <summary>Initializes a new instance of type StubChannelAllocationException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubChannelAllocationException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.ConnectFailureException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubConnectFailureException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubConnectFailureException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.InitializeStub">
            <summary>Initializes a new instance of type StubConnectFailureException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubConnectFailureException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.OperationInterruptedException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.#ctor(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.#ctor(RabbitMQ.Client.ShutdownEventArgs,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubOperationInterruptedException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubOperationInterruptedException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.InitializeStub">
            <summary>Initializes a new instance of type StubOperationInterruptedException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubOperationInterruptedException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.PacketNotRecognizedException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubPacketNotRecognizedException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubPacketNotRecognizedException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.InitializeStub">
            <summary>Initializes a new instance of type StubPacketNotRecognizedException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPacketNotRecognizedException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.PossibleAuthenticationFailureException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubPossibleAuthenticationFailureException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubPossibleAuthenticationFailureException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.InitializeStub">
            <summary>Initializes a new instance of type StubPossibleAuthenticationFailureException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubPossibleAuthenticationFailureException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubProtocolVersionMismatchException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubProtocolVersionMismatchException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.InitializeStub">
            <summary>Initializes a new instance of type StubProtocolVersionMismatchException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubProtocolVersionMismatchException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.UnexpectedMethodException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.#ctor(RabbitMQ.Client.IMethod)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubUnexpectedMethodException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubUnexpectedMethodException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.InitializeStub">
            <summary>Initializes a new instance of type StubUnexpectedMethodException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnexpectedMethodException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.UnsupportedMethodException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubUnsupportedMethodException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubUnsupportedMethodException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.InitializeStub">
            <summary>Initializes a new instance of type StubUnsupportedMethodException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.UnsupportedMethodFieldException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubUnsupportedMethodFieldException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubUnsupportedMethodFieldException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.InitializeStub">
            <summary>Initializes a new instance of type StubUnsupportedMethodFieldException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubUnsupportedMethodFieldException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException">
            <summary>Stub type of RabbitMQ.Client.Exceptions.WireFormattingException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubWireFormattingException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubWireFormattingException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.InitializeStub">
            <summary>Initializes a new instance of type StubWireFormattingException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Exceptions.Fakes.StubWireFormattingException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint">
            <summary>Shim type of RabbitMQ.Client.AmqpTcpEndpoint</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.#ctor(RabbitMQ.Client.AmqpTcpEndpoint)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AddressFamilyGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_AddressFamily()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AddressFamilySetAddressFamily">
            <summary>Sets the shim of AmqpTcpEndpoint.set_AddressFamily(AddressFamily value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.AddressFamilyGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_AddressFamily()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.AddressFamilySetAddressFamily">
            <summary>Sets the shim of AmqpTcpEndpoint.set_AddressFamily(AddressFamily value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.Clone">
            <summary>Sets the shim of AmqpTcpEndpoint.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.CloneWithHostnameString">
            <summary>Sets the shim of AmqpTcpEndpoint.CloneWithHostname(String hostname)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.EqualsObject">
            <summary>Sets the shim of AmqpTcpEndpoint.Equals(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.GetHashCode01">
            <summary>Sets the shim of AmqpTcpEndpoint.GetHashCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.HostNameGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_HostName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.HostNameSetString">
            <summary>Sets the shim of AmqpTcpEndpoint.set_HostName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.PortGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_Port()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.PortSetInt32">
            <summary>Sets the shim of AmqpTcpEndpoint.set_Port(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.ProtocolGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.SslGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_Ssl()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.SslSetSslOption">
            <summary>Sets the shim of AmqpTcpEndpoint.set_Ssl(SslOption value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.AllInstances.ToString01">
            <summary>Sets the shim of AmqpTcpEndpoint.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.Clone">
            <summary>Sets the shim of AmqpTcpEndpoint.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.CloneWithHostnameString">
            <summary>Sets the shim of AmqpTcpEndpoint.CloneWithHostname(String hostname)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.Constructor">
            <summary>Sets the shim of AmqpTcpEndpoint.AmqpTcpEndpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.ConstructorStringInt32">
            <summary>Sets the shim of AmqpTcpEndpoint.AmqpTcpEndpoint(String hostName, Int32 portOrMinusOne)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.ConstructorStringInt32SslOption">
            <summary>Sets the shim of AmqpTcpEndpoint.AmqpTcpEndpoint(String hostName, Int32 portOrMinusOne, SslOption ssl)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.ConstructorUri">
            <summary>Sets the shim of AmqpTcpEndpoint.AmqpTcpEndpoint(Uri uri)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.ConstructorUriSslOption">
            <summary>Sets the shim of AmqpTcpEndpoint.AmqpTcpEndpoint(Uri uri, SslOption ssl)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.EqualsObject">
            <summary>Sets the shim of AmqpTcpEndpoint.Equals(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.GetHashCode">
            <summary>Sets the shim of AmqpTcpEndpoint.GetHashCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.HostNameGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_HostName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.HostNameSetString">
            <summary>Sets the shim of AmqpTcpEndpoint.set_HostName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.ParseMultipleString">
            <summary>Sets the shim of AmqpTcpEndpoint.ParseMultiple(String addresses)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.ParseString">
            <summary>Sets the shim of AmqpTcpEndpoint.Parse(String address)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.PortGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_Port()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.PortSetInt32">
            <summary>Sets the shim of AmqpTcpEndpoint.set_Port(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.ProtocolGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.SslGet">
            <summary>Sets the shim of AmqpTcpEndpoint.get_Ssl()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.SslSetSslOption">
            <summary>Sets the shim of AmqpTcpEndpoint.set_Ssl(SslOption value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTcpEndpoint.ToString">
            <summary>Sets the shim of AmqpTcpEndpoint.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimAmqpTimestamp">
            <summary>Shim type of RabbitMQ.Client.AmqpTimestamp</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpTimestamp.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimAmqpTimestamp.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpTimestamp.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpTimestamp.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpTimestamp.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimAmqpVersion">
            <summary>Shim type of RabbitMQ.Client.AmqpVersion</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpVersion.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpVersion.#ctor(RabbitMQ.Client.AmqpVersion)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimAmqpVersion.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.AllInstances.EqualsObject">
            <summary>Sets the shim of AmqpVersion.Equals(Object other)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.AllInstances.GetHashCode01">
            <summary>Sets the shim of AmqpVersion.GetHashCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.AllInstances.MajorGet">
            <summary>Sets the shim of AmqpVersion.get_Major()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.AllInstances.MajorSetInt32">
            <summary>Sets the shim of AmqpVersion.set_Major(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.AllInstances.MinorGet">
            <summary>Sets the shim of AmqpVersion.get_Minor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.AllInstances.MinorSetInt32">
            <summary>Sets the shim of AmqpVersion.set_Minor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.AllInstances.ToString01">
            <summary>Sets the shim of AmqpVersion.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpVersion.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAmqpVersion.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.ConstructorInt32Int32">
            <summary>Sets the shim of AmqpVersion.AmqpVersion(Int32 major, Int32 minor)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.EqualsObject">
            <summary>Sets the shim of AmqpVersion.Equals(Object other)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.GetHashCode">
            <summary>Sets the shim of AmqpVersion.GetHashCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.MajorGet">
            <summary>Sets the shim of AmqpVersion.get_Major()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.MajorSetInt32">
            <summary>Sets the shim of AmqpVersion.set_Major(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.MinorGet">
            <summary>Sets the shim of AmqpVersion.get_Minor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.MinorSetInt32">
            <summary>Sets the shim of AmqpVersion.set_Minor(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAmqpVersion.ToString">
            <summary>Sets the shim of AmqpVersion.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer">
            <summary>Shim type of RabbitMQ.Client.AsyncDefaultBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.#ctor(RabbitMQ.Client.AsyncDefaultBasicConsumer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ConsumerCancelledAddAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.add_ConsumerCancelled(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ConsumerCancelledRabbitMQClientIBasicConsumeraddEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.add_ConsumerCancelled(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ConsumerCancelledRabbitMQClientIBasicConsumerremoveEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.remove_ConsumerCancelled(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ConsumerCancelledRemoveAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.remove_ConsumerCancelled(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ConsumerTagGet">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ConsumerTagSetString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.HandleBasicCancelOkString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.HandleBasicCancelString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.HandleBasicConsumeOkString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.IsRunningGet">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.get_IsRunning()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.IsRunningSetBoolean">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.set_IsRunning(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ModelGet">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ModelSetIModel">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.set_Model(IModel value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.OnCancel">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.RabbitMQClientIBasicConsumerHandleBasicCancelOkString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.RabbitMQClientIBasicConsumerHandleBasicCancelString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.RabbitMQClientIBasicConsumerHandleBasicConsumeOkString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.RabbitMQClientIBasicConsumerHandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.RabbitMQClientIBasicConsumerHandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ShutdownReasonGet">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.AllInstances.ShutdownReasonSetShutdownEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.set_ShutdownReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.Bind(RabbitMQ.Client.IAsyncBasicConsumer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.Bind(RabbitMQ.Client.IBasicConsumer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.Constructor">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.AsyncDefaultBasicConsumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ConstructorIModel">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.AsyncDefaultBasicConsumer(IModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ConsumerCancelledAddAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.add_ConsumerCancelled(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ConsumerCancelledRabbitMQClientIBasicConsumeraddEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.add_ConsumerCancelled(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ConsumerCancelledRabbitMQClientIBasicConsumerremoveEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.remove_ConsumerCancelled(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ConsumerCancelledRemoveAsyncEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.remove_ConsumerCancelled(AsyncEventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ConsumerTagGet">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ConsumerTagSetString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.HandleBasicCancelString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.IsRunningGet">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.get_IsRunning()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.IsRunningSetBoolean">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.set_IsRunning(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ModelGet">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ModelSetIModel">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.set_Model(IModel value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.OnCancel">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.RabbitMQClientIBasicConsumerHandleBasicCancelOkString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.RabbitMQClientIBasicConsumerHandleBasicCancelString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.RabbitMQClientIBasicConsumerHandleBasicConsumeOkString">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.RabbitMQClientIBasicConsumerHandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.RabbitMQClientIBasicConsumerHandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.RabbitMQ.Client.IBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ShutdownReasonGet">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimAsyncDefaultBasicConsumer.ShutdownReasonSetShutdownEventArgs">
            <summary>Sets the shim of AsyncDefaultBasicConsumer.set_ShutdownReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimBasicGetResult">
            <summary>Shim type of RabbitMQ.Client.BasicGetResult</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimBasicGetResult.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimBasicGetResult.#ctor(RabbitMQ.Client.BasicGetResult)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.BasicPropertiesGet">
            <summary>Sets the shim of BasicGetResult.get_BasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.BasicPropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicGetResult.set_BasicProperties(IBasicProperties value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.BodyGet">
            <summary>Sets the shim of BasicGetResult.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.BodySetByteArray">
            <summary>Sets the shim of BasicGetResult.set_Body(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.DeliveryTagGet">
            <summary>Sets the shim of BasicGetResult.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.DeliveryTagSetUInt64">
            <summary>Sets the shim of BasicGetResult.set_DeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.ExchangeGet">
            <summary>Sets the shim of BasicGetResult.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.ExchangeSetString">
            <summary>Sets the shim of BasicGetResult.set_Exchange(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.MessageCountGet">
            <summary>Sets the shim of BasicGetResult.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.MessageCountSetUInt32">
            <summary>Sets the shim of BasicGetResult.set_MessageCount(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.RedeliveredGet">
            <summary>Sets the shim of BasicGetResult.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.RedeliveredSetBoolean">
            <summary>Sets the shim of BasicGetResult.set_Redelivered(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.RoutingKeyGet">
            <summary>Sets the shim of BasicGetResult.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.AllInstances.RoutingKeySetString">
            <summary>Sets the shim of BasicGetResult.set_RoutingKey(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.BasicPropertiesGet">
            <summary>Sets the shim of BasicGetResult.get_BasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.BasicPropertiesSetIBasicProperties">
            <summary>Sets the shim of BasicGetResult.set_BasicProperties(IBasicProperties value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimBasicGetResult.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimBasicGetResult.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.BodyGet">
            <summary>Sets the shim of BasicGetResult.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.BodySetByteArray">
            <summary>Sets the shim of BasicGetResult.set_Body(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.ConstructorUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the shim of BasicGetResult.BasicGetResult(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.DeliveryTagGet">
            <summary>Sets the shim of BasicGetResult.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.DeliveryTagSetUInt64">
            <summary>Sets the shim of BasicGetResult.set_DeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.ExchangeGet">
            <summary>Sets the shim of BasicGetResult.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.ExchangeSetString">
            <summary>Sets the shim of BasicGetResult.set_Exchange(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.MessageCountGet">
            <summary>Sets the shim of BasicGetResult.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.MessageCountSetUInt32">
            <summary>Sets the shim of BasicGetResult.set_MessageCount(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.RedeliveredGet">
            <summary>Sets the shim of BasicGetResult.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.RedeliveredSetBoolean">
            <summary>Sets the shim of BasicGetResult.set_Redelivered(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.RoutingKeyGet">
            <summary>Sets the shim of BasicGetResult.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBasicGetResult.RoutingKeySetString">
            <summary>Sets the shim of BasicGetResult.set_RoutingKey(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimBinaryTableValue">
            <summary>Shim type of RabbitMQ.Client.BinaryTableValue</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimBinaryTableValue.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimBinaryTableValue.#ctor(RabbitMQ.Client.BinaryTableValue)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimBinaryTableValue.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBinaryTableValue.AllInstances.BytesGet">
            <summary>Sets the shim of BinaryTableValue.get_Bytes()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBinaryTableValue.AllInstances.BytesSetByteArray">
            <summary>Sets the shim of BinaryTableValue.set_Bytes(Byte[] value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimBinaryTableValue.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimBinaryTableValue.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBinaryTableValue.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBinaryTableValue.BytesGet">
            <summary>Sets the shim of BinaryTableValue.get_Bytes()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBinaryTableValue.BytesSetByteArray">
            <summary>Sets the shim of BinaryTableValue.set_Bytes(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBinaryTableValue.Constructor">
            <summary>Sets the shim of BinaryTableValue.BinaryTableValue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimBinaryTableValue.ConstructorByteArray">
            <summary>Sets the shim of BinaryTableValue.BinaryTableValue(Byte[] bytes)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimConnectionFactory">
            <summary>Shim type of RabbitMQ.Client.ConnectionFactory</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConnectionFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConnectionFactory.#ctor(RabbitMQ.Client.ConnectionFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.AuthMechanismFactoryIListOfString">
            <summary>Sets the shim of ConnectionFactory.AuthMechanismFactory(IList`1&lt;String&gt; mechanismNames)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.AuthMechanismsGet">
            <summary>Sets the shim of ConnectionFactory.get_AuthMechanisms()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.AuthMechanismsSetIListOfAuthMechanismFactory">
            <summary>Sets the shim of ConnectionFactory.set_AuthMechanisms(IList`1&lt;AuthMechanismFactory&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.AutomaticRecoveryEnabledGet">
            <summary>Sets the shim of ConnectionFactory.get_AutomaticRecoveryEnabled()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.AutomaticRecoveryEnabledSetBoolean">
            <summary>Sets the shim of ConnectionFactory.set_AutomaticRecoveryEnabled(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.ClientPropertiesGet">
            <summary>Sets the shim of ConnectionFactory.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.ClientPropertiesSetIDictionaryOfStringObject">
            <summary>Sets the shim of ConnectionFactory.set_ClientProperties(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.ConfigureFrameHandlerIFrameHandler">
            <summary>Sets the shim of ConnectionFactory.ConfigureFrameHandler(IFrameHandler fh)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.ContinuationTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_ContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.ContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of ConnectionFactory.set_ContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.CreateConnection">
            <summary>Sets the shim of ConnectionFactory.CreateConnection()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.CreateConnectionIEndpointResolverString">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(IEndpointResolver endpointResolver, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.CreateConnectionIListOfAmqpTcpEndpoint">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(IList`1&lt;AmqpTcpEndpoint&gt; endpoints)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.CreateConnectionIListOfString">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(IList`1&lt;String&gt; hostnames)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.CreateConnectionIListOfStringString">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(IList`1&lt;String&gt; hostnames, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.CreateConnectionString">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.CreateFrameHandler">
            <summary>Sets the shim of ConnectionFactory.CreateFrameHandler()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.CreateFrameHandlerAmqpTcpEndpoint">
            <summary>Sets the shim of ConnectionFactory.CreateFrameHandler(AmqpTcpEndpoint endpoint)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.CreateFrameHandlerForHostnameString">
            <summary>Sets the shim of ConnectionFactory.CreateFrameHandlerForHostname(String hostname)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.DispatchConsumersAsyncGet">
            <summary>Sets the shim of ConnectionFactory.get_DispatchConsumersAsync()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.DispatchConsumersAsyncSetBoolean">
            <summary>Sets the shim of ConnectionFactory.set_DispatchConsumersAsync(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.EndpointGet">
            <summary>Sets the shim of ConnectionFactory.get_Endpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.EndpointResolverFactoryGet">
            <summary>Sets the shim of ConnectionFactory.get_EndpointResolverFactory()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.EndpointResolverFactorySetFuncOfIEnumerableOfAmqpTcpEndpointIEndpointResolver">
            <summary>Sets the shim of ConnectionFactory.set_EndpointResolverFactory(Func`2&lt;IEnumerable`1&lt;AmqpTcpEndpoint&gt;,IEndpointResolver&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.EndpointSetAmqpTcpEndpoint">
            <summary>Sets the shim of ConnectionFactory.set_Endpoint(AmqpTcpEndpoint value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.HandshakeContinuationTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_HandshakeContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.HandshakeContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of ConnectionFactory.set_HandshakeContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.HostNameGet">
            <summary>Sets the shim of ConnectionFactory.get_HostName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.HostNameSetString">
            <summary>Sets the shim of ConnectionFactory.set_HostName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.LocalEndpoints">
            <summary>Sets the shim of ConnectionFactory.LocalEndpoints()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.NetworkRecoveryIntervalGet">
            <summary>Sets the shim of ConnectionFactory.get_NetworkRecoveryInterval()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.NetworkRecoveryIntervalSetTimeSpan">
            <summary>Sets the shim of ConnectionFactory.set_NetworkRecoveryInterval(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.PasswordGet">
            <summary>Sets the shim of ConnectionFactory.get_Password()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.PasswordSetString">
            <summary>Sets the shim of ConnectionFactory.set_Password(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.PortGet">
            <summary>Sets the shim of ConnectionFactory.get_Port()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.PortSetInt32">
            <summary>Sets the shim of ConnectionFactory.set_Port(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.ProtocolGet">
            <summary>Sets the shim of ConnectionFactory.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.ProtocolSetIProtocol">
            <summary>Sets the shim of ConnectionFactory.set_Protocol(IProtocol value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.RequestedChannelMaxGet">
            <summary>Sets the shim of ConnectionFactory.get_RequestedChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.RequestedChannelMaxSetUInt16">
            <summary>Sets the shim of ConnectionFactory.set_RequestedChannelMax(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.RequestedConnectionTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_RequestedConnectionTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.RequestedConnectionTimeoutSetInt32">
            <summary>Sets the shim of ConnectionFactory.set_RequestedConnectionTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.RequestedFrameMaxGet">
            <summary>Sets the shim of ConnectionFactory.get_RequestedFrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.RequestedFrameMaxSetUInt32">
            <summary>Sets the shim of ConnectionFactory.set_RequestedFrameMax(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.RequestedHeartbeatGet">
            <summary>Sets the shim of ConnectionFactory.get_RequestedHeartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.RequestedHeartbeatSetUInt16">
            <summary>Sets the shim of ConnectionFactory.set_RequestedHeartbeat(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.SetUriUri">
            <summary>Sets the shim of ConnectionFactory.SetUri(Uri uri)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.SocketReadTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_SocketReadTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.SocketReadTimeoutSetInt32">
            <summary>Sets the shim of ConnectionFactory.set_SocketReadTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.SocketWriteTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_SocketWriteTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.SocketWriteTimeoutSetInt32">
            <summary>Sets the shim of ConnectionFactory.set_SocketWriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.SslGet">
            <summary>Sets the shim of ConnectionFactory.get_Ssl()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.SslSetSslOption">
            <summary>Sets the shim of ConnectionFactory.set_Ssl(SslOption value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.TaskSchedulerGet">
            <summary>Sets the shim of ConnectionFactory.get_TaskScheduler()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.TaskSchedulerSetTaskScheduler">
            <summary>Sets the shim of ConnectionFactory.set_TaskScheduler(TaskScheduler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.TopologyRecoveryEnabledGet">
            <summary>Sets the shim of ConnectionFactory.get_TopologyRecoveryEnabled()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.TopologyRecoveryEnabledSetBoolean">
            <summary>Sets the shim of ConnectionFactory.set_TopologyRecoveryEnabled(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.UriGet">
            <summary>Sets the shim of ConnectionFactory.get_Uri()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.UriSetUri">
            <summary>Sets the shim of ConnectionFactory.set_Uri(Uri value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.UseBackgroundThreadsForIOGet">
            <summary>Sets the shim of ConnectionFactory.get_UseBackgroundThreadsForIO()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.UseBackgroundThreadsForIOSetBoolean">
            <summary>Sets the shim of ConnectionFactory.set_UseBackgroundThreadsForIO(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.UserNameGet">
            <summary>Sets the shim of ConnectionFactory.get_UserName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.UserNameSetString">
            <summary>Sets the shim of ConnectionFactory.set_UserName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.VirtualHostGet">
            <summary>Sets the shim of ConnectionFactory.get_VirtualHost()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances.VirtualHostSetString">
            <summary>Sets the shim of ConnectionFactory.set_VirtualHost(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AllInstances._CreateConnectionb__116_0String">
            <summary>Sets the shim of ConnectionFactory.&lt;CreateConnection&gt;b__116_0(String h)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AuthMechanismFactoryIListOfString">
            <summary>Sets the shim of ConnectionFactory.AuthMechanismFactory(IList`1&lt;String&gt; mechanismNames)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AuthMechanismsGet">
            <summary>Sets the shim of ConnectionFactory.get_AuthMechanisms()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AuthMechanismsSetIListOfAuthMechanismFactory">
            <summary>Sets the shim of ConnectionFactory.set_AuthMechanisms(IList`1&lt;AuthMechanismFactory&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AutomaticRecoveryEnabledGet">
            <summary>Sets the shim of ConnectionFactory.get_AutomaticRecoveryEnabled()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.AutomaticRecoveryEnabledSetBoolean">
            <summary>Sets the shim of ConnectionFactory.set_AutomaticRecoveryEnabled(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConnectionFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConnectionFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConnectionFactory.Bind(RabbitMQ.Client.IConnectionFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.ClientPropertiesGet">
            <summary>Sets the shim of ConnectionFactory.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.ClientPropertiesSetIDictionaryOfStringObject">
            <summary>Sets the shim of ConnectionFactory.set_ClientProperties(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.ConfigureFrameHandlerIFrameHandler">
            <summary>Sets the shim of ConnectionFactory.ConfigureFrameHandler(IFrameHandler fh)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.Constructor">
            <summary>Sets the shim of ConnectionFactory.ConnectionFactory()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.ContinuationTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_ContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.ContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of ConnectionFactory.set_ContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.CreateConnection">
            <summary>Sets the shim of ConnectionFactory.CreateConnection()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.CreateConnectionIEndpointResolverString">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(IEndpointResolver endpointResolver, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.CreateConnectionIListOfAmqpTcpEndpoint">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(IList`1&lt;AmqpTcpEndpoint&gt; endpoints)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.CreateConnectionIListOfString">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(IList`1&lt;String&gt; hostnames)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.CreateConnectionIListOfStringString">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(IList`1&lt;String&gt; hostnames, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.CreateConnectionString">
            <summary>Sets the shim of ConnectionFactory.CreateConnection(String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.CreateFrameHandler">
            <summary>Sets the shim of ConnectionFactory.CreateFrameHandler()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.CreateFrameHandlerAmqpTcpEndpoint">
            <summary>Sets the shim of ConnectionFactory.CreateFrameHandler(AmqpTcpEndpoint endpoint)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.CreateFrameHandlerForHostnameString">
            <summary>Sets the shim of ConnectionFactory.CreateFrameHandlerForHostname(String hostname)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.DispatchConsumersAsyncGet">
            <summary>Sets the shim of ConnectionFactory.get_DispatchConsumersAsync()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.DispatchConsumersAsyncSetBoolean">
            <summary>Sets the shim of ConnectionFactory.set_DispatchConsumersAsync(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.EndpointGet">
            <summary>Sets the shim of ConnectionFactory.get_Endpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.EndpointResolverFactoryGet">
            <summary>Sets the shim of ConnectionFactory.get_EndpointResolverFactory()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.EndpointResolverFactorySetFuncOfIEnumerableOfAmqpTcpEndpointIEndpointResolver">
            <summary>Sets the shim of ConnectionFactory.set_EndpointResolverFactory(Func`2&lt;IEnumerable`1&lt;AmqpTcpEndpoint&gt;,IEndpointResolver&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.EndpointSetAmqpTcpEndpoint">
            <summary>Sets the shim of ConnectionFactory.set_Endpoint(AmqpTcpEndpoint value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.HandshakeContinuationTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_HandshakeContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.HandshakeContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of ConnectionFactory.set_HandshakeContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.HostNameGet">
            <summary>Sets the shim of ConnectionFactory.get_HostName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.HostNameSetString">
            <summary>Sets the shim of ConnectionFactory.set_HostName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.LocalEndpoints">
            <summary>Sets the shim of ConnectionFactory.LocalEndpoints()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.NetworkRecoveryIntervalGet">
            <summary>Sets the shim of ConnectionFactory.get_NetworkRecoveryInterval()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.NetworkRecoveryIntervalSetTimeSpan">
            <summary>Sets the shim of ConnectionFactory.set_NetworkRecoveryInterval(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.PasswordGet">
            <summary>Sets the shim of ConnectionFactory.get_Password()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.PasswordSetString">
            <summary>Sets the shim of ConnectionFactory.set_Password(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.PortGet">
            <summary>Sets the shim of ConnectionFactory.get_Port()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.PortSetInt32">
            <summary>Sets the shim of ConnectionFactory.set_Port(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.ProtocolGet">
            <summary>Sets the shim of ConnectionFactory.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.ProtocolSetIProtocol">
            <summary>Sets the shim of ConnectionFactory.set_Protocol(IProtocol value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.RequestedChannelMaxGet">
            <summary>Sets the shim of ConnectionFactory.get_RequestedChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.RequestedChannelMaxSetUInt16">
            <summary>Sets the shim of ConnectionFactory.set_RequestedChannelMax(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.RequestedConnectionTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_RequestedConnectionTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.RequestedConnectionTimeoutSetInt32">
            <summary>Sets the shim of ConnectionFactory.set_RequestedConnectionTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.RequestedFrameMaxGet">
            <summary>Sets the shim of ConnectionFactory.get_RequestedFrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.RequestedFrameMaxSetUInt32">
            <summary>Sets the shim of ConnectionFactory.set_RequestedFrameMax(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.RequestedHeartbeatGet">
            <summary>Sets the shim of ConnectionFactory.get_RequestedHeartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.RequestedHeartbeatSetUInt16">
            <summary>Sets the shim of ConnectionFactory.set_RequestedHeartbeat(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.SetUriUri">
            <summary>Sets the shim of ConnectionFactory.SetUri(Uri uri)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.SocketReadTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_SocketReadTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.SocketReadTimeoutSetInt32">
            <summary>Sets the shim of ConnectionFactory.set_SocketReadTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.SocketWriteTimeoutGet">
            <summary>Sets the shim of ConnectionFactory.get_SocketWriteTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.SocketWriteTimeoutSetInt32">
            <summary>Sets the shim of ConnectionFactory.set_SocketWriteTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.SslGet">
            <summary>Sets the shim of ConnectionFactory.get_Ssl()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.SslSetSslOption">
            <summary>Sets the shim of ConnectionFactory.set_Ssl(SslOption value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.StaticConstructor">
            <summary>Sets the shim of ConnectionFactory.ConnectionFactory()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.TaskSchedulerGet">
            <summary>Sets the shim of ConnectionFactory.get_TaskScheduler()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.TaskSchedulerSetTaskScheduler">
            <summary>Sets the shim of ConnectionFactory.set_TaskScheduler(TaskScheduler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.TopologyRecoveryEnabledGet">
            <summary>Sets the shim of ConnectionFactory.get_TopologyRecoveryEnabled()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.TopologyRecoveryEnabledSetBoolean">
            <summary>Sets the shim of ConnectionFactory.set_TopologyRecoveryEnabled(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.UriDecodeString">
            <summary>Sets the shim of ConnectionFactory.UriDecode(String uri)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.UriGet">
            <summary>Sets the shim of ConnectionFactory.get_Uri()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.UriSetUri">
            <summary>Sets the shim of ConnectionFactory.set_Uri(Uri value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.UseBackgroundThreadsForIOGet">
            <summary>Sets the shim of ConnectionFactory.get_UseBackgroundThreadsForIO()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.UseBackgroundThreadsForIOSetBoolean">
            <summary>Sets the shim of ConnectionFactory.set_UseBackgroundThreadsForIO(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.UserNameGet">
            <summary>Sets the shim of ConnectionFactory.get_UserName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.UserNameSetString">
            <summary>Sets the shim of ConnectionFactory.set_UserName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.VirtualHostGet">
            <summary>Sets the shim of ConnectionFactory.get_VirtualHost()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory.VirtualHostSetString">
            <summary>Sets the shim of ConnectionFactory.set_VirtualHost(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactory._CreateConnectionb__116_0String">
            <summary>Sets the shim of ConnectionFactory.&lt;CreateConnection&gt;b__116_0(String h)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimConnectionFactoryBase">
            <summary>Shim type of RabbitMQ.Client.ConnectionFactoryBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConnectionFactoryBase.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConnectionFactoryBase.#ctor(RabbitMQ.Client.ConnectionFactoryBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimConnectionFactoryBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConnectionFactoryBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConnectionFactoryBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactoryBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactoryBase.Constructor">
            <summary>Sets the shim of ConnectionFactoryBase.ConnectionFactoryBase()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConnectionFactoryBase.DefaultSocketFactoryAddressFamily">
            <summary>Sets the shim of ConnectionFactoryBase.DefaultSocketFactory(AddressFamily addressFamily)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimConsumerWorkService">
            <summary>Shim type of RabbitMQ.Client.ConsumerWorkService</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConsumerWorkService.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConsumerWorkService.#ctor(RabbitMQ.Client.ConsumerWorkService)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConsumerWorkService.AddWorkIModelAction">
            <summary>Sets the shim of ConsumerWorkService.AddWork(IModel model, Action fn)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimConsumerWorkService.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConsumerWorkService.AllInstances.AddWorkIModelAction">
            <summary>Sets the shim of ConsumerWorkService.AddWork(IModel model, Action fn)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConsumerWorkService.AllInstances.StopWork">
            <summary>Sets the shim of ConsumerWorkService.StopWork()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConsumerWorkService.AllInstances.StopWorkIModel">
            <summary>Sets the shim of ConsumerWorkService.StopWork(IModel model)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConsumerWorkService.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimConsumerWorkService.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConsumerWorkService.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConsumerWorkService.Constructor">
            <summary>Sets the shim of ConsumerWorkService.ConsumerWorkService()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConsumerWorkService.StopWork">
            <summary>Sets the shim of ConsumerWorkService.StopWork()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimConsumerWorkService.StopWorkIModel">
            <summary>Sets the shim of ConsumerWorkService.StopWork(IModel model)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer">
            <summary>Shim type of RabbitMQ.Client.DefaultBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.#ctor(RabbitMQ.Client.DefaultBasicConsumer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.ConsumerCancelledAddEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of DefaultBasicConsumer.add_ConsumerCancelled(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.ConsumerCancelledRemoveEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of DefaultBasicConsumer.remove_ConsumerCancelled(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.ConsumerTagGet">
            <summary>Sets the shim of DefaultBasicConsumer.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.ConsumerTagSetString">
            <summary>Sets the shim of DefaultBasicConsumer.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.HandleBasicCancelOkString">
            <summary>Sets the shim of DefaultBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.HandleBasicCancelString">
            <summary>Sets the shim of DefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.HandleBasicConsumeOkString">
            <summary>Sets the shim of DefaultBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of DefaultBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of DefaultBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.IsRunningGet">
            <summary>Sets the shim of DefaultBasicConsumer.get_IsRunning()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.IsRunningSetBoolean">
            <summary>Sets the shim of DefaultBasicConsumer.set_IsRunning(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.ModelGet">
            <summary>Sets the shim of DefaultBasicConsumer.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.ModelSetIModel">
            <summary>Sets the shim of DefaultBasicConsumer.set_Model(IModel value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.OnCancel">
            <summary>Sets the shim of DefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.ShutdownReasonGet">
            <summary>Sets the shim of DefaultBasicConsumer.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.AllInstances.ShutdownReasonSetShutdownEventArgs">
            <summary>Sets the shim of DefaultBasicConsumer.set_ShutdownReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.Bind(RabbitMQ.Client.IBasicConsumer)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.Constructor">
            <summary>Sets the shim of DefaultBasicConsumer.DefaultBasicConsumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.ConstructorIModel">
            <summary>Sets the shim of DefaultBasicConsumer.DefaultBasicConsumer(IModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.ConsumerCancelledAddEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of DefaultBasicConsumer.add_ConsumerCancelled(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.ConsumerCancelledRemoveEventHandlerOfConsumerEventArgs">
            <summary>Sets the shim of DefaultBasicConsumer.remove_ConsumerCancelled(EventHandler`1&lt;ConsumerEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.ConsumerTagGet">
            <summary>Sets the shim of DefaultBasicConsumer.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.ConsumerTagSetString">
            <summary>Sets the shim of DefaultBasicConsumer.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the shim of DefaultBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.HandleBasicCancelString">
            <summary>Sets the shim of DefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the shim of DefaultBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of DefaultBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of DefaultBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.IsRunningGet">
            <summary>Sets the shim of DefaultBasicConsumer.get_IsRunning()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.IsRunningSetBoolean">
            <summary>Sets the shim of DefaultBasicConsumer.set_IsRunning(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.ModelGet">
            <summary>Sets the shim of DefaultBasicConsumer.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.ModelSetIModel">
            <summary>Sets the shim of DefaultBasicConsumer.set_Model(IModel value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.OnCancel">
            <summary>Sets the shim of DefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.ShutdownReasonGet">
            <summary>Sets the shim of DefaultBasicConsumer.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultBasicConsumer.ShutdownReasonSetShutdownEventArgs">
            <summary>Sets the shim of DefaultBasicConsumer.set_ShutdownReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver">
            <summary>Shim type of RabbitMQ.Client.DefaultEndpointResolver</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.#ctor(RabbitMQ.Client.DefaultEndpointResolver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.All">
            <summary>Sets the shim of DefaultEndpointResolver.All()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.AllInstances.All">
            <summary>Sets the shim of DefaultEndpointResolver.All()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.AllInstances._Allb__3_0AmqpTcpEndpoint">
            <summary>Sets the shim of DefaultEndpointResolver.&lt;All&gt;b__3_0(AmqpTcpEndpoint item)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.Bind(RabbitMQ.Client.IEndpointResolver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver.ConstructorIEnumerableOfAmqpTcpEndpoint">
            <summary>Sets the shim of DefaultEndpointResolver.DefaultEndpointResolver(IEnumerable`1&lt;AmqpTcpEndpoint&gt; tcpEndpoints)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimDefaultEndpointResolver._Allb__3_0AmqpTcpEndpoint">
            <summary>Sets the shim of DefaultEndpointResolver.&lt;All&gt;b__3_0(AmqpTcpEndpoint item)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimESLog">
            <summary>Shim type of RabbitMQ.Client.ESLog</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimESLog.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimESLog.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimESLog.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimESLog.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimESLog.ErrorStringException">
            <summary>Sets the shim of ESLog.Error(String message, Exception ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimESLog.ErrorStringExceptionObjectArray">
            <summary>Sets the shim of ESLog.Error(String message, Exception ex, Object[] args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimESLog.InfoString">
            <summary>Sets the shim of ESLog.Info(String message)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimESLog.InfoStringObjectArray">
            <summary>Sets the shim of ESLog.Info(String message, Object[] args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimESLog.WarnString">
            <summary>Sets the shim of ESLog.Warn(String message)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimESLog.WarnStringObjectArray">
            <summary>Sets the shim of ESLog.Warn(String message, Object[] args)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimEndpointResolverExtensions">
            <summary>Shim type of RabbitMQ.Client.EndpointResolverExtensions</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimEndpointResolverExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimEndpointResolverExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimEndpointResolverExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimEndpointResolverExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimEndpointResolverExtensions.SelectOneOf1IEndpointResolverFuncOfAmqpTcpEndpointM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{RabbitMQ.Client.IEndpointResolver,System.Func{RabbitMQ.Client.AmqpTcpEndpoint,``0},``0})">
            <summary>Sets the shim of EndpointResolverExtensions.SelectOne(IEndpointResolver resolver, Func`2&lt;AmqpTcpEndpoint,!!0&gt; selector)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimExchangeType">
            <summary>Shim type of RabbitMQ.Client.ExchangeType</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExchangeType.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExchangeType.All">
            <summary>Sets the shim of ExchangeType.All()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExchangeType.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExchangeType.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExchangeType.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExchangeType.StaticConstructor">
            <summary>Sets the shim of ExchangeType.ExchangeType()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimExternalMechanism">
            <summary>Shim type of RabbitMQ.Client.ExternalMechanism</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanism.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanism.#ctor(RabbitMQ.Client.ExternalMechanism)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimExternalMechanism.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanism.AllInstances.handleChallengeByteArrayIConnectionFactory">
            <summary>Sets the shim of ExternalMechanism.handleChallenge(Byte[] challenge, IConnectionFactory factory)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanism.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanism.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanism.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanism.Bind(RabbitMQ.Client.AuthMechanism)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanism.Constructor">
            <summary>Sets the shim of ExternalMechanism.ExternalMechanism()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanism.handleChallengeByteArrayIConnectionFactory">
            <summary>Sets the shim of ExternalMechanism.handleChallenge(Byte[] challenge, IConnectionFactory factory)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory">
            <summary>Shim type of RabbitMQ.Client.ExternalMechanismFactory</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.#ctor(RabbitMQ.Client.ExternalMechanismFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.AllInstances.GetInstance">
            <summary>Sets the shim of ExternalMechanismFactory.GetInstance()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.AllInstances.NameGet">
            <summary>Sets the shim of ExternalMechanismFactory.get_Name()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.Bind(RabbitMQ.Client.AuthMechanismFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.Constructor">
            <summary>Sets the shim of ExternalMechanismFactory.ExternalMechanismFactory()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.GetInstance">
            <summary>Sets the shim of ExternalMechanismFactory.GetInstance()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimExternalMechanismFactory.NameGet">
            <summary>Sets the shim of ExternalMechanismFactory.get_Name()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimHeaders">
            <summary>Shim type of RabbitMQ.Client.Headers</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimHeaders.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimHeaders.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimHeaders.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimHeaders.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimIModelExensions">
            <summary>Shim type of RabbitMQ.Client.IModelExensions</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimIModelExensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.BasicConsumeIModelIBasicConsumerStringBooleanStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of IModelExensions.BasicConsume(IModel model, IBasicConsumer consumer, String queue, Boolean autoAck, String consumerTag, Boolean noLocal, Boolean exclusive, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.BasicConsumeIModelStringBooleanIBasicConsumer">
            <summary>Sets the shim of IModelExensions.BasicConsume(IModel model, String queue, Boolean autoAck, IBasicConsumer consumer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.BasicConsumeIModelStringBooleanStringIBasicConsumer">
            <summary>Sets the shim of IModelExensions.BasicConsume(IModel model, String queue, Boolean autoAck, String consumerTag, IBasicConsumer consumer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.BasicConsumeIModelStringBooleanStringIDictionaryOfStringObjectIBasicConsumer">
            <summary>Sets the shim of IModelExensions.BasicConsume(IModel model, String queue, Boolean autoAck, String consumerTag, IDictionary`2&lt;String,Object&gt; arguments, IBasicConsumer consumer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.BasicPublishIModelPublicationAddressIBasicPropertiesByteArray">
            <summary>Sets the shim of IModelExensions.BasicPublish(IModel model, PublicationAddress addr, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.BasicPublishIModelStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of IModelExensions.BasicPublish(IModel model, String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.BasicPublishIModelStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of IModelExensions.BasicPublish(IModel model, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimIModelExensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimIModelExensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.ExchangeBindIModelStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of IModelExensions.ExchangeBind(IModel model, String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.ExchangeBindNoWaitIModelStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of IModelExensions.ExchangeBindNoWait(IModel model, String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.ExchangeDeclareIModelStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of IModelExensions.ExchangeDeclare(IModel model, String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.ExchangeDeclareNoWaitIModelStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of IModelExensions.ExchangeDeclareNoWait(IModel model, String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.ExchangeDeleteIModelStringBoolean">
            <summary>Sets the shim of IModelExensions.ExchangeDelete(IModel model, String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.ExchangeDeleteNoWaitIModelStringBoolean">
            <summary>Sets the shim of IModelExensions.ExchangeDeleteNoWait(IModel model, String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.ExchangeUnbindIModelStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of IModelExensions.ExchangeUnbind(IModel model, String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.QueueBindIModelStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of IModelExensions.QueueBind(IModel model, String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.QueueDeclareIModelStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of IModelExensions.QueueDeclare(IModel model, String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.QueueDeleteIModelStringBooleanBoolean">
            <summary>Sets the shim of IModelExensions.QueueDelete(IModel model, String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.QueueDeleteNoWaitIModelStringBooleanBoolean">
            <summary>Sets the shim of IModelExensions.QueueDeleteNoWait(IModel model, String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimIModelExensions.QueueUnbindIModelStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of IModelExensions.QueueUnbind(IModel model, String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimPlainMechanism">
            <summary>Shim type of RabbitMQ.Client.PlainMechanism</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanism.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanism.#ctor(RabbitMQ.Client.PlainMechanism)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimPlainMechanism.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanism.AllInstances.handleChallengeByteArrayIConnectionFactory">
            <summary>Sets the shim of PlainMechanism.handleChallenge(Byte[] challenge, IConnectionFactory factory)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanism.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanism.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanism.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanism.Bind(RabbitMQ.Client.AuthMechanism)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanism.Constructor">
            <summary>Sets the shim of PlainMechanism.PlainMechanism()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanism.handleChallengeByteArrayIConnectionFactory">
            <summary>Sets the shim of PlainMechanism.handleChallenge(Byte[] challenge, IConnectionFactory factory)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory">
            <summary>Shim type of RabbitMQ.Client.PlainMechanismFactory</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.#ctor(RabbitMQ.Client.PlainMechanismFactory)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.AllInstances.GetInstance">
            <summary>Sets the shim of PlainMechanismFactory.GetInstance()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.AllInstances.NameGet">
            <summary>Sets the shim of PlainMechanismFactory.get_Name()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.Bind(RabbitMQ.Client.AuthMechanismFactory)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.Constructor">
            <summary>Sets the shim of PlainMechanismFactory.PlainMechanismFactory()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.GetInstance">
            <summary>Sets the shim of PlainMechanismFactory.GetInstance()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPlainMechanismFactory.NameGet">
            <summary>Sets the shim of PlainMechanismFactory.get_Name()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimProtocolViolationException">
            <summary>Shim type of RabbitMQ.Client.ProtocolViolationException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimProtocolViolationException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimProtocolViolationException.#ctor(RabbitMQ.Client.ProtocolViolationException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimProtocolViolationException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimProtocolViolationException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimProtocolViolationException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimProtocolViolationException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimProtocolViolationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimProtocolViolationException.Constructor">
            <summary>Sets the shim of ProtocolViolationException.ProtocolViolationException()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimProtocolViolationException.ConstructorString">
            <summary>Sets the shim of ProtocolViolationException.ProtocolViolationException(String message)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimProtocolViolationException.ConstructorStringException">
            <summary>Sets the shim of ProtocolViolationException.ProtocolViolationException(String message, Exception inner)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimProtocols">
            <summary>Shim type of RabbitMQ.Client.Protocols</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimProtocols.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimProtocols.AMQP_0_9_1Get">
            <summary>Sets the shim of Protocols.get_AMQP_0_9_1()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimProtocols.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimProtocols.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimProtocols.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimProtocols.DefaultProtocolGet">
            <summary>Sets the shim of Protocols.get_DefaultProtocol()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimPublicationAddress">
            <summary>Shim type of RabbitMQ.Client.PublicationAddress</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPublicationAddress.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPublicationAddress.#ctor(RabbitMQ.Client.PublicationAddress)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimPublicationAddress.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.AllInstances.ExchangeNameGet">
            <summary>Sets the shim of PublicationAddress.get_ExchangeName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.AllInstances.ExchangeNameSetString">
            <summary>Sets the shim of PublicationAddress.set_ExchangeName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.AllInstances.ExchangeTypeGet">
            <summary>Sets the shim of PublicationAddress.get_ExchangeType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.AllInstances.ExchangeTypeSetString">
            <summary>Sets the shim of PublicationAddress.set_ExchangeType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.AllInstances.RoutingKeyGet">
            <summary>Sets the shim of PublicationAddress.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.AllInstances.RoutingKeySetString">
            <summary>Sets the shim of PublicationAddress.set_RoutingKey(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.AllInstances.ToString01">
            <summary>Sets the shim of PublicationAddress.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPublicationAddress.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimPublicationAddress.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.ConstructorStringStringString">
            <summary>Sets the shim of PublicationAddress.PublicationAddress(String exchangeType, String exchangeName, String routingKey)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.ExchangeNameGet">
            <summary>Sets the shim of PublicationAddress.get_ExchangeName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.ExchangeNameSetString">
            <summary>Sets the shim of PublicationAddress.set_ExchangeName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.ExchangeTypeGet">
            <summary>Sets the shim of PublicationAddress.get_ExchangeType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.ExchangeTypeSetString">
            <summary>Sets the shim of PublicationAddress.set_ExchangeType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.ParseString">
            <summary>Sets the shim of PublicationAddress.Parse(String uriLikeString)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.RoutingKeyGet">
            <summary>Sets the shim of PublicationAddress.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.RoutingKeySetString">
            <summary>Sets the shim of PublicationAddress.set_RoutingKey(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.StaticConstructor">
            <summary>Sets the shim of PublicationAddress.PublicationAddress()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimPublicationAddress.ToString">
            <summary>Sets the shim of PublicationAddress.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimQueueDeclareOk">
            <summary>Shim type of RabbitMQ.Client.QueueDeclareOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.#ctor(RabbitMQ.Client.QueueDeclareOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.AllInstances.ConsumerCountGet">
            <summary>Sets the shim of QueueDeclareOk.get_ConsumerCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.AllInstances.ConsumerCountSetUInt32">
            <summary>Sets the shim of QueueDeclareOk.set_ConsumerCount(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.AllInstances.MessageCountGet">
            <summary>Sets the shim of QueueDeclareOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.AllInstances.MessageCountSetUInt32">
            <summary>Sets the shim of QueueDeclareOk.set_MessageCount(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.AllInstances.QueueNameGet">
            <summary>Sets the shim of QueueDeclareOk.get_QueueName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.AllInstances.QueueNameSetString">
            <summary>Sets the shim of QueueDeclareOk.set_QueueName(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.ConstructorStringUInt32UInt32">
            <summary>Sets the shim of QueueDeclareOk.QueueDeclareOk(String queueName, UInt32 messageCount, UInt32 consumerCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.ConsumerCountGet">
            <summary>Sets the shim of QueueDeclareOk.get_ConsumerCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.ConsumerCountSetUInt32">
            <summary>Sets the shim of QueueDeclareOk.set_ConsumerCount(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.ImplicitOpQueueDeclareOkString">
            <summary>Sets the shim of QueueDeclareOk.op_Implicit(QueueDeclareOk declareOk)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.MessageCountGet">
            <summary>Sets the shim of QueueDeclareOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.MessageCountSetUInt32">
            <summary>Sets the shim of QueueDeclareOk.set_MessageCount(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.QueueNameGet">
            <summary>Sets the shim of QueueDeclareOk.get_QueueName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimQueueDeclareOk.QueueNameSetString">
            <summary>Sets the shim of QueueDeclareOk.set_QueueName(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimShutdownEventArgs">
            <summary>Shim type of RabbitMQ.Client.ShutdownEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.#ctor(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.CauseGet">
            <summary>Sets the shim of ShutdownEventArgs.get_Cause()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.CauseSetObject">
            <summary>Sets the shim of ShutdownEventArgs.set_Cause(Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.ClassIdGet">
            <summary>Sets the shim of ShutdownEventArgs.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.ClassIdSetUInt16">
            <summary>Sets the shim of ShutdownEventArgs.set_ClassId(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.InitiatorGet">
            <summary>Sets the shim of ShutdownEventArgs.get_Initiator()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.InitiatorSetShutdownInitiator">
            <summary>Sets the shim of ShutdownEventArgs.set_Initiator(ShutdownInitiator value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.MethodIdGet">
            <summary>Sets the shim of ShutdownEventArgs.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.MethodIdSetUInt16">
            <summary>Sets the shim of ShutdownEventArgs.set_MethodId(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.ReplyCodeGet">
            <summary>Sets the shim of ShutdownEventArgs.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.ReplyCodeSetUInt16">
            <summary>Sets the shim of ShutdownEventArgs.set_ReplyCode(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.ReplyTextGet">
            <summary>Sets the shim of ShutdownEventArgs.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.ReplyTextSetString">
            <summary>Sets the shim of ShutdownEventArgs.set_ReplyText(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.AllInstances.ToString01">
            <summary>Sets the shim of ShutdownEventArgs.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.CauseGet">
            <summary>Sets the shim of ShutdownEventArgs.get_Cause()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.CauseSetObject">
            <summary>Sets the shim of ShutdownEventArgs.set_Cause(Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.ClassIdGet">
            <summary>Sets the shim of ShutdownEventArgs.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.ClassIdSetUInt16">
            <summary>Sets the shim of ShutdownEventArgs.set_ClassId(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.ConstructorShutdownInitiatorUInt16StringObject">
            <summary>Sets the shim of ShutdownEventArgs.ShutdownEventArgs(ShutdownInitiator initiator, UInt16 replyCode, String replyText, Object cause)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.ConstructorShutdownInitiatorUInt16StringUInt16UInt16Object">
            <summary>Sets the shim of ShutdownEventArgs.ShutdownEventArgs(ShutdownInitiator initiator, UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId, Object cause)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.InitiatorGet">
            <summary>Sets the shim of ShutdownEventArgs.get_Initiator()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.InitiatorSetShutdownInitiator">
            <summary>Sets the shim of ShutdownEventArgs.set_Initiator(ShutdownInitiator value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.MethodIdGet">
            <summary>Sets the shim of ShutdownEventArgs.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.MethodIdSetUInt16">
            <summary>Sets the shim of ShutdownEventArgs.set_MethodId(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.ReplyCodeGet">
            <summary>Sets the shim of ShutdownEventArgs.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.ReplyCodeSetUInt16">
            <summary>Sets the shim of ShutdownEventArgs.set_ReplyCode(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.ReplyTextGet">
            <summary>Sets the shim of ShutdownEventArgs.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.ReplyTextSetString">
            <summary>Sets the shim of ShutdownEventArgs.set_ReplyText(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownEventArgs.ToString">
            <summary>Sets the shim of ShutdownEventArgs.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimShutdownReportEntry">
            <summary>Shim type of RabbitMQ.Client.ShutdownReportEntry</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.#ctor(RabbitMQ.Client.ShutdownReportEntry)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.AllInstances.DescriptionGet">
            <summary>Sets the shim of ShutdownReportEntry.get_Description()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.AllInstances.DescriptionSetString">
            <summary>Sets the shim of ShutdownReportEntry.set_Description(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.AllInstances.ExceptionGet">
            <summary>Sets the shim of ShutdownReportEntry.get_Exception()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.AllInstances.ExceptionSetException">
            <summary>Sets the shim of ShutdownReportEntry.set_Exception(Exception value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.AllInstances.ToString01">
            <summary>Sets the shim of ShutdownReportEntry.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.ConstructorStringException">
            <summary>Sets the shim of ShutdownReportEntry.ShutdownReportEntry(String description, Exception exception)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.DescriptionGet">
            <summary>Sets the shim of ShutdownReportEntry.get_Description()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.DescriptionSetString">
            <summary>Sets the shim of ShutdownReportEntry.set_Description(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.ExceptionGet">
            <summary>Sets the shim of ShutdownReportEntry.get_Exception()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.ExceptionSetException">
            <summary>Sets the shim of ShutdownReportEntry.set_Exception(Exception value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimShutdownReportEntry.ToString">
            <summary>Sets the shim of ShutdownReportEntry.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimSslHelper">
            <summary>Shim type of RabbitMQ.Client.SslHelper</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimSslHelper.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimSslHelper.#ctor(RabbitMQ.Client.SslHelper)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimSslHelper.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimSslHelper.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimSslHelper.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslHelper.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslHelper.ConstructorSslOption">
            <summary>Sets the shim of SslHelper.SslHelper(SslOption sslOption)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslHelper.TcpUpgradeStreamSslOption">
            <summary>Sets the shim of SslHelper.TcpUpgrade(Stream tcpStream, SslOption sslOption)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimSslOption">
            <summary>Shim type of RabbitMQ.Client.SslOption</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimSslOption.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimSslOption.#ctor(RabbitMQ.Client.SslOption)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AcceptablePolicyErrorsGet">
            <summary>Sets the shim of SslOption.get_AcceptablePolicyErrors()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AcceptablePolicyErrorsSetSslPolicyErrors">
            <summary>Sets the shim of SslOption.set_AcceptablePolicyErrors(SslPolicyErrors value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.AcceptablePolicyErrorsGet">
            <summary>Sets the shim of SslOption.get_AcceptablePolicyErrors()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.AcceptablePolicyErrorsSetSslPolicyErrors">
            <summary>Sets the shim of SslOption.set_AcceptablePolicyErrors(SslPolicyErrors value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertPassphraseGet">
            <summary>Sets the shim of SslOption.get_CertPassphrase()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertPassphraseSetString">
            <summary>Sets the shim of SslOption.set_CertPassphrase(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertPathGet">
            <summary>Sets the shim of SslOption.get_CertPath()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertPathSetString">
            <summary>Sets the shim of SslOption.set_CertPath(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertificateSelectionCallbackGet">
            <summary>Sets the shim of SslOption.get_CertificateSelectionCallback()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertificateSelectionCallbackSetLocalCertificateSelectionCallback">
            <summary>Sets the shim of SslOption.set_CertificateSelectionCallback(LocalCertificateSelectionCallback value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertificateValidationCallbackGet">
            <summary>Sets the shim of SslOption.get_CertificateValidationCallback()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertificateValidationCallbackSetRemoteCertificateValidationCallback">
            <summary>Sets the shim of SslOption.set_CertificateValidationCallback(RemoteCertificateValidationCallback value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertsGet">
            <summary>Sets the shim of SslOption.get_Certs()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.CertsSetX509CertificateCollection">
            <summary>Sets the shim of SslOption.set_Certs(X509CertificateCollection value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.EnabledGet">
            <summary>Sets the shim of SslOption.get_Enabled()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.EnabledSetBoolean">
            <summary>Sets the shim of SslOption.set_Enabled(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.ServerNameGet">
            <summary>Sets the shim of SslOption.get_ServerName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.ServerNameSetString">
            <summary>Sets the shim of SslOption.set_ServerName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.VersionGet">
            <summary>Sets the shim of SslOption.get_Version()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.AllInstances.VersionSetSslProtocols">
            <summary>Sets the shim of SslOption.set_Version(SslProtocols value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimSslOption.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimSslOption.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertPassphraseGet">
            <summary>Sets the shim of SslOption.get_CertPassphrase()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertPassphraseSetString">
            <summary>Sets the shim of SslOption.set_CertPassphrase(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertPathGet">
            <summary>Sets the shim of SslOption.get_CertPath()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertPathSetString">
            <summary>Sets the shim of SslOption.set_CertPath(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertificateSelectionCallbackGet">
            <summary>Sets the shim of SslOption.get_CertificateSelectionCallback()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertificateSelectionCallbackSetLocalCertificateSelectionCallback">
            <summary>Sets the shim of SslOption.set_CertificateSelectionCallback(LocalCertificateSelectionCallback value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertificateValidationCallbackGet">
            <summary>Sets the shim of SslOption.get_CertificateValidationCallback()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertificateValidationCallbackSetRemoteCertificateValidationCallback">
            <summary>Sets the shim of SslOption.set_CertificateValidationCallback(RemoteCertificateValidationCallback value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertsGet">
            <summary>Sets the shim of SslOption.get_Certs()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.CertsSetX509CertificateCollection">
            <summary>Sets the shim of SslOption.set_Certs(X509CertificateCollection value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.Constructor">
            <summary>Sets the shim of SslOption.SslOption()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.ConstructorStringStringBoolean">
            <summary>Sets the shim of SslOption.SslOption(String serverName, String certificatePath, Boolean enabled)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.EnabledGet">
            <summary>Sets the shim of SslOption.get_Enabled()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.EnabledSetBoolean">
            <summary>Sets the shim of SslOption.set_Enabled(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.ServerNameGet">
            <summary>Sets the shim of SslOption.get_ServerName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.ServerNameSetString">
            <summary>Sets the shim of SslOption.set_ServerName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.VersionGet">
            <summary>Sets the shim of SslOption.get_Version()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimSslOption.VersionSetSslProtocols">
            <summary>Sets the shim of SslOption.set_Version(SslProtocols value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimTcpClientAdapter">
            <summary>Shim type of RabbitMQ.Client.TcpClientAdapter</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.#ctor(RabbitMQ.Client.TcpClientAdapter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances.AssertSocket">
            <summary>Sets the shim of TcpClientAdapter.AssertSocket()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances.ClientGet">
            <summary>Sets the shim of TcpClientAdapter.get_Client()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances.Close">
            <summary>Sets the shim of TcpClientAdapter.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances.ConnectAsyncStringInt32">
            <summary>Sets the shim of TcpClientAdapter.ConnectAsync(String host, Int32 port)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances.ConnectedGet">
            <summary>Sets the shim of TcpClientAdapter.get_Connected()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances.Dispose">
            <summary>Sets the shim of TcpClientAdapter.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances.GetStream">
            <summary>Sets the shim of TcpClientAdapter.GetStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances.ReceiveTimeoutGet">
            <summary>Sets the shim of TcpClientAdapter.get_ReceiveTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances.ReceiveTimeoutSetInt32">
            <summary>Sets the shim of TcpClientAdapter.set_ReceiveTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AllInstances._ConnectAsyncb__2_0IPAddress">
            <summary>Sets the shim of TcpClientAdapter.&lt;ConnectAsync&gt;b__2_0(IPAddress a)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.AssertSocket">
            <summary>Sets the shim of TcpClientAdapter.AssertSocket()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.Bind(RabbitMQ.Client.ITcpClient)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.ClientGet">
            <summary>Sets the shim of TcpClientAdapter.get_Client()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.Close">
            <summary>Sets the shim of TcpClientAdapter.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.ConnectAsyncStringInt32">
            <summary>Sets the shim of TcpClientAdapter.ConnectAsync(String host, Int32 port)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.ConnectedGet">
            <summary>Sets the shim of TcpClientAdapter.get_Connected()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.ConstructorSocket">
            <summary>Sets the shim of TcpClientAdapter.TcpClientAdapter(Socket socket)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.Dispose">
            <summary>Sets the shim of TcpClientAdapter.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.GetStream">
            <summary>Sets the shim of TcpClientAdapter.GetStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.ReceiveTimeoutGet">
            <summary>Sets the shim of TcpClientAdapter.get_ReceiveTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter.ReceiveTimeoutSetInt32">
            <summary>Sets the shim of TcpClientAdapter.set_ReceiveTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTcpClientAdapter._ConnectAsyncb__2_0IPAddress">
            <summary>Sets the shim of TcpClientAdapter.&lt;ConnectAsync&gt;b__2_0(IPAddress a)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimTopologyRecoveryException">
            <summary>Shim type of RabbitMQ.Client.TopologyRecoveryException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTopologyRecoveryException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTopologyRecoveryException.#ctor(RabbitMQ.Client.TopologyRecoveryException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.ShimTopologyRecoveryException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTopologyRecoveryException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTopologyRecoveryException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTopologyRecoveryException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.ShimTopologyRecoveryException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.ShimTopologyRecoveryException.ConstructorStringException">
            <summary>Sets the shim of TopologyRecoveryException.TopologyRecoveryException(String message, Exception cause)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint">
            <summary>Stub type of RabbitMQ.Client.AmqpTcpEndpoint</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.#ctor(System.Uri)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.#ctor(System.Uri,RabbitMQ.Client.SslOption)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.#ctor(System.String,System.Int32,RabbitMQ.Client.SslOption)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.Equals(System.Object)">
            <summary>Sets the stub of AmqpTcpEndpoint.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.EqualsObject">
            <summary>Sets the stub of AmqpTcpEndpoint.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.GetHashCode">
            <summary>Sets the stub of AmqpTcpEndpoint.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.GetHashCode01">
            <summary>Sets the stub of AmqpTcpEndpoint.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpTcpEndpoint</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.ToString">
            <summary>Sets the stub of AmqpTcpEndpoint.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAmqpTcpEndpoint.ToString01">
            <summary>Sets the stub of AmqpTcpEndpoint.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubAmqpVersion">
            <summary>Stub type of RabbitMQ.Client.AmqpVersion</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpVersion.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAmqpVersion.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpVersion.Equals(System.Object)">
            <summary>Sets the stub of AmqpVersion.Equals(Object other)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAmqpVersion.EqualsObject">
            <summary>Sets the stub of AmqpVersion.Equals(Object other)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpVersion.GetHashCode">
            <summary>Sets the stub of AmqpVersion.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAmqpVersion.GetHashCode01">
            <summary>Sets the stub of AmqpVersion.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpVersion.InitializeStub">
            <summary>Initializes a new instance of type StubAmqpVersion</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAmqpVersion.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAmqpVersion.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAmqpVersion.ToString">
            <summary>Sets the stub of AmqpVersion.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAmqpVersion.ToString01">
            <summary>Sets the stub of AmqpVersion.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer">
            <summary>Stub type of RabbitMQ.Client.AsyncDefaultBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.#ctor(RabbitMQ.Client.IModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleBasicCancel(System.String)">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleBasicCancelOk(System.String)">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleBasicCancelString">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleBasicConsumeOk(System.String)">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleModelShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.InitializeStub">
            <summary>Initializes a new instance of type StubAsyncDefaultBasicConsumer</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.OnCancel">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAsyncDefaultBasicConsumer.OnCancel01">
            <summary>Sets the stub of AsyncDefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubAuthMechanism">
            <summary>Stub type of RabbitMQ.Client.AuthMechanism</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAuthMechanism.#ctor">
            <summary>Initializes a new instance of type StubAuthMechanism</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAuthMechanism.HandleChallengeByteArrayIConnectionFactory">
            <summary>Sets the stub of AuthMechanism.handleChallenge(Byte[] challenge, IConnectionFactory factory)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAuthMechanism.RabbitMQ#Client#AuthMechanism#handleChallenge(System.Byte[],RabbitMQ.Client.IConnectionFactory)">
            <summary>Sets the stub of AuthMechanism.handleChallenge(Byte[] challenge, IConnectionFactory factory)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubAuthMechanismFactory">
            <summary>Stub type of RabbitMQ.Client.AuthMechanismFactory</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAuthMechanismFactory.#ctor">
            <summary>Initializes a new instance of type StubAuthMechanismFactory</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAuthMechanismFactory.GetInstance">
            <summary>Sets the stub of AuthMechanismFactory.GetInstance()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubAuthMechanismFactory.RabbitMQ#Client#AuthMechanismFactory#Name">
            <summary>Sets the stub of AuthMechanismFactory.get_Name()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubAuthMechanismFactory.NameGet">
            <summary>Sets the stub of AuthMechanismFactory.get_Name()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubAuthMechanismFactory.RabbitMQ#Client#AuthMechanismFactory#GetInstance">
            <summary>Sets the stub of AuthMechanismFactory.GetInstance()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubBasicGetResult">
            <summary>Stub type of RabbitMQ.Client.BasicGetResult</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubBasicGetResult.#ctor(System.UInt64,System.Boolean,System.String,System.String,System.UInt32,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubBasicGetResult.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubBasicGetResult.InitializeStub">
            <summary>Initializes a new instance of type StubBasicGetResult</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubBasicGetResult.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubBasicGetResult.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubBinaryTableValue">
            <summary>Stub type of RabbitMQ.Client.BinaryTableValue</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubBinaryTableValue.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubBinaryTableValue.#ctor(System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubBinaryTableValue.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubBinaryTableValue.InitializeStub">
            <summary>Initializes a new instance of type StubBinaryTableValue</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubBinaryTableValue.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubBinaryTableValue.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubConnectionFactory">
            <summary>Stub type of RabbitMQ.Client.ConnectionFactory</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubConnectionFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubConnectionFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubConnectionFactory.CreateConnection">
            <summary>Sets the stub of ConnectionFactory.CreateConnection()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubConnectionFactory.CreateConnection01">
            <summary>Sets the stub of ConnectionFactory.CreateConnection()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubConnectionFactory.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionFactory</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubConnectionFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubConnectionFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubConnectionFactoryBase">
            <summary>Stub type of RabbitMQ.Client.ConnectionFactoryBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubConnectionFactoryBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubConnectionFactoryBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubConnectionFactoryBase.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionFactoryBase</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubConnectionFactoryBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubConnectionFactoryBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubConsumerWorkService">
            <summary>Stub type of RabbitMQ.Client.ConsumerWorkService</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubConsumerWorkService.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubConsumerWorkService.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubConsumerWorkService.InitializeStub">
            <summary>Initializes a new instance of type StubConsumerWorkService</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubConsumerWorkService.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubConsumerWorkService.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer">
            <summary>Stub type of RabbitMQ.Client.DefaultBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.#ctor(RabbitMQ.Client.IModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleBasicCancel(System.String)">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleBasicCancelOk(System.String)">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleBasicCancelString">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleBasicConsumeOk(System.String)">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of DefaultBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleModelShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of DefaultBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of DefaultBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultBasicConsumer</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.OnCancel">
            <summary>Sets the stub of DefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubDefaultBasicConsumer.OnCancel01">
            <summary>Sets the stub of DefaultBasicConsumer.OnCancel()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubDefaultEndpointResolver">
            <summary>Stub type of RabbitMQ.Client.DefaultEndpointResolver</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultEndpointResolver.#ctor(System.Collections.Generic.IEnumerable{RabbitMQ.Client.AmqpTcpEndpoint})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubDefaultEndpointResolver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubDefaultEndpointResolver.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultEndpointResolver</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubDefaultEndpointResolver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubDefaultEndpointResolver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubExternalMechanism">
            <summary>Stub type of RabbitMQ.Client.ExternalMechanism</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubExternalMechanism.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubExternalMechanism.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubExternalMechanism.InitializeStub">
            <summary>Initializes a new instance of type StubExternalMechanism</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubExternalMechanism.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubExternalMechanism.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubExternalMechanismFactory">
            <summary>Stub type of RabbitMQ.Client.ExternalMechanismFactory</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubExternalMechanismFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubExternalMechanismFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubExternalMechanismFactory.InitializeStub">
            <summary>Initializes a new instance of type StubExternalMechanismFactory</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubExternalMechanismFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubExternalMechanismFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer">
            <summary>Stub type of RabbitMQ.Client.IAsyncBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.#ctor">
            <summary>Initializes a new instance of type StubIAsyncBasicConsumer</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.HandleBasicCancelString">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.RabbitMQ#Client#IAsyncBasicConsumer#Model">
            <summary>Sets the stub of IAsyncBasicConsumer.get_Model()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.ModelGet">
            <summary>Sets the stub of IAsyncBasicConsumer.get_Model()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.RabbitMQ#Client#IAsyncBasicConsumer#HandleBasicCancel(System.String)">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.RabbitMQ#Client#IAsyncBasicConsumer#HandleBasicCancelOk(System.String)">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.RabbitMQ#Client#IAsyncBasicConsumer#HandleBasicConsumeOk(System.String)">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.RabbitMQ#Client#IAsyncBasicConsumer#HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIAsyncBasicConsumer.RabbitMQ#Client#IAsyncBasicConsumer#HandleModelShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of IAsyncBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIBasicConsumer">
            <summary>Stub type of RabbitMQ.Client.IBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicConsumer.#ctor">
            <summary>Initializes a new instance of type StubIBasicConsumer</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicConsumer.HandleBasicCancelOkString">
            <summary>Sets the stub of IBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicConsumer.HandleBasicCancelString">
            <summary>Sets the stub of IBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicConsumer.HandleBasicConsumeOkString">
            <summary>Sets the stub of IBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of IBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicConsumer.HandleModelShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of IBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicConsumer.RabbitMQ#Client#IBasicConsumer#Model">
            <summary>Sets the stub of IBasicConsumer.get_Model()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicConsumer.ModelGet">
            <summary>Sets the stub of IBasicConsumer.get_Model()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicConsumer.RabbitMQ#Client#IBasicConsumer#HandleBasicCancel(System.String)">
            <summary>Sets the stub of IBasicConsumer.HandleBasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicConsumer.RabbitMQ#Client#IBasicConsumer#HandleBasicCancelOk(System.String)">
            <summary>Sets the stub of IBasicConsumer.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicConsumer.RabbitMQ#Client#IBasicConsumer#HandleBasicConsumeOk(System.String)">
            <summary>Sets the stub of IBasicConsumer.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicConsumer.RabbitMQ#Client#IBasicConsumer#HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicConsumer.RabbitMQ#Client#IBasicConsumer#HandleModelShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of IBasicConsumer.HandleModelShutdown(Object model, ShutdownEventArgs reason)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIBasicProperties">
            <summary>Stub type of RabbitMQ.Client.IBasicProperties</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.#ctor">
            <summary>Initializes a new instance of type StubIBasicProperties</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#AppId">
            <summary>Sets the stub of IBasicProperties.get_AppId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.AppIdGet">
            <summary>Sets the stub of IBasicProperties.get_AppId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.AppIdSetString">
            <summary>Sets the stub of IBasicProperties.set_AppId(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToAppId">
            <summary>Attaches delegates to emulate StubIBasicProperties.AppId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToClusterId">
            <summary>Attaches delegates to emulate StubIBasicProperties.ClusterId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToContentEncoding">
            <summary>Attaches delegates to emulate StubIBasicProperties.ContentEncoding as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToContentType">
            <summary>Attaches delegates to emulate StubIBasicProperties.ContentType as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToCorrelationId">
            <summary>Attaches delegates to emulate StubIBasicProperties.CorrelationId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToDeliveryMode">
            <summary>Attaches delegates to emulate StubIBasicProperties.DeliveryMode as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToExpiration">
            <summary>Attaches delegates to emulate StubIBasicProperties.Expiration as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToHeaders">
            <summary>Attaches delegates to emulate StubIBasicProperties.Headers as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToMessageId">
            <summary>Attaches delegates to emulate StubIBasicProperties.MessageId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToPersistent">
            <summary>Attaches delegates to emulate StubIBasicProperties.Persistent as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToPriority">
            <summary>Attaches delegates to emulate StubIBasicProperties.Priority as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToReplyTo">
            <summary>Attaches delegates to emulate StubIBasicProperties.ReplyTo as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToReplyToAddress">
            <summary>Attaches delegates to emulate StubIBasicProperties.ReplyToAddress as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToTimestamp">
            <summary>Attaches delegates to emulate StubIBasicProperties.Timestamp as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToType">
            <summary>Attaches delegates to emulate StubIBasicProperties.Type as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.AttachBackingFieldToUserId">
            <summary>Attaches delegates to emulate StubIBasicProperties.UserId as a property with a backing field.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearAppId">
            <summary>Sets the stub of IBasicProperties.ClearAppId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearClusterId">
            <summary>Sets the stub of IBasicProperties.ClearClusterId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearContentEncoding">
            <summary>Sets the stub of IBasicProperties.ClearContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearContentType">
            <summary>Sets the stub of IBasicProperties.ClearContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearCorrelationId">
            <summary>Sets the stub of IBasicProperties.ClearCorrelationId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearDeliveryMode">
            <summary>Sets the stub of IBasicProperties.ClearDeliveryMode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearExpiration">
            <summary>Sets the stub of IBasicProperties.ClearExpiration()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearHeaders">
            <summary>Sets the stub of IBasicProperties.ClearHeaders()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearMessageId">
            <summary>Sets the stub of IBasicProperties.ClearMessageId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearPriority">
            <summary>Sets the stub of IBasicProperties.ClearPriority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearReplyTo">
            <summary>Sets the stub of IBasicProperties.ClearReplyTo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearTimestamp">
            <summary>Sets the stub of IBasicProperties.ClearTimestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearType">
            <summary>Sets the stub of IBasicProperties.ClearType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClearUserId">
            <summary>Sets the stub of IBasicProperties.ClearUserId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClusterId">
            <summary>Sets the stub of IBasicProperties.get_ClusterId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClusterIdGet">
            <summary>Sets the stub of IBasicProperties.get_ClusterId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ClusterIdSetString">
            <summary>Sets the stub of IBasicProperties.set_ClusterId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ContentEncoding">
            <summary>Sets the stub of IBasicProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ContentEncodingGet">
            <summary>Sets the stub of IBasicProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ContentEncodingSetString">
            <summary>Sets the stub of IBasicProperties.set_ContentEncoding(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ContentType">
            <summary>Sets the stub of IBasicProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ContentTypeGet">
            <summary>Sets the stub of IBasicProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ContentTypeSetString">
            <summary>Sets the stub of IBasicProperties.set_ContentType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#CorrelationId">
            <summary>Sets the stub of IBasicProperties.get_CorrelationId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.CorrelationIdGet">
            <summary>Sets the stub of IBasicProperties.get_CorrelationId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.CorrelationIdSetString">
            <summary>Sets the stub of IBasicProperties.set_CorrelationId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#DeliveryMode">
            <summary>Sets the stub of IBasicProperties.get_DeliveryMode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.DeliveryModeGet">
            <summary>Sets the stub of IBasicProperties.get_DeliveryMode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.DeliveryModeSetByte">
            <summary>Sets the stub of IBasicProperties.set_DeliveryMode(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#Expiration">
            <summary>Sets the stub of IBasicProperties.get_Expiration()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ExpirationGet">
            <summary>Sets the stub of IBasicProperties.get_Expiration()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ExpirationSetString">
            <summary>Sets the stub of IBasicProperties.set_Expiration(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#Headers">
            <summary>Sets the stub of IBasicProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.HeadersGet">
            <summary>Sets the stub of IBasicProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.HeadersSetIDictionaryOfStringObject">
            <summary>Sets the stub of IBasicProperties.set_Headers(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsAppIdPresent">
            <summary>Sets the stub of IBasicProperties.IsAppIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsClusterIdPresent">
            <summary>Sets the stub of IBasicProperties.IsClusterIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsContentEncodingPresent">
            <summary>Sets the stub of IBasicProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsContentTypePresent">
            <summary>Sets the stub of IBasicProperties.IsContentTypePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsCorrelationIdPresent">
            <summary>Sets the stub of IBasicProperties.IsCorrelationIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsDeliveryModePresent">
            <summary>Sets the stub of IBasicProperties.IsDeliveryModePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsExpirationPresent">
            <summary>Sets the stub of IBasicProperties.IsExpirationPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsHeadersPresent">
            <summary>Sets the stub of IBasicProperties.IsHeadersPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsMessageIdPresent">
            <summary>Sets the stub of IBasicProperties.IsMessageIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsPriorityPresent">
            <summary>Sets the stub of IBasicProperties.IsPriorityPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsReplyToPresent">
            <summary>Sets the stub of IBasicProperties.IsReplyToPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsTimestampPresent">
            <summary>Sets the stub of IBasicProperties.IsTimestampPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsTypePresent">
            <summary>Sets the stub of IBasicProperties.IsTypePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.IsUserIdPresent">
            <summary>Sets the stub of IBasicProperties.IsUserIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#MessageId">
            <summary>Sets the stub of IBasicProperties.get_MessageId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.MessageIdGet">
            <summary>Sets the stub of IBasicProperties.get_MessageId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.MessageIdSetString">
            <summary>Sets the stub of IBasicProperties.set_MessageId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#Persistent">
            <summary>Sets the stub of IBasicProperties.get_Persistent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.PersistentGet">
            <summary>Sets the stub of IBasicProperties.get_Persistent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.PersistentSetBoolean">
            <summary>Sets the stub of IBasicProperties.set_Persistent(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#Priority">
            <summary>Sets the stub of IBasicProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.PriorityGet">
            <summary>Sets the stub of IBasicProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.PrioritySetByte">
            <summary>Sets the stub of IBasicProperties.set_Priority(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IContentHeader#ProtocolClassId">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ProtocolClassIdGet">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IContentHeader#ProtocolClassName">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ProtocolClassNameGet">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearAppId">
            <summary>Sets the stub of IBasicProperties.ClearAppId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearClusterId">
            <summary>Sets the stub of IBasicProperties.ClearClusterId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearContentEncoding">
            <summary>Sets the stub of IBasicProperties.ClearContentEncoding()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearContentType">
            <summary>Sets the stub of IBasicProperties.ClearContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearCorrelationId">
            <summary>Sets the stub of IBasicProperties.ClearCorrelationId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearDeliveryMode">
            <summary>Sets the stub of IBasicProperties.ClearDeliveryMode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearExpiration">
            <summary>Sets the stub of IBasicProperties.ClearExpiration()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearHeaders">
            <summary>Sets the stub of IBasicProperties.ClearHeaders()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearMessageId">
            <summary>Sets the stub of IBasicProperties.ClearMessageId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearPriority">
            <summary>Sets the stub of IBasicProperties.ClearPriority()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearReplyTo">
            <summary>Sets the stub of IBasicProperties.ClearReplyTo()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearTimestamp">
            <summary>Sets the stub of IBasicProperties.ClearTimestamp()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearType">
            <summary>Sets the stub of IBasicProperties.ClearType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ClearUserId">
            <summary>Sets the stub of IBasicProperties.ClearUserId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsAppIdPresent">
            <summary>Sets the stub of IBasicProperties.IsAppIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsClusterIdPresent">
            <summary>Sets the stub of IBasicProperties.IsClusterIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsContentEncodingPresent">
            <summary>Sets the stub of IBasicProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsContentTypePresent">
            <summary>Sets the stub of IBasicProperties.IsContentTypePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsCorrelationIdPresent">
            <summary>Sets the stub of IBasicProperties.IsCorrelationIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsDeliveryModePresent">
            <summary>Sets the stub of IBasicProperties.IsDeliveryModePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsExpirationPresent">
            <summary>Sets the stub of IBasicProperties.IsExpirationPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsHeadersPresent">
            <summary>Sets the stub of IBasicProperties.IsHeadersPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsMessageIdPresent">
            <summary>Sets the stub of IBasicProperties.IsMessageIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsPriorityPresent">
            <summary>Sets the stub of IBasicProperties.IsPriorityPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsReplyToPresent">
            <summary>Sets the stub of IBasicProperties.IsReplyToPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsTimestampPresent">
            <summary>Sets the stub of IBasicProperties.IsTimestampPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsTypePresent">
            <summary>Sets the stub of IBasicProperties.IsTypePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#IsUserIdPresent">
            <summary>Sets the stub of IBasicProperties.IsUserIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#SetPersistent(System.Boolean)">
            <summary>Sets the stub of IBasicProperties.SetPersistent(Boolean persistent)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ReplyTo">
            <summary>Sets the stub of IBasicProperties.get_ReplyTo()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#ReplyToAddress">
            <summary>Sets the stub of IBasicProperties.get_ReplyToAddress()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ReplyToAddressGet">
            <summary>Sets the stub of IBasicProperties.get_ReplyToAddress()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ReplyToAddressSetPublicationAddress">
            <summary>Sets the stub of IBasicProperties.set_ReplyToAddress(PublicationAddress value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ReplyToGet">
            <summary>Sets the stub of IBasicProperties.get_ReplyTo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.ReplyToSetString">
            <summary>Sets the stub of IBasicProperties.set_ReplyTo(String value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.SetPersistentBoolean">
            <summary>Sets the stub of IBasicProperties.SetPersistent(Boolean persistent)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#Timestamp">
            <summary>Sets the stub of IBasicProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.TimestampGet">
            <summary>Sets the stub of IBasicProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.TimestampSetAmqpTimestamp">
            <summary>Sets the stub of IBasicProperties.set_Timestamp(AmqpTimestamp value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#Type">
            <summary>Sets the stub of IBasicProperties.get_Type()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.TypeGet">
            <summary>Sets the stub of IBasicProperties.get_Type()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.TypeSetString">
            <summary>Sets the stub of IBasicProperties.set_Type(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIBasicProperties.RabbitMQ#Client#IBasicProperties#UserId">
            <summary>Sets the stub of IBasicProperties.get_UserId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.UserIdGet">
            <summary>Sets the stub of IBasicProperties.get_UserId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIBasicProperties.UserIdSetString">
            <summary>Sets the stub of IBasicProperties.set_UserId(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIConnection">
            <summary>Stub type of RabbitMQ.Client.IConnection</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.#ctor">
            <summary>Initializes a new instance of type StubIConnection</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.Abort">
            <summary>Sets the stub of IConnection.Abort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.AbortInt32">
            <summary>Sets the stub of IConnection.Abort(Int32 timeout)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.AbortUInt16String">
            <summary>Sets the stub of IConnection.Abort(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.AbortUInt16StringInt32">
            <summary>Sets the stub of IConnection.Abort(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.AttachBackingFieldToAutoClose">
            <summary>Attaches delegates to emulate StubIConnection.AutoClose as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#AutoClose">
            <summary>Sets the stub of IConnection.get_AutoClose()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.AutoCloseGet">
            <summary>Sets the stub of IConnection.get_AutoClose()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.AutoCloseSetBoolean">
            <summary>Sets the stub of IConnection.set_AutoClose(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#ChannelMax">
            <summary>Sets the stub of IConnection.get_ChannelMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.ChannelMaxGet">
            <summary>Sets the stub of IConnection.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#ClientProperties">
            <summary>Sets the stub of IConnection.get_ClientProperties()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.ClientPropertiesGet">
            <summary>Sets the stub of IConnection.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#ClientProvidedName">
            <summary>Sets the stub of IConnection.get_ClientProvidedName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.ClientProvidedNameGet">
            <summary>Sets the stub of IConnection.get_ClientProvidedName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.Close">
            <summary>Sets the stub of IConnection.Close()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.CloseInt32">
            <summary>Sets the stub of IConnection.Close(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#CloseReason">
            <summary>Sets the stub of IConnection.get_CloseReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.CloseReasonGet">
            <summary>Sets the stub of IConnection.get_CloseReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.CloseUInt16String">
            <summary>Sets the stub of IConnection.Close(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.CloseUInt16StringInt32">
            <summary>Sets the stub of IConnection.Close(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#ConsumerWorkService">
            <summary>Sets the stub of IConnection.get_ConsumerWorkService()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.ConsumerWorkServiceGet">
            <summary>Sets the stub of IConnection.get_ConsumerWorkService()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.CreateModel">
            <summary>Sets the stub of IConnection.CreateModel()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Endpoint">
            <summary>Sets the stub of IConnection.get_Endpoint()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.EndpointGet">
            <summary>Sets the stub of IConnection.get_Endpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#FrameMax">
            <summary>Sets the stub of IConnection.get_FrameMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.FrameMaxGet">
            <summary>Sets the stub of IConnection.get_FrameMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.HandleConnectionBlockedString">
            <summary>Sets the stub of IConnection.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.HandleConnectionUnblocked">
            <summary>Sets the stub of IConnection.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Heartbeat">
            <summary>Sets the stub of IConnection.get_Heartbeat()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.HeartbeatGet">
            <summary>Sets the stub of IConnection.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#IsOpen">
            <summary>Sets the stub of IConnection.get_IsOpen()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.IsOpenGet">
            <summary>Sets the stub of IConnection.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#KnownHosts">
            <summary>Sets the stub of IConnection.get_KnownHosts()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.KnownHostsGet">
            <summary>Sets the stub of IConnection.get_KnownHosts()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#NetworkConnection#LocalPort">
            <summary>Sets the stub of NetworkConnection.get_LocalPort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.LocalPortGet">
            <summary>Sets the stub of NetworkConnection.get_LocalPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Protocol">
            <summary>Sets the stub of IConnection.get_Protocol()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.ProtocolGet">
            <summary>Sets the stub of IConnection.get_Protocol()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Abort">
            <summary>Sets the stub of IConnection.Abort()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Abort(System.Int32)">
            <summary>Sets the stub of IConnection.Abort(Int32 timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Abort(System.UInt16,System.String)">
            <summary>Sets the stub of IConnection.Abort(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Abort(System.UInt16,System.String,System.Int32)">
            <summary>Sets the stub of IConnection.Abort(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Close">
            <summary>Sets the stub of IConnection.Close()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Close(System.Int32)">
            <summary>Sets the stub of IConnection.Close(Int32 timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Close(System.UInt16,System.String)">
            <summary>Sets the stub of IConnection.Close(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#Close(System.UInt16,System.String,System.Int32)">
            <summary>Sets the stub of IConnection.Close(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#CreateModel">
            <summary>Sets the stub of IConnection.CreateModel()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#HandleConnectionBlocked(System.String)">
            <summary>Sets the stub of IConnection.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#HandleConnectionUnblocked">
            <summary>Sets the stub of IConnection.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#NetworkConnection#RemotePort">
            <summary>Sets the stub of NetworkConnection.get_RemotePort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.RemotePortGet">
            <summary>Sets the stub of NetworkConnection.get_RemotePort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#ServerProperties">
            <summary>Sets the stub of IConnection.get_ServerProperties()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.ServerPropertiesGet">
            <summary>Sets the stub of IConnection.get_ServerProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnection.RabbitMQ#Client#IConnection#ShutdownReport">
            <summary>Sets the stub of IConnection.get_ShutdownReport()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnection.ShutdownReportGet">
            <summary>Sets the stub of IConnection.get_ShutdownReport()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnection.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIConnectionFactory">
            <summary>Stub type of RabbitMQ.Client.IConnectionFactory</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.#ctor">
            <summary>Initializes a new instance of type StubIConnectionFactory</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToClientProperties">
            <summary>Attaches delegates to emulate StubIConnectionFactory.ClientProperties as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToContinuationTimeout">
            <summary>Attaches delegates to emulate StubIConnectionFactory.ContinuationTimeout as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToHandshakeContinuationTimeout">
            <summary>Attaches delegates to emulate StubIConnectionFactory.HandshakeContinuationTimeout as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToPassword">
            <summary>Attaches delegates to emulate StubIConnectionFactory.Password as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToRequestedChannelMax">
            <summary>Attaches delegates to emulate StubIConnectionFactory.RequestedChannelMax as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToRequestedFrameMax">
            <summary>Attaches delegates to emulate StubIConnectionFactory.RequestedFrameMax as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToRequestedHeartbeat">
            <summary>Attaches delegates to emulate StubIConnectionFactory.RequestedHeartbeat as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToTaskScheduler">
            <summary>Attaches delegates to emulate StubIConnectionFactory.TaskScheduler as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToUri">
            <summary>Attaches delegates to emulate StubIConnectionFactory.Uri as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToUseBackgroundThreadsForIO">
            <summary>Attaches delegates to emulate StubIConnectionFactory.UseBackgroundThreadsForIO as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToUserName">
            <summary>Attaches delegates to emulate StubIConnectionFactory.UserName as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.AttachBackingFieldToVirtualHost">
            <summary>Attaches delegates to emulate StubIConnectionFactory.VirtualHost as a property with a backing field.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.AuthMechanismFactoryIListOfString">
            <summary>Sets the stub of IConnectionFactory.AuthMechanismFactory(IList`1&lt;String&gt; mechanismNames)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#ClientProperties">
            <summary>Sets the stub of IConnectionFactory.get_ClientProperties()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.ClientPropertiesGet">
            <summary>Sets the stub of IConnectionFactory.get_ClientProperties()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.ClientPropertiesSetIDictionaryOfStringObject">
            <summary>Sets the stub of IConnectionFactory.set_ClientProperties(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#ContinuationTimeout">
            <summary>Sets the stub of IConnectionFactory.get_ContinuationTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.ContinuationTimeoutGet">
            <summary>Sets the stub of IConnectionFactory.get_ContinuationTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.ContinuationTimeoutSetTimeSpan">
            <summary>Sets the stub of IConnectionFactory.set_ContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.CreateConnection">
            <summary>Sets the stub of IConnectionFactory.CreateConnection()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.CreateConnectionIListOfAmqpTcpEndpoint">
            <summary>Sets the stub of IConnectionFactory.CreateConnection(IList`1&lt;AmqpTcpEndpoint&gt; endpoints)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.CreateConnectionIListOfString">
            <summary>Sets the stub of IConnectionFactory.CreateConnection(IList`1&lt;String&gt; hostnames)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.CreateConnectionIListOfStringString">
            <summary>Sets the stub of IConnectionFactory.CreateConnection(IList`1&lt;String&gt; hostnames, String clientProvidedName)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.CreateConnectionString">
            <summary>Sets the stub of IConnectionFactory.CreateConnection(String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#HandshakeContinuationTimeout">
            <summary>Sets the stub of IConnectionFactory.get_HandshakeContinuationTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.HandshakeContinuationTimeoutGet">
            <summary>Sets the stub of IConnectionFactory.get_HandshakeContinuationTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.HandshakeContinuationTimeoutSetTimeSpan">
            <summary>Sets the stub of IConnectionFactory.set_HandshakeContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#Password">
            <summary>Sets the stub of IConnectionFactory.get_Password()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.PasswordGet">
            <summary>Sets the stub of IConnectionFactory.get_Password()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.PasswordSetString">
            <summary>Sets the stub of IConnectionFactory.set_Password(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#AuthMechanismFactory(System.Collections.Generic.IList{System.String})">
            <summary>Sets the stub of IConnectionFactory.AuthMechanismFactory(IList`1&lt;String&gt; mechanismNames)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#CreateConnection">
            <summary>Sets the stub of IConnectionFactory.CreateConnection()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#CreateConnection(System.String)">
            <summary>Sets the stub of IConnectionFactory.CreateConnection(String clientProvidedName)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#CreateConnection(System.Collections.Generic.IList{RabbitMQ.Client.AmqpTcpEndpoint})">
            <summary>Sets the stub of IConnectionFactory.CreateConnection(IList`1&lt;AmqpTcpEndpoint&gt; endpoints)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#CreateConnection(System.Collections.Generic.IList{System.String})">
            <summary>Sets the stub of IConnectionFactory.CreateConnection(IList`1&lt;String&gt; hostnames)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#CreateConnection(System.Collections.Generic.IList{System.String},System.String)">
            <summary>Sets the stub of IConnectionFactory.CreateConnection(IList`1&lt;String&gt; hostnames, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#RequestedChannelMax">
            <summary>Sets the stub of IConnectionFactory.get_RequestedChannelMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.RequestedChannelMaxGet">
            <summary>Sets the stub of IConnectionFactory.get_RequestedChannelMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.RequestedChannelMaxSetUInt16">
            <summary>Sets the stub of IConnectionFactory.set_RequestedChannelMax(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#RequestedFrameMax">
            <summary>Sets the stub of IConnectionFactory.get_RequestedFrameMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.RequestedFrameMaxGet">
            <summary>Sets the stub of IConnectionFactory.get_RequestedFrameMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.RequestedFrameMaxSetUInt32">
            <summary>Sets the stub of IConnectionFactory.set_RequestedFrameMax(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#RequestedHeartbeat">
            <summary>Sets the stub of IConnectionFactory.get_RequestedHeartbeat()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.RequestedHeartbeatGet">
            <summary>Sets the stub of IConnectionFactory.get_RequestedHeartbeat()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.RequestedHeartbeatSetUInt16">
            <summary>Sets the stub of IConnectionFactory.set_RequestedHeartbeat(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#TaskScheduler">
            <summary>Sets the stub of IConnectionFactory.get_TaskScheduler()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.TaskSchedulerGet">
            <summary>Sets the stub of IConnectionFactory.get_TaskScheduler()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.TaskSchedulerSetTaskScheduler">
            <summary>Sets the stub of IConnectionFactory.set_TaskScheduler(TaskScheduler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#Uri">
            <summary>Sets the stub of IConnectionFactory.get_Uri()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.UriGet">
            <summary>Sets the stub of IConnectionFactory.get_Uri()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.UriSetUri">
            <summary>Sets the stub of IConnectionFactory.set_Uri(Uri value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#UseBackgroundThreadsForIO">
            <summary>Sets the stub of IConnectionFactory.get_UseBackgroundThreadsForIO()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.UseBackgroundThreadsForIOGet">
            <summary>Sets the stub of IConnectionFactory.get_UseBackgroundThreadsForIO()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.UseBackgroundThreadsForIOSetBoolean">
            <summary>Sets the stub of IConnectionFactory.set_UseBackgroundThreadsForIO(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#UserName">
            <summary>Sets the stub of IConnectionFactory.get_UserName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.UserNameGet">
            <summary>Sets the stub of IConnectionFactory.get_UserName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.UserNameSetString">
            <summary>Sets the stub of IConnectionFactory.set_UserName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIConnectionFactory.RabbitMQ#Client#IConnectionFactory#VirtualHost">
            <summary>Sets the stub of IConnectionFactory.get_VirtualHost()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.VirtualHostGet">
            <summary>Sets the stub of IConnectionFactory.get_VirtualHost()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIConnectionFactory.VirtualHostSetString">
            <summary>Sets the stub of IConnectionFactory.set_VirtualHost(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIContentHeader">
            <summary>Stub type of RabbitMQ.Client.IContentHeader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIContentHeader.#ctor">
            <summary>Initializes a new instance of type StubIContentHeader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIContentHeader.RabbitMQ#Client#IContentHeader#ProtocolClassId">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIContentHeader.ProtocolClassIdGet">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIContentHeader.RabbitMQ#Client#IContentHeader#ProtocolClassName">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIContentHeader.ProtocolClassNameGet">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIEndpointResolver">
            <summary>Stub type of RabbitMQ.Client.IEndpointResolver</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIEndpointResolver.#ctor">
            <summary>Initializes a new instance of type StubIEndpointResolver</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIEndpointResolver.All">
            <summary>Sets the stub of IEndpointResolver.All()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIEndpointResolver.RabbitMQ#Client#IEndpointResolver#All">
            <summary>Sets the stub of IEndpointResolver.All()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIMethod">
            <summary>Stub type of RabbitMQ.Client.IMethod</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIMethod.#ctor">
            <summary>Initializes a new instance of type StubIMethod</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIMethod.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIMethod.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIMethod.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIMethod.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIMethod.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIMethod.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIModel">
            <summary>Stub type of RabbitMQ.Client.IModel</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.#ctor">
            <summary>Initializes a new instance of type StubIModel</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.Abort">
            <summary>Sets the stub of IModel.Abort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.AbortUInt16String">
            <summary>Sets the stub of IModel.Abort(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.AttachBackingFieldToContinuationTimeout">
            <summary>Attaches delegates to emulate StubIModel.ContinuationTimeout as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.AttachBackingFieldToDefaultConsumer">
            <summary>Attaches delegates to emulate StubIModel.DefaultConsumer as a property with a backing field.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicAckUInt64Boolean">
            <summary>Sets the stub of IModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicCancelString">
            <summary>Sets the stub of IModel.BasicCancel(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicConsumeStringBooleanStringBooleanBooleanIDictionaryOfStringObjectIBasicConsumer">
            <summary>Sets the stub of IModel.BasicConsume(String queue, Boolean autoAck, String consumerTag, Boolean noLocal, Boolean exclusive, IDictionary`2&lt;String,Object&gt; arguments, IBasicConsumer consumer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicGetStringBoolean">
            <summary>Sets the stub of IModel.BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicNackUInt64BooleanBoolean">
            <summary>Sets the stub of IModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the stub of IModel.BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicQosUInt32UInt16Boolean">
            <summary>Sets the stub of IModel.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicRecoverAsyncBoolean">
            <summary>Sets the stub of IModel.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicRecoverBoolean">
            <summary>Sets the stub of IModel.BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.BasicRejectUInt64Boolean">
            <summary>Sets the stub of IModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ChannelNumber">
            <summary>Sets the stub of IModel.get_ChannelNumber()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ChannelNumberGet">
            <summary>Sets the stub of IModel.get_ChannelNumber()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.Close">
            <summary>Sets the stub of IModel.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#CloseReason">
            <summary>Sets the stub of IModel.get_CloseReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.CloseReasonGet">
            <summary>Sets the stub of IModel.get_CloseReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.CloseUInt16String">
            <summary>Sets the stub of IModel.Close(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ConfirmSelect">
            <summary>Sets the stub of IModel.ConfirmSelect()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ConsumerCountString">
            <summary>Sets the stub of IModel.ConsumerCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ContinuationTimeout">
            <summary>Sets the stub of IModel.get_ContinuationTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ContinuationTimeoutGet">
            <summary>Sets the stub of IModel.get_ContinuationTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ContinuationTimeoutSetTimeSpan">
            <summary>Sets the stub of IModel.set_ContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.CreateBasicProperties">
            <summary>Sets the stub of IModel.CreateBasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#DefaultConsumer">
            <summary>Sets the stub of IModel.get_DefaultConsumer()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.DefaultConsumerGet">
            <summary>Sets the stub of IModel.get_DefaultConsumer()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.DefaultConsumerSetIBasicConsumer">
            <summary>Sets the stub of IModel.set_DefaultConsumer(IBasicConsumer value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ExchangeBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeBindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ExchangeBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeBind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ExchangeDeclareNoWaitStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeDeclareNoWait(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ExchangeDeclarePassiveString">
            <summary>Sets the stub of IModel.ExchangeDeclarePassive(String exchange)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ExchangeDeclareStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeDeclare(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ExchangeDeleteNoWaitStringBoolean">
            <summary>Sets the stub of IModel.ExchangeDeleteNoWait(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ExchangeDeleteStringBoolean">
            <summary>Sets the stub of IModel.ExchangeDelete(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ExchangeUnbindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeUnbindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.ExchangeUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeUnbind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#IsClosed">
            <summary>Sets the stub of IModel.get_IsClosed()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.IsClosedGet">
            <summary>Sets the stub of IModel.get_IsClosed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#IsOpen">
            <summary>Sets the stub of IModel.get_IsOpen()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.IsOpenGet">
            <summary>Sets the stub of IModel.get_IsOpen()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.MessageCountString">
            <summary>Sets the stub of IModel.MessageCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#NextPublishSeqNo">
            <summary>Sets the stub of IModel.get_NextPublishSeqNo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.NextPublishSeqNoGet">
            <summary>Sets the stub of IModel.get_NextPublishSeqNo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.QueueBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueBindNoWait(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.QueueBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueBind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.QueueDeclareNoWaitStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueDeclareNoWait(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.QueueDeclarePassiveString">
            <summary>Sets the stub of IModel.QueueDeclarePassive(String queue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.QueueDeclareStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueDeclare(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.QueueDeleteNoWaitStringBooleanBoolean">
            <summary>Sets the stub of IModel.QueueDeleteNoWait(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.QueueDeleteStringBooleanBoolean">
            <summary>Sets the stub of IModel.QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.QueuePurgeString">
            <summary>Sets the stub of IModel.QueuePurge(String queue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.QueueUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#Abort">
            <summary>Sets the stub of IModel.Abort()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#Abort(System.UInt16,System.String)">
            <summary>Sets the stub of IModel.Abort(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicAck(System.UInt64,System.Boolean)">
            <summary>Sets the stub of IModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicCancel(System.String)">
            <summary>Sets the stub of IModel.BasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicConsume(System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},RabbitMQ.Client.IBasicConsumer)">
            <summary>Sets the stub of IModel.BasicConsume(String queue, Boolean autoAck, String consumerTag, Boolean noLocal, Boolean exclusive, IDictionary`2&lt;String,Object&gt; arguments, IBasicConsumer consumer)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicGet(System.String,System.Boolean)">
            <summary>Sets the stub of IModel.BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicNack(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Sets the stub of IModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicPublish(System.String,System.String,System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IModel.BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicQos(System.UInt32,System.UInt16,System.Boolean)">
            <summary>Sets the stub of IModel.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicRecover(System.Boolean)">
            <summary>Sets the stub of IModel.BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicRecoverAsync(System.Boolean)">
            <summary>Sets the stub of IModel.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#BasicReject(System.UInt64,System.Boolean)">
            <summary>Sets the stub of IModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#Close">
            <summary>Sets the stub of IModel.Close()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#Close(System.UInt16,System.String)">
            <summary>Sets the stub of IModel.Close(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ConfirmSelect">
            <summary>Sets the stub of IModel.ConfirmSelect()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ConsumerCount(System.String)">
            <summary>Sets the stub of IModel.ConsumerCount(String queue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#CreateBasicProperties">
            <summary>Sets the stub of IModel.CreateBasicProperties()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ExchangeBind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeBind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ExchangeBindNoWait(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeBindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ExchangeDeclare(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeDeclare(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ExchangeDeclareNoWait(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeDeclareNoWait(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ExchangeDeclarePassive(System.String)">
            <summary>Sets the stub of IModel.ExchangeDeclarePassive(String exchange)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ExchangeDelete(System.String,System.Boolean)">
            <summary>Sets the stub of IModel.ExchangeDelete(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ExchangeDeleteNoWait(System.String,System.Boolean)">
            <summary>Sets the stub of IModel.ExchangeDeleteNoWait(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ExchangeUnbind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeUnbind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#ExchangeUnbindNoWait(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeUnbindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#MessageCount(System.String)">
            <summary>Sets the stub of IModel.MessageCount(String queue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#QueueBind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueBind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#QueueBindNoWait(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueBindNoWait(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#QueueDeclare(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueDeclare(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#QueueDeclareNoWait(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueDeclareNoWait(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#QueueDeclarePassive(System.String)">
            <summary>Sets the stub of IModel.QueueDeclarePassive(String queue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#QueueDelete(System.String,System.Boolean,System.Boolean)">
            <summary>Sets the stub of IModel.QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#QueueDeleteNoWait(System.String,System.Boolean,System.Boolean)">
            <summary>Sets the stub of IModel.QueueDeleteNoWait(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#QueuePurge(System.String)">
            <summary>Sets the stub of IModel.QueuePurge(String queue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#QueueUnbind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#TxCommit">
            <summary>Sets the stub of IModel.TxCommit()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#TxRollback">
            <summary>Sets the stub of IModel.TxRollback()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#TxSelect">
            <summary>Sets the stub of IModel.TxSelect()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#WaitForConfirms">
            <summary>Sets the stub of IModel.WaitForConfirms()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#WaitForConfirms(System.TimeSpan)">
            <summary>Sets the stub of IModel.WaitForConfirms(TimeSpan timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#WaitForConfirms(System.TimeSpan,System.Boolean@)">
            <summary>Sets the stub of IModel.WaitForConfirms(TimeSpan timeout, Boolean&amp; timedOut)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#WaitForConfirmsOrDie">
            <summary>Sets the stub of IModel.WaitForConfirmsOrDie()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.RabbitMQ#Client#IModel#WaitForConfirmsOrDie(System.TimeSpan)">
            <summary>Sets the stub of IModel.WaitForConfirmsOrDie(TimeSpan timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIModel.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.TxCommit">
            <summary>Sets the stub of IModel.TxCommit()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.TxRollback">
            <summary>Sets the stub of IModel.TxRollback()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.TxSelect">
            <summary>Sets the stub of IModel.TxSelect()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.WaitForConfirms">
            <summary>Sets the stub of IModel.WaitForConfirms()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.WaitForConfirmsOrDie">
            <summary>Sets the stub of IModel.WaitForConfirmsOrDie()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.WaitForConfirmsOrDieTimeSpan">
            <summary>Sets the stub of IModel.WaitForConfirmsOrDie(TimeSpan timeout)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.WaitForConfirmsTimeSpan">
            <summary>Sets the stub of IModel.WaitForConfirms(TimeSpan timeout)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIModel.WaitForConfirmsTimeSpanBooleanOut">
            <summary>Sets the stub of IModel.WaitForConfirms(TimeSpan timeout, Boolean&amp; timedOut)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIProtocol">
            <summary>Stub type of RabbitMQ.Client.IProtocol</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIProtocol.#ctor">
            <summary>Initializes a new instance of type StubIProtocol</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#ApiName">
            <summary>Sets the stub of IProtocol.get_ApiName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.ApiNameGet">
            <summary>Sets the stub of IProtocol.get_ApiName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.CreateConnectionConnectionFactoryIFrameHandlerBoolean">
            <summary>Sets the stub of IProtocol.CreateConnection(ConnectionFactory factory, IFrameHandler frameHandler, Boolean automaticRecoveryEnabled)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.CreateConnectionConnectionFactoryIFrameHandlerBooleanString">
            <summary>Sets the stub of IProtocol.CreateConnection(ConnectionFactory factory, IFrameHandler frameHandler, Boolean automaticRecoveryEnabled, String clientProvidedName)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.CreateConnectionIConnectionFactoryBooleanIFrameHandler">
            <summary>Sets the stub of IProtocol.CreateConnection(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.CreateConnectionIConnectionFactoryBooleanIFrameHandlerString">
            <summary>Sets the stub of IProtocol.CreateConnection(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler, String clientProvidedName)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.CreateModelISession">
            <summary>Sets the stub of IProtocol.CreateModel(ISession session)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#DefaultPort">
            <summary>Sets the stub of IProtocol.get_DefaultPort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.DefaultPortGet">
            <summary>Sets the stub of IProtocol.get_DefaultPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#MajorVersion">
            <summary>Sets the stub of IProtocol.get_MajorVersion()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.MajorVersionGet">
            <summary>Sets the stub of IProtocol.get_MajorVersion()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#MinorVersion">
            <summary>Sets the stub of IProtocol.get_MinorVersion()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.MinorVersionGet">
            <summary>Sets the stub of IProtocol.get_MinorVersion()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#CreateConnection(RabbitMQ.Client.ConnectionFactory,RabbitMQ.Client.Impl.IFrameHandler,System.Boolean)">
            <summary>Sets the stub of IProtocol.CreateConnection(ConnectionFactory factory, IFrameHandler frameHandler, Boolean automaticRecoveryEnabled)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#CreateConnection(RabbitMQ.Client.IConnectionFactory,System.Boolean,RabbitMQ.Client.Impl.IFrameHandler)">
            <summary>Sets the stub of IProtocol.CreateConnection(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#CreateConnection(RabbitMQ.Client.ConnectionFactory,RabbitMQ.Client.Impl.IFrameHandler,System.Boolean,System.String)">
            <summary>Sets the stub of IProtocol.CreateConnection(ConnectionFactory factory, IFrameHandler frameHandler, Boolean automaticRecoveryEnabled, String clientProvidedName)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#CreateConnection(RabbitMQ.Client.IConnectionFactory,System.Boolean,RabbitMQ.Client.Impl.IFrameHandler,System.String)">
            <summary>Sets the stub of IProtocol.CreateConnection(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler, String clientProvidedName)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#CreateModel(RabbitMQ.Client.Impl.ISession)">
            <summary>Sets the stub of IProtocol.CreateModel(ISession session)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIProtocol.RabbitMQ#Client#IProtocol#Revision">
            <summary>Sets the stub of IProtocol.get_Revision()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIProtocol.RevisionGet">
            <summary>Sets the stub of IProtocol.get_Revision()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIQueueingBasicConsumer">
            <summary>Stub type of RabbitMQ.Client.IQueueingBasicConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIQueueingBasicConsumer.#ctor">
            <summary>Initializes a new instance of type StubIQueueingBasicConsumer</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIQueueingBasicConsumer.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of IQueueingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIQueueingBasicConsumer.OnCancel">
            <summary>Sets the stub of IQueueingBasicConsumer.OnCancel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIQueueingBasicConsumer.RabbitMQ#Client#IQueueingBasicConsumer#Queue">
            <summary>Sets the stub of IQueueingBasicConsumer.get_Queue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIQueueingBasicConsumer.QueueGet">
            <summary>Sets the stub of IQueueingBasicConsumer.get_Queue()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIQueueingBasicConsumer.RabbitMQ#Client#IQueueingBasicConsumer#HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IQueueingBasicConsumer.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties properties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIQueueingBasicConsumer.RabbitMQ#Client#IQueueingBasicConsumer#OnCancel">
            <summary>Sets the stub of IQueueingBasicConsumer.OnCancel()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIRecoverable">
            <summary>Stub type of RabbitMQ.Client.IRecoverable</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIRecoverable.#ctor">
            <summary>Initializes a new instance of type StubIRecoverable</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubIStreamProperties">
            <summary>Stub type of RabbitMQ.Client.IStreamProperties</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.#ctor">
            <summary>Initializes a new instance of type StubIStreamProperties</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.AttachBackingFieldToContentEncoding">
            <summary>Attaches delegates to emulate StubIStreamProperties.ContentEncoding as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.AttachBackingFieldToContentType">
            <summary>Attaches delegates to emulate StubIStreamProperties.ContentType as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.AttachBackingFieldToHeaders">
            <summary>Attaches delegates to emulate StubIStreamProperties.Headers as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.AttachBackingFieldToPriority">
            <summary>Attaches delegates to emulate StubIStreamProperties.Priority as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.AttachBackingFieldToTimestamp">
            <summary>Attaches delegates to emulate StubIStreamProperties.Timestamp as a property with a backing field.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ClearContentEncoding">
            <summary>Sets the stub of IStreamProperties.ClearContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ClearContentType">
            <summary>Sets the stub of IStreamProperties.ClearContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ClearHeaders">
            <summary>Sets the stub of IStreamProperties.ClearHeaders()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ClearPriority">
            <summary>Sets the stub of IStreamProperties.ClearPriority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ClearTimestamp">
            <summary>Sets the stub of IStreamProperties.ClearTimestamp()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#ContentEncoding">
            <summary>Sets the stub of IStreamProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ContentEncodingGet">
            <summary>Sets the stub of IStreamProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ContentEncodingSetString">
            <summary>Sets the stub of IStreamProperties.set_ContentEncoding(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#ContentType">
            <summary>Sets the stub of IStreamProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ContentTypeGet">
            <summary>Sets the stub of IStreamProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ContentTypeSetString">
            <summary>Sets the stub of IStreamProperties.set_ContentType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#Headers">
            <summary>Sets the stub of IStreamProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.HeadersGet">
            <summary>Sets the stub of IStreamProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.HeadersSetIDictionaryOfStringObject">
            <summary>Sets the stub of IStreamProperties.set_Headers(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.IsContentEncodingPresent">
            <summary>Sets the stub of IStreamProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.IsContentTypePresent">
            <summary>Sets the stub of IStreamProperties.IsContentTypePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.IsHeadersPresent">
            <summary>Sets the stub of IStreamProperties.IsHeadersPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.IsPriorityPresent">
            <summary>Sets the stub of IStreamProperties.IsPriorityPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.IsTimestampPresent">
            <summary>Sets the stub of IStreamProperties.IsTimestampPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#Priority">
            <summary>Sets the stub of IStreamProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.PriorityGet">
            <summary>Sets the stub of IStreamProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.PrioritySetByte">
            <summary>Sets the stub of IStreamProperties.set_Priority(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IContentHeader#ProtocolClassId">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ProtocolClassIdGet">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IContentHeader#ProtocolClassName">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.ProtocolClassNameGet">
            <summary>Sets the stub of IContentHeader.get_ProtocolClassName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#ClearContentEncoding">
            <summary>Sets the stub of IStreamProperties.ClearContentEncoding()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#ClearContentType">
            <summary>Sets the stub of IStreamProperties.ClearContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#ClearHeaders">
            <summary>Sets the stub of IStreamProperties.ClearHeaders()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#ClearPriority">
            <summary>Sets the stub of IStreamProperties.ClearPriority()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#ClearTimestamp">
            <summary>Sets the stub of IStreamProperties.ClearTimestamp()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#IsContentEncodingPresent">
            <summary>Sets the stub of IStreamProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#IsContentTypePresent">
            <summary>Sets the stub of IStreamProperties.IsContentTypePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#IsHeadersPresent">
            <summary>Sets the stub of IStreamProperties.IsHeadersPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#IsPriorityPresent">
            <summary>Sets the stub of IStreamProperties.IsPriorityPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#IsTimestampPresent">
            <summary>Sets the stub of IStreamProperties.IsTimestampPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubIStreamProperties.RabbitMQ#Client#IStreamProperties#Timestamp">
            <summary>Sets the stub of IStreamProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.TimestampGet">
            <summary>Sets the stub of IStreamProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubIStreamProperties.TimestampSetAmqpTimestamp">
            <summary>Sets the stub of IStreamProperties.set_Timestamp(AmqpTimestamp value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubITcpClient">
            <summary>Stub type of RabbitMQ.Client.ITcpClient</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubITcpClient.#ctor">
            <summary>Initializes a new instance of type StubITcpClient</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubITcpClient.AttachBackingFieldToReceiveTimeout">
            <summary>Attaches delegates to emulate StubITcpClient.ReceiveTimeout as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubITcpClient.RabbitMQ#Client#ITcpClient#Client">
            <summary>Sets the stub of ITcpClient.get_Client()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubITcpClient.ClientGet">
            <summary>Sets the stub of ITcpClient.get_Client()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubITcpClient.Close">
            <summary>Sets the stub of ITcpClient.Close()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubITcpClient.ConnectAsyncStringInt32">
            <summary>Sets the stub of ITcpClient.ConnectAsync(String host, Int32 port)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubITcpClient.RabbitMQ#Client#ITcpClient#Connected">
            <summary>Sets the stub of ITcpClient.get_Connected()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubITcpClient.ConnectedGet">
            <summary>Sets the stub of ITcpClient.get_Connected()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubITcpClient.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubITcpClient.GetStream">
            <summary>Sets the stub of ITcpClient.GetStream()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubITcpClient.RabbitMQ#Client#ITcpClient#Close">
            <summary>Sets the stub of ITcpClient.Close()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubITcpClient.RabbitMQ#Client#ITcpClient#ConnectAsync(System.String,System.Int32)">
            <summary>Sets the stub of ITcpClient.ConnectAsync(String host, Int32 port)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubITcpClient.RabbitMQ#Client#ITcpClient#GetStream">
            <summary>Sets the stub of ITcpClient.GetStream()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubITcpClient.RabbitMQ#Client#ITcpClient#ReceiveTimeout">
            <summary>Sets the stub of ITcpClient.get_ReceiveTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubITcpClient.ReceiveTimeoutGet">
            <summary>Sets the stub of ITcpClient.get_ReceiveTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubITcpClient.ReceiveTimeoutSetInt32">
            <summary>Sets the stub of ITcpClient.set_ReceiveTimeout(Int32 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubITcpClient.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubNetworkConnection">
            <summary>Stub type of RabbitMQ.Client.NetworkConnection</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubNetworkConnection.#ctor">
            <summary>Initializes a new instance of type StubNetworkConnection</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubNetworkConnection.RabbitMQ#Client#NetworkConnection#LocalPort">
            <summary>Sets the stub of NetworkConnection.get_LocalPort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubNetworkConnection.LocalPortGet">
            <summary>Sets the stub of NetworkConnection.get_LocalPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubNetworkConnection.RabbitMQ#Client#NetworkConnection#RemotePort">
            <summary>Sets the stub of NetworkConnection.get_RemotePort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubNetworkConnection.RemotePortGet">
            <summary>Sets the stub of NetworkConnection.get_RemotePort()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubPlainMechanism">
            <summary>Stub type of RabbitMQ.Client.PlainMechanism</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubPlainMechanism.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubPlainMechanism.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubPlainMechanism.InitializeStub">
            <summary>Initializes a new instance of type StubPlainMechanism</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubPlainMechanism.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubPlainMechanism.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubPlainMechanismFactory">
            <summary>Stub type of RabbitMQ.Client.PlainMechanismFactory</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubPlainMechanismFactory.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubPlainMechanismFactory.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubPlainMechanismFactory.InitializeStub">
            <summary>Initializes a new instance of type StubPlainMechanismFactory</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubPlainMechanismFactory.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubPlainMechanismFactory.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubProtocolViolationException">
            <summary>Stub type of RabbitMQ.Client.ProtocolViolationException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubProtocolViolationException.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubProtocolViolationException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubProtocolViolationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubProtocolViolationException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubProtocolViolationException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubProtocolViolationException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubProtocolViolationException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubProtocolViolationException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubProtocolViolationException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubProtocolViolationException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubProtocolViolationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubProtocolViolationException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubProtocolViolationException.InitializeStub">
            <summary>Initializes a new instance of type StubProtocolViolationException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubProtocolViolationException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubProtocolViolationException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubProtocolViolationException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubProtocolViolationException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubProtocolViolationException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubProtocolViolationException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubProtocolViolationException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubPublicationAddress">
            <summary>Stub type of RabbitMQ.Client.PublicationAddress</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubPublicationAddress.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubPublicationAddress.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubPublicationAddress.InitializeStub">
            <summary>Initializes a new instance of type StubPublicationAddress</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubPublicationAddress.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubPublicationAddress.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubPublicationAddress.ToString">
            <summary>Sets the stub of PublicationAddress.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubPublicationAddress.ToString01">
            <summary>Sets the stub of PublicationAddress.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubQueueDeclareOk">
            <summary>Stub type of RabbitMQ.Client.QueueDeclareOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubQueueDeclareOk.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubQueueDeclareOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubQueueDeclareOk.InitializeStub">
            <summary>Initializes a new instance of type StubQueueDeclareOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubQueueDeclareOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubQueueDeclareOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubShutdownEventArgs">
            <summary>Stub type of RabbitMQ.Client.ShutdownEventArgs</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubShutdownEventArgs.#ctor(RabbitMQ.Client.ShutdownInitiator,System.UInt16,System.String,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubShutdownEventArgs.#ctor(RabbitMQ.Client.ShutdownInitiator,System.UInt16,System.String,System.UInt16,System.UInt16,System.Object)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubShutdownEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubShutdownEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubShutdownEventArgs</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubShutdownEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubShutdownEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubShutdownEventArgs.ToString">
            <summary>Sets the stub of ShutdownEventArgs.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubShutdownEventArgs.ToString01">
            <summary>Sets the stub of ShutdownEventArgs.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubShutdownReportEntry">
            <summary>Stub type of RabbitMQ.Client.ShutdownReportEntry</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubShutdownReportEntry.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubShutdownReportEntry.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubShutdownReportEntry.InitializeStub">
            <summary>Initializes a new instance of type StubShutdownReportEntry</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubShutdownReportEntry.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubShutdownReportEntry.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubShutdownReportEntry.ToString">
            <summary>Sets the stub of ShutdownReportEntry.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubShutdownReportEntry.ToString01">
            <summary>Sets the stub of ShutdownReportEntry.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubSslOption">
            <summary>Stub type of RabbitMQ.Client.SslOption</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubSslOption.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubSslOption.#ctor(System.String,System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubSslOption.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubSslOption.InitializeStub">
            <summary>Initializes a new instance of type StubSslOption</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubSslOption.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubSslOption.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubTcpClientAdapter">
            <summary>Stub type of RabbitMQ.Client.TcpClientAdapter</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTcpClientAdapter.#ctor(System.Net.Sockets.Socket)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTcpClientAdapter.AttachBackingFieldToReceiveTimeout">
            <summary>Attaches delegates to emulate StubTcpClientAdapter.ReceiveTimeout as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTcpClientAdapter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTcpClientAdapter.Client">
            <summary>Sets the stub of TcpClientAdapter.get_Client()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTcpClientAdapter.ClientGet">
            <summary>Sets the stub of TcpClientAdapter.get_Client()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTcpClientAdapter.Close">
            <summary>Sets the stub of TcpClientAdapter.Close()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTcpClientAdapter.Close01">
            <summary>Sets the stub of TcpClientAdapter.Close()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTcpClientAdapter.ConnectAsync(System.String,System.Int32)">
            <summary>Sets the stub of TcpClientAdapter.ConnectAsync(String host, Int32 port)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTcpClientAdapter.ConnectAsyncStringInt32">
            <summary>Sets the stub of TcpClientAdapter.ConnectAsync(String host, Int32 port)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTcpClientAdapter.Connected">
            <summary>Sets the stub of TcpClientAdapter.get_Connected()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTcpClientAdapter.ConnectedGet">
            <summary>Sets the stub of TcpClientAdapter.get_Connected()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTcpClientAdapter.Dispose">
            <summary>Sets the stub of TcpClientAdapter.Dispose()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTcpClientAdapter.Dispose01">
            <summary>Sets the stub of TcpClientAdapter.Dispose()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTcpClientAdapter.GetStream">
            <summary>Sets the stub of TcpClientAdapter.GetStream()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTcpClientAdapter.GetStream01">
            <summary>Sets the stub of TcpClientAdapter.GetStream()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTcpClientAdapter.InitializeStub">
            <summary>Initializes a new instance of type StubTcpClientAdapter</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTcpClientAdapter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTcpClientAdapter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTcpClientAdapter.ReceiveTimeout">
            <summary>Sets the stub of TcpClientAdapter.get_ReceiveTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTcpClientAdapter.ReceiveTimeoutGet">
            <summary>Sets the stub of TcpClientAdapter.get_ReceiveTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTcpClientAdapter.ReceiveTimeoutSetInt32">
            <summary>Sets the stub of TcpClientAdapter.set_ReceiveTimeout(Int32 value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Fakes.StubTopologyRecoveryException">
            <summary>Stub type of RabbitMQ.Client.TopologyRecoveryException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubTopologyRecoveryException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubTopologyRecoveryException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.InitializeStub">
            <summary>Initializes a new instance of type StubTopologyRecoveryException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Fakes.StubTopologyRecoveryException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties">
            <summary>Shim type of RabbitMQ.Client.Framing.BasicProperties</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.#ctor(RabbitMQ.Client.Framing.BasicProperties)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.AppIdGet">
            <summary>Sets the shim of BasicProperties.get_AppId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.AppIdSetString">
            <summary>Sets the shim of BasicProperties.set_AppId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.AppendPropertyDebugStringToStringBuilder">
            <summary>Sets the shim of BasicProperties.AppendPropertyDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearAppId">
            <summary>Sets the shim of BasicProperties.ClearAppId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearClusterId">
            <summary>Sets the shim of BasicProperties.ClearClusterId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearContentEncoding">
            <summary>Sets the shim of BasicProperties.ClearContentEncoding()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearContentType">
            <summary>Sets the shim of BasicProperties.ClearContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearCorrelationId">
            <summary>Sets the shim of BasicProperties.ClearCorrelationId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearDeliveryMode">
            <summary>Sets the shim of BasicProperties.ClearDeliveryMode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearExpiration">
            <summary>Sets the shim of BasicProperties.ClearExpiration()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearHeaders">
            <summary>Sets the shim of BasicProperties.ClearHeaders()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearMessageId">
            <summary>Sets the shim of BasicProperties.ClearMessageId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearPriority">
            <summary>Sets the shim of BasicProperties.ClearPriority()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearReplyTo">
            <summary>Sets the shim of BasicProperties.ClearReplyTo()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearTimestamp">
            <summary>Sets the shim of BasicProperties.ClearTimestamp()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearType">
            <summary>Sets the shim of BasicProperties.ClearType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClearUserId">
            <summary>Sets the shim of BasicProperties.ClearUserId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClusterIdGet">
            <summary>Sets the shim of BasicProperties.get_ClusterId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ClusterIdSetString">
            <summary>Sets the shim of BasicProperties.set_ClusterId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ContentEncodingGet">
            <summary>Sets the shim of BasicProperties.get_ContentEncoding()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ContentEncodingSetString">
            <summary>Sets the shim of BasicProperties.set_ContentEncoding(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ContentTypeGet">
            <summary>Sets the shim of BasicProperties.get_ContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ContentTypeSetString">
            <summary>Sets the shim of BasicProperties.set_ContentType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.CorrelationIdGet">
            <summary>Sets the shim of BasicProperties.get_CorrelationId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.CorrelationIdSetString">
            <summary>Sets the shim of BasicProperties.set_CorrelationId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.DeliveryModeGet">
            <summary>Sets the shim of BasicProperties.get_DeliveryMode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.DeliveryModeSetByte">
            <summary>Sets the shim of BasicProperties.set_DeliveryMode(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ExpirationGet">
            <summary>Sets the shim of BasicProperties.get_Expiration()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ExpirationSetString">
            <summary>Sets the shim of BasicProperties.set_Expiration(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.HeadersGet">
            <summary>Sets the shim of BasicProperties.get_Headers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.HeadersSetIDictionaryOfStringObject">
            <summary>Sets the shim of BasicProperties.set_Headers(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsAppIdPresent">
            <summary>Sets the shim of BasicProperties.IsAppIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsClusterIdPresent">
            <summary>Sets the shim of BasicProperties.IsClusterIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsContentEncodingPresent">
            <summary>Sets the shim of BasicProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsContentTypePresent">
            <summary>Sets the shim of BasicProperties.IsContentTypePresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsCorrelationIdPresent">
            <summary>Sets the shim of BasicProperties.IsCorrelationIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsDeliveryModePresent">
            <summary>Sets the shim of BasicProperties.IsDeliveryModePresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsExpirationPresent">
            <summary>Sets the shim of BasicProperties.IsExpirationPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsHeadersPresent">
            <summary>Sets the shim of BasicProperties.IsHeadersPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsMessageIdPresent">
            <summary>Sets the shim of BasicProperties.IsMessageIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsPriorityPresent">
            <summary>Sets the shim of BasicProperties.IsPriorityPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsReplyToPresent">
            <summary>Sets the shim of BasicProperties.IsReplyToPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsTimestampPresent">
            <summary>Sets the shim of BasicProperties.IsTimestampPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsTypePresent">
            <summary>Sets the shim of BasicProperties.IsTypePresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.IsUserIdPresent">
            <summary>Sets the shim of BasicProperties.IsUserIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.MessageIdGet">
            <summary>Sets the shim of BasicProperties.get_MessageId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.MessageIdSetString">
            <summary>Sets the shim of BasicProperties.set_MessageId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.PriorityGet">
            <summary>Sets the shim of BasicProperties.get_Priority()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.PrioritySetByte">
            <summary>Sets the shim of BasicProperties.set_Priority(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicProperties.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ProtocolClassNameGet">
            <summary>Sets the shim of BasicProperties.get_ProtocolClassName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ReadPropertiesFromContentHeaderPropertyReader">
            <summary>Sets the shim of BasicProperties.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ReplyToGet">
            <summary>Sets the shim of BasicProperties.get_ReplyTo()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.ReplyToSetString">
            <summary>Sets the shim of BasicProperties.set_ReplyTo(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.TimestampGet">
            <summary>Sets the shim of BasicProperties.get_Timestamp()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.TimestampSetAmqpTimestamp">
            <summary>Sets the shim of BasicProperties.set_Timestamp(AmqpTimestamp value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.TypeGet">
            <summary>Sets the shim of BasicProperties.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.TypeSetString">
            <summary>Sets the shim of BasicProperties.set_Type(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.UserIdGet">
            <summary>Sets the shim of BasicProperties.get_UserId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.UserIdSetString">
            <summary>Sets the shim of BasicProperties.set_UserId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AllInstances.WritePropertiesToContentHeaderPropertyWriter">
            <summary>Sets the shim of BasicProperties.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AppIdGet">
            <summary>Sets the shim of BasicProperties.get_AppId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AppIdSetString">
            <summary>Sets the shim of BasicProperties.set_AppId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.AppendPropertyDebugStringToStringBuilder">
            <summary>Sets the shim of BasicProperties.AppendPropertyDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.Bind(RabbitMQ.Client.IBasicProperties)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.Bind(RabbitMQ.Client.IContentHeader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearAppId">
            <summary>Sets the shim of BasicProperties.ClearAppId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearClusterId">
            <summary>Sets the shim of BasicProperties.ClearClusterId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearContentEncoding">
            <summary>Sets the shim of BasicProperties.ClearContentEncoding()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearContentType">
            <summary>Sets the shim of BasicProperties.ClearContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearCorrelationId">
            <summary>Sets the shim of BasicProperties.ClearCorrelationId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearDeliveryMode">
            <summary>Sets the shim of BasicProperties.ClearDeliveryMode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearExpiration">
            <summary>Sets the shim of BasicProperties.ClearExpiration()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearHeaders">
            <summary>Sets the shim of BasicProperties.ClearHeaders()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearMessageId">
            <summary>Sets the shim of BasicProperties.ClearMessageId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearPriority">
            <summary>Sets the shim of BasicProperties.ClearPriority()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearReplyTo">
            <summary>Sets the shim of BasicProperties.ClearReplyTo()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearTimestamp">
            <summary>Sets the shim of BasicProperties.ClearTimestamp()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearType">
            <summary>Sets the shim of BasicProperties.ClearType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClearUserId">
            <summary>Sets the shim of BasicProperties.ClearUserId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClusterIdGet">
            <summary>Sets the shim of BasicProperties.get_ClusterId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ClusterIdSetString">
            <summary>Sets the shim of BasicProperties.set_ClusterId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.Constructor">
            <summary>Sets the shim of BasicProperties.BasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ContentEncodingGet">
            <summary>Sets the shim of BasicProperties.get_ContentEncoding()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ContentEncodingSetString">
            <summary>Sets the shim of BasicProperties.set_ContentEncoding(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ContentTypeGet">
            <summary>Sets the shim of BasicProperties.get_ContentType()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ContentTypeSetString">
            <summary>Sets the shim of BasicProperties.set_ContentType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.CorrelationIdGet">
            <summary>Sets the shim of BasicProperties.get_CorrelationId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.CorrelationIdSetString">
            <summary>Sets the shim of BasicProperties.set_CorrelationId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.DeliveryModeGet">
            <summary>Sets the shim of BasicProperties.get_DeliveryMode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.DeliveryModeSetByte">
            <summary>Sets the shim of BasicProperties.set_DeliveryMode(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ExpirationGet">
            <summary>Sets the shim of BasicProperties.get_Expiration()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ExpirationSetString">
            <summary>Sets the shim of BasicProperties.set_Expiration(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.HeadersGet">
            <summary>Sets the shim of BasicProperties.get_Headers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.HeadersSetIDictionaryOfStringObject">
            <summary>Sets the shim of BasicProperties.set_Headers(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsAppIdPresent">
            <summary>Sets the shim of BasicProperties.IsAppIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsClusterIdPresent">
            <summary>Sets the shim of BasicProperties.IsClusterIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsContentEncodingPresent">
            <summary>Sets the shim of BasicProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsContentTypePresent">
            <summary>Sets the shim of BasicProperties.IsContentTypePresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsCorrelationIdPresent">
            <summary>Sets the shim of BasicProperties.IsCorrelationIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsDeliveryModePresent">
            <summary>Sets the shim of BasicProperties.IsDeliveryModePresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsExpirationPresent">
            <summary>Sets the shim of BasicProperties.IsExpirationPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsHeadersPresent">
            <summary>Sets the shim of BasicProperties.IsHeadersPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsMessageIdPresent">
            <summary>Sets the shim of BasicProperties.IsMessageIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsPriorityPresent">
            <summary>Sets the shim of BasicProperties.IsPriorityPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsReplyToPresent">
            <summary>Sets the shim of BasicProperties.IsReplyToPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsTimestampPresent">
            <summary>Sets the shim of BasicProperties.IsTimestampPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsTypePresent">
            <summary>Sets the shim of BasicProperties.IsTypePresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.IsUserIdPresent">
            <summary>Sets the shim of BasicProperties.IsUserIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.MessageIdGet">
            <summary>Sets the shim of BasicProperties.get_MessageId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.MessageIdSetString">
            <summary>Sets the shim of BasicProperties.set_MessageId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.PriorityGet">
            <summary>Sets the shim of BasicProperties.get_Priority()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.PrioritySetByte">
            <summary>Sets the shim of BasicProperties.set_Priority(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ProtocolClassIdGet">
            <summary>Sets the shim of BasicProperties.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ProtocolClassNameGet">
            <summary>Sets the shim of BasicProperties.get_ProtocolClassName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ReadPropertiesFromContentHeaderPropertyReader">
            <summary>Sets the shim of BasicProperties.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ReplyToGet">
            <summary>Sets the shim of BasicProperties.get_ReplyTo()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.ReplyToSetString">
            <summary>Sets the shim of BasicProperties.set_ReplyTo(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.TimestampGet">
            <summary>Sets the shim of BasicProperties.get_Timestamp()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.TimestampSetAmqpTimestamp">
            <summary>Sets the shim of BasicProperties.set_Timestamp(AmqpTimestamp value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.TypeGet">
            <summary>Sets the shim of BasicProperties.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.TypeSetString">
            <summary>Sets the shim of BasicProperties.set_Type(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.UserIdGet">
            <summary>Sets the shim of BasicProperties.get_UserId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.UserIdSetString">
            <summary>Sets the shim of BasicProperties.set_UserId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimBasicProperties.WritePropertiesToContentHeaderPropertyWriter">
            <summary>Sets the shim of BasicProperties.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.ShimConstants">
            <summary>Shim type of RabbitMQ.Client.Framing.Constants</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimConstants.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimConstants.#ctor(RabbitMQ.Client.Framing.Constants)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.ShimConstants.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimConstants.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimConstants.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimConstants.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimConstants.Constructor">
            <summary>Sets the shim of Constants.Constants()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.ShimProtocol">
            <summary>Shim type of RabbitMQ.Client.Framing.Protocol</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimProtocol.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimProtocol.#ctor(RabbitMQ.Client.Framing.Protocol)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.ShimProtocol.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.AllInstances.ApiNameGet">
            <summary>Sets the shim of Protocol.get_ApiName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.AllInstances.DecodeContentHeaderFromNetworkBinaryReader">
            <summary>Sets the shim of Protocol.DecodeContentHeaderFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.AllInstances.DecodeMethodFromNetworkBinaryReader">
            <summary>Sets the shim of Protocol.DecodeMethodFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.AllInstances.DefaultPortGet">
            <summary>Sets the shim of Protocol.get_DefaultPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.AllInstances.MajorVersionGet">
            <summary>Sets the shim of Protocol.get_MajorVersion()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.AllInstances.MinorVersionGet">
            <summary>Sets the shim of Protocol.get_MinorVersion()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.AllInstances.RevisionGet">
            <summary>Sets the shim of Protocol.get_Revision()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.ApiNameGet">
            <summary>Sets the shim of Protocol.get_ApiName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimProtocol.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimProtocol.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.ShimProtocol.Bind(RabbitMQ.Client.IProtocol)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.Constructor">
            <summary>Sets the shim of Protocol.Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.DecodeContentHeaderFromNetworkBinaryReader">
            <summary>Sets the shim of Protocol.DecodeContentHeaderFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.DecodeMethodFromNetworkBinaryReader">
            <summary>Sets the shim of Protocol.DecodeMethodFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.DefaultPortGet">
            <summary>Sets the shim of Protocol.get_DefaultPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.MajorVersionGet">
            <summary>Sets the shim of Protocol.get_MajorVersion()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.MinorVersionGet">
            <summary>Sets the shim of Protocol.get_MinorVersion()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.ShimProtocol.RevisionGet">
            <summary>Sets the shim of Protocol.get_Revision()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubBasicProperties">
            <summary>Stub type of RabbitMQ.Client.Framing.BasicProperties</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AppId">
            <summary>Sets the stub of BasicProperties.get_AppId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AppIdGet">
            <summary>Sets the stub of BasicProperties.get_AppId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AppIdSetString">
            <summary>Sets the stub of BasicProperties.set_AppId(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AppendPropertyDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicProperties.AppendPropertyDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AppendPropertyDebugStringToStringBuilder">
            <summary>Sets the stub of BasicProperties.AppendPropertyDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToAppId">
            <summary>Attaches delegates to emulate StubBasicProperties.AppId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToClusterId">
            <summary>Attaches delegates to emulate StubBasicProperties.ClusterId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToContentEncoding">
            <summary>Attaches delegates to emulate StubBasicProperties.ContentEncoding as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToContentType">
            <summary>Attaches delegates to emulate StubBasicProperties.ContentType as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToCorrelationId">
            <summary>Attaches delegates to emulate StubBasicProperties.CorrelationId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToDeliveryMode">
            <summary>Attaches delegates to emulate StubBasicProperties.DeliveryMode as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToExpiration">
            <summary>Attaches delegates to emulate StubBasicProperties.Expiration as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToHeaders">
            <summary>Attaches delegates to emulate StubBasicProperties.Headers as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToMessageId">
            <summary>Attaches delegates to emulate StubBasicProperties.MessageId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToPriority">
            <summary>Attaches delegates to emulate StubBasicProperties.Priority as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToReplyTo">
            <summary>Attaches delegates to emulate StubBasicProperties.ReplyTo as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToTimestamp">
            <summary>Attaches delegates to emulate StubBasicProperties.Timestamp as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToType">
            <summary>Attaches delegates to emulate StubBasicProperties.Type as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.AttachBackingFieldToUserId">
            <summary>Attaches delegates to emulate StubBasicProperties.UserId as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearAppId">
            <summary>Sets the stub of BasicProperties.ClearAppId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearAppId01">
            <summary>Sets the stub of BasicProperties.ClearAppId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearClusterId">
            <summary>Sets the stub of BasicProperties.ClearClusterId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearClusterId01">
            <summary>Sets the stub of BasicProperties.ClearClusterId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearContentEncoding">
            <summary>Sets the stub of BasicProperties.ClearContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearContentEncoding01">
            <summary>Sets the stub of BasicProperties.ClearContentEncoding()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearContentType">
            <summary>Sets the stub of BasicProperties.ClearContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearContentType01">
            <summary>Sets the stub of BasicProperties.ClearContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearCorrelationId">
            <summary>Sets the stub of BasicProperties.ClearCorrelationId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearCorrelationId01">
            <summary>Sets the stub of BasicProperties.ClearCorrelationId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearDeliveryMode">
            <summary>Sets the stub of BasicProperties.ClearDeliveryMode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearDeliveryMode01">
            <summary>Sets the stub of BasicProperties.ClearDeliveryMode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearExpiration">
            <summary>Sets the stub of BasicProperties.ClearExpiration()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearExpiration01">
            <summary>Sets the stub of BasicProperties.ClearExpiration()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearHeaders">
            <summary>Sets the stub of BasicProperties.ClearHeaders()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearHeaders01">
            <summary>Sets the stub of BasicProperties.ClearHeaders()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearMessageId">
            <summary>Sets the stub of BasicProperties.ClearMessageId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearMessageId01">
            <summary>Sets the stub of BasicProperties.ClearMessageId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearPriority">
            <summary>Sets the stub of BasicProperties.ClearPriority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearPriority01">
            <summary>Sets the stub of BasicProperties.ClearPriority()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearReplyTo">
            <summary>Sets the stub of BasicProperties.ClearReplyTo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearReplyTo01">
            <summary>Sets the stub of BasicProperties.ClearReplyTo()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearTimestamp">
            <summary>Sets the stub of BasicProperties.ClearTimestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearTimestamp01">
            <summary>Sets the stub of BasicProperties.ClearTimestamp()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearType">
            <summary>Sets the stub of BasicProperties.ClearType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearType01">
            <summary>Sets the stub of BasicProperties.ClearType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearUserId">
            <summary>Sets the stub of BasicProperties.ClearUserId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClearUserId01">
            <summary>Sets the stub of BasicProperties.ClearUserId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.Clone">
            <summary>Sets the stub of BasicProperties.Clone()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.Clone01">
            <summary>Sets the stub of BasicProperties.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClusterId">
            <summary>Sets the stub of BasicProperties.get_ClusterId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClusterIdGet">
            <summary>Sets the stub of BasicProperties.get_ClusterId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ClusterIdSetString">
            <summary>Sets the stub of BasicProperties.set_ClusterId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ContentEncoding">
            <summary>Sets the stub of BasicProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ContentEncodingGet">
            <summary>Sets the stub of BasicProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ContentEncodingSetString">
            <summary>Sets the stub of BasicProperties.set_ContentEncoding(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ContentType">
            <summary>Sets the stub of BasicProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ContentTypeGet">
            <summary>Sets the stub of BasicProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ContentTypeSetString">
            <summary>Sets the stub of BasicProperties.set_ContentType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.CorrelationId">
            <summary>Sets the stub of BasicProperties.get_CorrelationId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.CorrelationIdGet">
            <summary>Sets the stub of BasicProperties.get_CorrelationId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.CorrelationIdSetString">
            <summary>Sets the stub of BasicProperties.set_CorrelationId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.DeliveryMode">
            <summary>Sets the stub of BasicProperties.get_DeliveryMode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.DeliveryModeGet">
            <summary>Sets the stub of BasicProperties.get_DeliveryMode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.DeliveryModeSetByte">
            <summary>Sets the stub of BasicProperties.set_DeliveryMode(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.Expiration">
            <summary>Sets the stub of BasicProperties.get_Expiration()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ExpirationGet">
            <summary>Sets the stub of BasicProperties.get_Expiration()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ExpirationSetString">
            <summary>Sets the stub of BasicProperties.set_Expiration(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.Headers">
            <summary>Sets the stub of BasicProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.HeadersGet">
            <summary>Sets the stub of BasicProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.HeadersSetIDictionaryOfStringObject">
            <summary>Sets the stub of BasicProperties.set_Headers(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.InitializeStub">
            <summary>Initializes a new instance of type StubBasicProperties</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsAppIdPresent">
            <summary>Sets the stub of BasicProperties.IsAppIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsAppIdPresent01">
            <summary>Sets the stub of BasicProperties.IsAppIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsClusterIdPresent">
            <summary>Sets the stub of BasicProperties.IsClusterIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsClusterIdPresent01">
            <summary>Sets the stub of BasicProperties.IsClusterIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsContentEncodingPresent">
            <summary>Sets the stub of BasicProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsContentEncodingPresent01">
            <summary>Sets the stub of BasicProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsContentTypePresent">
            <summary>Sets the stub of BasicProperties.IsContentTypePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsContentTypePresent01">
            <summary>Sets the stub of BasicProperties.IsContentTypePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsCorrelationIdPresent">
            <summary>Sets the stub of BasicProperties.IsCorrelationIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsCorrelationIdPresent01">
            <summary>Sets the stub of BasicProperties.IsCorrelationIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsDeliveryModePresent">
            <summary>Sets the stub of BasicProperties.IsDeliveryModePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsDeliveryModePresent01">
            <summary>Sets the stub of BasicProperties.IsDeliveryModePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsExpirationPresent">
            <summary>Sets the stub of BasicProperties.IsExpirationPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsExpirationPresent01">
            <summary>Sets the stub of BasicProperties.IsExpirationPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsHeadersPresent">
            <summary>Sets the stub of BasicProperties.IsHeadersPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsHeadersPresent01">
            <summary>Sets the stub of BasicProperties.IsHeadersPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsMessageIdPresent">
            <summary>Sets the stub of BasicProperties.IsMessageIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsMessageIdPresent01">
            <summary>Sets the stub of BasicProperties.IsMessageIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsPriorityPresent">
            <summary>Sets the stub of BasicProperties.IsPriorityPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsPriorityPresent01">
            <summary>Sets the stub of BasicProperties.IsPriorityPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsReplyToPresent">
            <summary>Sets the stub of BasicProperties.IsReplyToPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsReplyToPresent01">
            <summary>Sets the stub of BasicProperties.IsReplyToPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsTimestampPresent">
            <summary>Sets the stub of BasicProperties.IsTimestampPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsTimestampPresent01">
            <summary>Sets the stub of BasicProperties.IsTimestampPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsTypePresent">
            <summary>Sets the stub of BasicProperties.IsTypePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsTypePresent01">
            <summary>Sets the stub of BasicProperties.IsTypePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsUserIdPresent">
            <summary>Sets the stub of BasicProperties.IsUserIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.IsUserIdPresent01">
            <summary>Sets the stub of BasicProperties.IsUserIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.MessageId">
            <summary>Sets the stub of BasicProperties.get_MessageId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.MessageIdGet">
            <summary>Sets the stub of BasicProperties.get_MessageId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.MessageIdSetString">
            <summary>Sets the stub of BasicProperties.set_MessageId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.Priority">
            <summary>Sets the stub of BasicProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.PriorityGet">
            <summary>Sets the stub of BasicProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.PrioritySetByte">
            <summary>Sets the stub of BasicProperties.set_Priority(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ProtocolClassId">
            <summary>Sets the stub of BasicProperties.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ProtocolClassIdGet">
            <summary>Sets the stub of BasicProperties.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ProtocolClassName">
            <summary>Sets the stub of BasicProperties.get_ProtocolClassName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ProtocolClassNameGet">
            <summary>Sets the stub of BasicProperties.get_ProtocolClassName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ReadPropertiesFrom(RabbitMQ.Client.Impl.ContentHeaderPropertyReader)">
            <summary>Sets the stub of BasicProperties.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ReadPropertiesFromContentHeaderPropertyReader">
            <summary>Sets the stub of BasicProperties.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ReplyTo">
            <summary>Sets the stub of BasicProperties.get_ReplyTo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ReplyToGet">
            <summary>Sets the stub of BasicProperties.get_ReplyTo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.ReplyToSetString">
            <summary>Sets the stub of BasicProperties.set_ReplyTo(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.Timestamp">
            <summary>Sets the stub of BasicProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.TimestampGet">
            <summary>Sets the stub of BasicProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.TimestampSetAmqpTimestamp">
            <summary>Sets the stub of BasicProperties.set_Timestamp(AmqpTimestamp value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.Type">
            <summary>Sets the stub of BasicProperties.get_Type()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.TypeGet">
            <summary>Sets the stub of BasicProperties.get_Type()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.TypeSetString">
            <summary>Sets the stub of BasicProperties.set_Type(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.UserId">
            <summary>Sets the stub of BasicProperties.get_UserId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.UserIdGet">
            <summary>Sets the stub of BasicProperties.get_UserId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.UserIdSetString">
            <summary>Sets the stub of BasicProperties.set_UserId(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.WritePropertiesTo(RabbitMQ.Client.Impl.ContentHeaderPropertyWriter)">
            <summary>Sets the stub of BasicProperties.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubBasicProperties.WritePropertiesToContentHeaderPropertyWriter">
            <summary>Sets the stub of BasicProperties.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubConstants">
            <summary>Stub type of RabbitMQ.Client.Framing.Constants</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubConstants.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubConstants.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubConstants.InitializeStub">
            <summary>Initializes a new instance of type StubConstants</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubConstants.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubConstants.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicAck">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicAck</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.#ctor">
            <summary>Initializes a new instance of type StubIBasicAck</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.RabbitMQ#Client#Framing#IBasicAck#DeliveryTag">
            <summary>Sets the stub of IBasicAck.get_DeliveryTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.DeliveryTagGet">
            <summary>Sets the stub of IBasicAck.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.RabbitMQ#Client#Framing#IBasicAck#Multiple">
            <summary>Sets the stub of IBasicAck.get_Multiple()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.MultipleGet">
            <summary>Sets the stub of IBasicAck.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicAck.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicCancel</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.#ctor">
            <summary>Initializes a new instance of type StubIBasicCancel</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.RabbitMQ#Client#Framing#IBasicCancel#ConsumerTag">
            <summary>Sets the stub of IBasicCancel.get_ConsumerTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.ConsumerTagGet">
            <summary>Sets the stub of IBasicCancel.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.RabbitMQ#Client#Framing#IBasicCancel#Nowait">
            <summary>Sets the stub of IBasicCancel.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.NowaitGet">
            <summary>Sets the stub of IBasicCancel.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicCancel.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicCancelOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk.#ctor">
            <summary>Initializes a new instance of type StubIBasicCancelOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk.RabbitMQ#Client#Framing#IBasicCancelOk#ConsumerTag">
            <summary>Sets the stub of IBasicCancelOk.get_ConsumerTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk.ConsumerTagGet">
            <summary>Sets the stub of IBasicCancelOk.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicCancelOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicConsume</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.#ctor">
            <summary>Initializes a new instance of type StubIBasicConsume</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#Framing#IBasicConsume#Arguments">
            <summary>Sets the stub of IBasicConsume.get_Arguments()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.ArgumentsGet">
            <summary>Sets the stub of IBasicConsume.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#Framing#IBasicConsume#ConsumerTag">
            <summary>Sets the stub of IBasicConsume.get_ConsumerTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.ConsumerTagGet">
            <summary>Sets the stub of IBasicConsume.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#Framing#IBasicConsume#Exclusive">
            <summary>Sets the stub of IBasicConsume.get_Exclusive()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.ExclusiveGet">
            <summary>Sets the stub of IBasicConsume.get_Exclusive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#Framing#IBasicConsume#NoAck">
            <summary>Sets the stub of IBasicConsume.get_NoAck()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.NoAckGet">
            <summary>Sets the stub of IBasicConsume.get_NoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#Framing#IBasicConsume#NoLocal">
            <summary>Sets the stub of IBasicConsume.get_NoLocal()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.NoLocalGet">
            <summary>Sets the stub of IBasicConsume.get_NoLocal()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#Framing#IBasicConsume#Nowait">
            <summary>Sets the stub of IBasicConsume.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.NowaitGet">
            <summary>Sets the stub of IBasicConsume.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#Framing#IBasicConsume#Queue">
            <summary>Sets the stub of IBasicConsume.get_Queue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.QueueGet">
            <summary>Sets the stub of IBasicConsume.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.RabbitMQ#Client#Framing#IBasicConsume#Reserved1">
            <summary>Sets the stub of IBasicConsume.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsume.Reserved1Get">
            <summary>Sets the stub of IBasicConsume.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicConsumeOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk.#ctor">
            <summary>Initializes a new instance of type StubIBasicConsumeOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk.RabbitMQ#Client#Framing#IBasicConsumeOk#ConsumerTag">
            <summary>Sets the stub of IBasicConsumeOk.get_ConsumerTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk.ConsumerTagGet">
            <summary>Sets the stub of IBasicConsumeOk.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicConsumeOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicDeliver</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.#ctor">
            <summary>Initializes a new instance of type StubIBasicDeliver</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RabbitMQ#Client#Framing#IBasicDeliver#ConsumerTag">
            <summary>Sets the stub of IBasicDeliver.get_ConsumerTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.ConsumerTagGet">
            <summary>Sets the stub of IBasicDeliver.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RabbitMQ#Client#Framing#IBasicDeliver#DeliveryTag">
            <summary>Sets the stub of IBasicDeliver.get_DeliveryTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.DeliveryTagGet">
            <summary>Sets the stub of IBasicDeliver.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RabbitMQ#Client#Framing#IBasicDeliver#Exchange">
            <summary>Sets the stub of IBasicDeliver.get_Exchange()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.ExchangeGet">
            <summary>Sets the stub of IBasicDeliver.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RabbitMQ#Client#Framing#IBasicDeliver#Redelivered">
            <summary>Sets the stub of IBasicDeliver.get_Redelivered()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RedeliveredGet">
            <summary>Sets the stub of IBasicDeliver.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RabbitMQ#Client#Framing#IBasicDeliver#RoutingKey">
            <summary>Sets the stub of IBasicDeliver.get_RoutingKey()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicDeliver.RoutingKeyGet">
            <summary>Sets the stub of IBasicDeliver.get_RoutingKey()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicGet">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicGet</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.#ctor">
            <summary>Initializes a new instance of type StubIBasicGet</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.RabbitMQ#Client#Framing#IBasicGet#NoAck">
            <summary>Sets the stub of IBasicGet.get_NoAck()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.NoAckGet">
            <summary>Sets the stub of IBasicGet.get_NoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.RabbitMQ#Client#Framing#IBasicGet#Queue">
            <summary>Sets the stub of IBasicGet.get_Queue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.QueueGet">
            <summary>Sets the stub of IBasicGet.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.RabbitMQ#Client#Framing#IBasicGet#Reserved1">
            <summary>Sets the stub of IBasicGet.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGet.Reserved1Get">
            <summary>Sets the stub of IBasicGet.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicGetEmpty</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty.#ctor">
            <summary>Initializes a new instance of type StubIBasicGetEmpty</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty.RabbitMQ#Client#Framing#IBasicGetEmpty#Reserved1">
            <summary>Sets the stub of IBasicGetEmpty.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetEmpty.Reserved1Get">
            <summary>Sets the stub of IBasicGetEmpty.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicGetOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.#ctor">
            <summary>Initializes a new instance of type StubIBasicGetOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RabbitMQ#Client#Framing#IBasicGetOk#DeliveryTag">
            <summary>Sets the stub of IBasicGetOk.get_DeliveryTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.DeliveryTagGet">
            <summary>Sets the stub of IBasicGetOk.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RabbitMQ#Client#Framing#IBasicGetOk#Exchange">
            <summary>Sets the stub of IBasicGetOk.get_Exchange()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.ExchangeGet">
            <summary>Sets the stub of IBasicGetOk.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RabbitMQ#Client#Framing#IBasicGetOk#MessageCount">
            <summary>Sets the stub of IBasicGetOk.get_MessageCount()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.MessageCountGet">
            <summary>Sets the stub of IBasicGetOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RabbitMQ#Client#Framing#IBasicGetOk#Redelivered">
            <summary>Sets the stub of IBasicGetOk.get_Redelivered()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RedeliveredGet">
            <summary>Sets the stub of IBasicGetOk.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RabbitMQ#Client#Framing#IBasicGetOk#RoutingKey">
            <summary>Sets the stub of IBasicGetOk.get_RoutingKey()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicGetOk.RoutingKeyGet">
            <summary>Sets the stub of IBasicGetOk.get_RoutingKey()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicNack">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicNack</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.#ctor">
            <summary>Initializes a new instance of type StubIBasicNack</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.RabbitMQ#Client#Framing#IBasicNack#DeliveryTag">
            <summary>Sets the stub of IBasicNack.get_DeliveryTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.DeliveryTagGet">
            <summary>Sets the stub of IBasicNack.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.RabbitMQ#Client#Framing#IBasicNack#Multiple">
            <summary>Sets the stub of IBasicNack.get_Multiple()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.MultipleGet">
            <summary>Sets the stub of IBasicNack.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.RabbitMQ#Client#Framing#IBasicNack#Requeue">
            <summary>Sets the stub of IBasicNack.get_Requeue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicNack.RequeueGet">
            <summary>Sets the stub of IBasicNack.get_Requeue()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicPublish</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.#ctor">
            <summary>Initializes a new instance of type StubIBasicPublish</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.RabbitMQ#Client#Framing#IBasicPublish#Exchange">
            <summary>Sets the stub of IBasicPublish.get_Exchange()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.ExchangeGet">
            <summary>Sets the stub of IBasicPublish.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.RabbitMQ#Client#Framing#IBasicPublish#Immediate">
            <summary>Sets the stub of IBasicPublish.get_Immediate()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.ImmediateGet">
            <summary>Sets the stub of IBasicPublish.get_Immediate()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.RabbitMQ#Client#Framing#IBasicPublish#Mandatory">
            <summary>Sets the stub of IBasicPublish.get_Mandatory()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.MandatoryGet">
            <summary>Sets the stub of IBasicPublish.get_Mandatory()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.RabbitMQ#Client#Framing#IBasicPublish#Reserved1">
            <summary>Sets the stub of IBasicPublish.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.Reserved1Get">
            <summary>Sets the stub of IBasicPublish.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.RabbitMQ#Client#Framing#IBasicPublish#RoutingKey">
            <summary>Sets the stub of IBasicPublish.get_RoutingKey()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicPublish.RoutingKeyGet">
            <summary>Sets the stub of IBasicPublish.get_RoutingKey()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicQos">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicQos</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.#ctor">
            <summary>Initializes a new instance of type StubIBasicQos</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.RabbitMQ#Client#Framing#IBasicQos#Global">
            <summary>Sets the stub of IBasicQos.get_Global()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.GlobalGet">
            <summary>Sets the stub of IBasicQos.get_Global()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.RabbitMQ#Client#Framing#IBasicQos#PrefetchCount">
            <summary>Sets the stub of IBasicQos.get_PrefetchCount()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.PrefetchCountGet">
            <summary>Sets the stub of IBasicQos.get_PrefetchCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.RabbitMQ#Client#Framing#IBasicQos#PrefetchSize">
            <summary>Sets the stub of IBasicQos.get_PrefetchSize()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.PrefetchSizeGet">
            <summary>Sets the stub of IBasicQos.get_PrefetchSize()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicQos.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicQosOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicQosOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicQosOk.#ctor">
            <summary>Initializes a new instance of type StubIBasicQosOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicQosOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicQosOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicQosOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicQosOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicQosOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicQosOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicRecover</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover.#ctor">
            <summary>Initializes a new instance of type StubIBasicRecover</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover.RabbitMQ#Client#Framing#IBasicRecover#Requeue">
            <summary>Sets the stub of IBasicRecover.get_Requeue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecover.RequeueGet">
            <summary>Sets the stub of IBasicRecover.get_Requeue()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicRecoverAsync</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync.#ctor">
            <summary>Initializes a new instance of type StubIBasicRecoverAsync</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync.RabbitMQ#Client#Framing#IBasicRecoverAsync#Requeue">
            <summary>Sets the stub of IBasicRecoverAsync.get_Requeue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverAsync.RequeueGet">
            <summary>Sets the stub of IBasicRecoverAsync.get_Requeue()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicRecoverOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverOk.#ctor">
            <summary>Initializes a new instance of type StubIBasicRecoverOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicRecoverOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicReject">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicReject</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.#ctor">
            <summary>Initializes a new instance of type StubIBasicReject</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.RabbitMQ#Client#Framing#IBasicReject#DeliveryTag">
            <summary>Sets the stub of IBasicReject.get_DeliveryTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.DeliveryTagGet">
            <summary>Sets the stub of IBasicReject.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.RabbitMQ#Client#Framing#IBasicReject#Requeue">
            <summary>Sets the stub of IBasicReject.get_Requeue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReject.RequeueGet">
            <summary>Sets the stub of IBasicReject.get_Requeue()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn">
            <summary>Stub type of RabbitMQ.Client.Framing.IBasicReturn</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.#ctor">
            <summary>Initializes a new instance of type StubIBasicReturn</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.RabbitMQ#Client#Framing#IBasicReturn#Exchange">
            <summary>Sets the stub of IBasicReturn.get_Exchange()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.ExchangeGet">
            <summary>Sets the stub of IBasicReturn.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.RabbitMQ#Client#Framing#IBasicReturn#ReplyCode">
            <summary>Sets the stub of IBasicReturn.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.ReplyCodeGet">
            <summary>Sets the stub of IBasicReturn.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.RabbitMQ#Client#Framing#IBasicReturn#ReplyText">
            <summary>Sets the stub of IBasicReturn.get_ReplyText()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.ReplyTextGet">
            <summary>Sets the stub of IBasicReturn.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.RabbitMQ#Client#Framing#IBasicReturn#RoutingKey">
            <summary>Sets the stub of IBasicReturn.get_RoutingKey()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIBasicReturn.RoutingKeyGet">
            <summary>Sets the stub of IBasicReturn.get_RoutingKey()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIChannelClose">
            <summary>Stub type of RabbitMQ.Client.Framing.IChannelClose</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.#ctor">
            <summary>Initializes a new instance of type StubIChannelClose</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.RabbitMQ#Client#Framing#IChannelClose#ClassId">
            <summary>Sets the stub of IChannelClose.get_ClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.ClassIdGet">
            <summary>Sets the stub of IChannelClose.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.RabbitMQ#Client#Framing#IChannelClose#MethodId">
            <summary>Sets the stub of IChannelClose.get_MethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.MethodIdGet">
            <summary>Sets the stub of IChannelClose.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.RabbitMQ#Client#Framing#IChannelClose#ReplyCode">
            <summary>Sets the stub of IChannelClose.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.ReplyCodeGet">
            <summary>Sets the stub of IChannelClose.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.RabbitMQ#Client#Framing#IChannelClose#ReplyText">
            <summary>Sets the stub of IChannelClose.get_ReplyText()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelClose.ReplyTextGet">
            <summary>Sets the stub of IChannelClose.get_ReplyText()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIChannelCloseOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IChannelCloseOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIChannelCloseOk.#ctor">
            <summary>Initializes a new instance of type StubIChannelCloseOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelCloseOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelCloseOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelCloseOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelCloseOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelCloseOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelCloseOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow">
            <summary>Stub type of RabbitMQ.Client.Framing.IChannelFlow</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow.#ctor">
            <summary>Initializes a new instance of type StubIChannelFlow</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow.RabbitMQ#Client#Framing#IChannelFlow#Active">
            <summary>Sets the stub of IChannelFlow.get_Active()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow.ActiveGet">
            <summary>Sets the stub of IChannelFlow.get_Active()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelFlow.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IChannelFlowOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk.#ctor">
            <summary>Initializes a new instance of type StubIChannelFlowOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk.RabbitMQ#Client#Framing#IChannelFlowOk#Active">
            <summary>Sets the stub of IChannelFlowOk.get_Active()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk.ActiveGet">
            <summary>Sets the stub of IChannelFlowOk.get_Active()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelFlowOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen">
            <summary>Stub type of RabbitMQ.Client.Framing.IChannelOpen</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen.#ctor">
            <summary>Initializes a new instance of type StubIChannelOpen</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen.RabbitMQ#Client#Framing#IChannelOpen#Reserved1">
            <summary>Sets the stub of IChannelOpen.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelOpen.Reserved1Get">
            <summary>Sets the stub of IChannelOpen.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IChannelOpenOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk.#ctor">
            <summary>Initializes a new instance of type StubIChannelOpenOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk.RabbitMQ#Client#Framing#IChannelOpenOk#Reserved1">
            <summary>Sets the stub of IChannelOpenOk.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIChannelOpenOk.Reserved1Get">
            <summary>Sets the stub of IChannelOpenOk.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect">
            <summary>Stub type of RabbitMQ.Client.Framing.IConfirmSelect</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect.#ctor">
            <summary>Initializes a new instance of type StubIConfirmSelect</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect.RabbitMQ#Client#Framing#IConfirmSelect#Nowait">
            <summary>Sets the stub of IConfirmSelect.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect.NowaitGet">
            <summary>Sets the stub of IConfirmSelect.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelect.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelectOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IConfirmSelectOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelectOk.#ctor">
            <summary>Initializes a new instance of type StubIConfirmSelectOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelectOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelectOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelectOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelectOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelectOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConfirmSelectOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionBlocked</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked.#ctor">
            <summary>Initializes a new instance of type StubIConnectionBlocked</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked.RabbitMQ#Client#Framing#IConnectionBlocked#Reason">
            <summary>Sets the stub of IConnectionBlocked.get_Reason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionBlocked.ReasonGet">
            <summary>Sets the stub of IConnectionBlocked.get_Reason()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionClose</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.#ctor">
            <summary>Initializes a new instance of type StubIConnectionClose</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.RabbitMQ#Client#Framing#IConnectionClose#ClassId">
            <summary>Sets the stub of IConnectionClose.get_ClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.ClassIdGet">
            <summary>Sets the stub of IConnectionClose.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.RabbitMQ#Client#Framing#IConnectionClose#MethodId">
            <summary>Sets the stub of IConnectionClose.get_MethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.MethodIdGet">
            <summary>Sets the stub of IConnectionClose.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.RabbitMQ#Client#Framing#IConnectionClose#ReplyCode">
            <summary>Sets the stub of IConnectionClose.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.ReplyCodeGet">
            <summary>Sets the stub of IConnectionClose.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.RabbitMQ#Client#Framing#IConnectionClose#ReplyText">
            <summary>Sets the stub of IConnectionClose.get_ReplyText()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionClose.ReplyTextGet">
            <summary>Sets the stub of IConnectionClose.get_ReplyText()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionCloseOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionCloseOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionCloseOk.#ctor">
            <summary>Initializes a new instance of type StubIConnectionCloseOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionCloseOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionCloseOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionCloseOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionCloseOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionCloseOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionCloseOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionOpen</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.#ctor">
            <summary>Initializes a new instance of type StubIConnectionOpen</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.RabbitMQ#Client#Framing#IConnectionOpen#Reserved1">
            <summary>Sets the stub of IConnectionOpen.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.Reserved1Get">
            <summary>Sets the stub of IConnectionOpen.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.RabbitMQ#Client#Framing#IConnectionOpen#Reserved2">
            <summary>Sets the stub of IConnectionOpen.get_Reserved2()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.Reserved2Get">
            <summary>Sets the stub of IConnectionOpen.get_Reserved2()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.RabbitMQ#Client#Framing#IConnectionOpen#VirtualHost">
            <summary>Sets the stub of IConnectionOpen.get_VirtualHost()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpen.VirtualHostGet">
            <summary>Sets the stub of IConnectionOpen.get_VirtualHost()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionOpenOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk.#ctor">
            <summary>Initializes a new instance of type StubIConnectionOpenOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk.RabbitMQ#Client#Framing#IConnectionOpenOk#Reserved1">
            <summary>Sets the stub of IConnectionOpenOk.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionOpenOk.Reserved1Get">
            <summary>Sets the stub of IConnectionOpenOk.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionSecure</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure.#ctor">
            <summary>Initializes a new instance of type StubIConnectionSecure</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure.RabbitMQ#Client#Framing#IConnectionSecure#Challenge">
            <summary>Sets the stub of IConnectionSecure.get_Challenge()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure.ChallengeGet">
            <summary>Sets the stub of IConnectionSecure.get_Challenge()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecure.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionSecureOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk.#ctor">
            <summary>Initializes a new instance of type StubIConnectionSecureOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk.RabbitMQ#Client#Framing#IConnectionSecureOk#Response">
            <summary>Sets the stub of IConnectionSecureOk.get_Response()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionSecureOk.ResponseGet">
            <summary>Sets the stub of IConnectionSecureOk.get_Response()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionStart</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.#ctor">
            <summary>Initializes a new instance of type StubIConnectionStart</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.RabbitMQ#Client#Framing#IConnectionStart#Locales">
            <summary>Sets the stub of IConnectionStart.get_Locales()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.LocalesGet">
            <summary>Sets the stub of IConnectionStart.get_Locales()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.RabbitMQ#Client#Framing#IConnectionStart#Mechanisms">
            <summary>Sets the stub of IConnectionStart.get_Mechanisms()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.MechanismsGet">
            <summary>Sets the stub of IConnectionStart.get_Mechanisms()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.RabbitMQ#Client#Framing#IConnectionStart#ServerProperties">
            <summary>Sets the stub of IConnectionStart.get_ServerProperties()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.ServerPropertiesGet">
            <summary>Sets the stub of IConnectionStart.get_ServerProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.RabbitMQ#Client#Framing#IConnectionStart#VersionMajor">
            <summary>Sets the stub of IConnectionStart.get_VersionMajor()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.VersionMajorGet">
            <summary>Sets the stub of IConnectionStart.get_VersionMajor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.RabbitMQ#Client#Framing#IConnectionStart#VersionMinor">
            <summary>Sets the stub of IConnectionStart.get_VersionMinor()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStart.VersionMinorGet">
            <summary>Sets the stub of IConnectionStart.get_VersionMinor()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionStartOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.#ctor">
            <summary>Initializes a new instance of type StubIConnectionStartOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.RabbitMQ#Client#Framing#IConnectionStartOk#ClientProperties">
            <summary>Sets the stub of IConnectionStartOk.get_ClientProperties()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.ClientPropertiesGet">
            <summary>Sets the stub of IConnectionStartOk.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.RabbitMQ#Client#Framing#IConnectionStartOk#Locale">
            <summary>Sets the stub of IConnectionStartOk.get_Locale()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.LocaleGet">
            <summary>Sets the stub of IConnectionStartOk.get_Locale()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.RabbitMQ#Client#Framing#IConnectionStartOk#Mechanism">
            <summary>Sets the stub of IConnectionStartOk.get_Mechanism()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.MechanismGet">
            <summary>Sets the stub of IConnectionStartOk.get_Mechanism()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.RabbitMQ#Client#Framing#IConnectionStartOk#Response">
            <summary>Sets the stub of IConnectionStartOk.get_Response()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionStartOk.ResponseGet">
            <summary>Sets the stub of IConnectionStartOk.get_Response()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionTune</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.#ctor">
            <summary>Initializes a new instance of type StubIConnectionTune</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.RabbitMQ#Client#Framing#IConnectionTune#ChannelMax">
            <summary>Sets the stub of IConnectionTune.get_ChannelMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.ChannelMaxGet">
            <summary>Sets the stub of IConnectionTune.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.RabbitMQ#Client#Framing#IConnectionTune#FrameMax">
            <summary>Sets the stub of IConnectionTune.get_FrameMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.FrameMaxGet">
            <summary>Sets the stub of IConnectionTune.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.RabbitMQ#Client#Framing#IConnectionTune#Heartbeat">
            <summary>Sets the stub of IConnectionTune.get_Heartbeat()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.HeartbeatGet">
            <summary>Sets the stub of IConnectionTune.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTune.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionTuneOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.#ctor">
            <summary>Initializes a new instance of type StubIConnectionTuneOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.RabbitMQ#Client#Framing#IConnectionTuneOk#ChannelMax">
            <summary>Sets the stub of IConnectionTuneOk.get_ChannelMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.ChannelMaxGet">
            <summary>Sets the stub of IConnectionTuneOk.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.RabbitMQ#Client#Framing#IConnectionTuneOk#FrameMax">
            <summary>Sets the stub of IConnectionTuneOk.get_FrameMax()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.FrameMaxGet">
            <summary>Sets the stub of IConnectionTuneOk.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.RabbitMQ#Client#Framing#IConnectionTuneOk#Heartbeat">
            <summary>Sets the stub of IConnectionTuneOk.get_Heartbeat()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.HeartbeatGet">
            <summary>Sets the stub of IConnectionTuneOk.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionTuneOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIConnectionUnblocked">
            <summary>Stub type of RabbitMQ.Client.Framing.IConnectionUnblocked</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIConnectionUnblocked.#ctor">
            <summary>Initializes a new instance of type StubIConnectionUnblocked</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionUnblocked.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionUnblocked.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionUnblocked.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionUnblocked.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIConnectionUnblocked.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIConnectionUnblocked.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind">
            <summary>Stub type of RabbitMQ.Client.Framing.IExchangeBind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.#ctor">
            <summary>Initializes a new instance of type StubIExchangeBind</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RabbitMQ#Client#Framing#IExchangeBind#Arguments">
            <summary>Sets the stub of IExchangeBind.get_Arguments()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.ArgumentsGet">
            <summary>Sets the stub of IExchangeBind.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RabbitMQ#Client#Framing#IExchangeBind#Destination">
            <summary>Sets the stub of IExchangeBind.get_Destination()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.DestinationGet">
            <summary>Sets the stub of IExchangeBind.get_Destination()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RabbitMQ#Client#Framing#IExchangeBind#Nowait">
            <summary>Sets the stub of IExchangeBind.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.NowaitGet">
            <summary>Sets the stub of IExchangeBind.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RabbitMQ#Client#Framing#IExchangeBind#Reserved1">
            <summary>Sets the stub of IExchangeBind.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.Reserved1Get">
            <summary>Sets the stub of IExchangeBind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RabbitMQ#Client#Framing#IExchangeBind#RoutingKey">
            <summary>Sets the stub of IExchangeBind.get_RoutingKey()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RoutingKeyGet">
            <summary>Sets the stub of IExchangeBind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.RabbitMQ#Client#Framing#IExchangeBind#Source">
            <summary>Sets the stub of IExchangeBind.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBind.SourceGet">
            <summary>Sets the stub of IExchangeBind.get_Source()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIExchangeBindOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IExchangeBindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIExchangeBindOk.#ctor">
            <summary>Initializes a new instance of type StubIExchangeBindOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBindOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBindOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBindOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBindOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeBindOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeBindOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare">
            <summary>Stub type of RabbitMQ.Client.Framing.IExchangeDeclare</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.#ctor">
            <summary>Initializes a new instance of type StubIExchangeDeclare</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#Framing#IExchangeDeclare#Arguments">
            <summary>Sets the stub of IExchangeDeclare.get_Arguments()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.ArgumentsGet">
            <summary>Sets the stub of IExchangeDeclare.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#Framing#IExchangeDeclare#AutoDelete">
            <summary>Sets the stub of IExchangeDeclare.get_AutoDelete()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.AutoDeleteGet">
            <summary>Sets the stub of IExchangeDeclare.get_AutoDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#Framing#IExchangeDeclare#Durable">
            <summary>Sets the stub of IExchangeDeclare.get_Durable()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.DurableGet">
            <summary>Sets the stub of IExchangeDeclare.get_Durable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#Framing#IExchangeDeclare#Exchange">
            <summary>Sets the stub of IExchangeDeclare.get_Exchange()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.ExchangeGet">
            <summary>Sets the stub of IExchangeDeclare.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#Framing#IExchangeDeclare#Internal">
            <summary>Sets the stub of IExchangeDeclare.get_Internal()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.InternalGet">
            <summary>Sets the stub of IExchangeDeclare.get_Internal()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#Framing#IExchangeDeclare#Nowait">
            <summary>Sets the stub of IExchangeDeclare.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.NowaitGet">
            <summary>Sets the stub of IExchangeDeclare.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#Framing#IExchangeDeclare#Passive">
            <summary>Sets the stub of IExchangeDeclare.get_Passive()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.PassiveGet">
            <summary>Sets the stub of IExchangeDeclare.get_Passive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#Framing#IExchangeDeclare#Reserved1">
            <summary>Sets the stub of IExchangeDeclare.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.Reserved1Get">
            <summary>Sets the stub of IExchangeDeclare.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.RabbitMQ#Client#Framing#IExchangeDeclare#Type">
            <summary>Sets the stub of IExchangeDeclare.get_Type()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclare.TypeGet">
            <summary>Sets the stub of IExchangeDeclare.get_Type()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclareOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IExchangeDeclareOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclareOk.#ctor">
            <summary>Initializes a new instance of type StubIExchangeDeclareOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclareOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclareOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclareOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclareOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclareOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeclareOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete">
            <summary>Stub type of RabbitMQ.Client.Framing.IExchangeDelete</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.#ctor">
            <summary>Initializes a new instance of type StubIExchangeDelete</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.RabbitMQ#Client#Framing#IExchangeDelete#Exchange">
            <summary>Sets the stub of IExchangeDelete.get_Exchange()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.ExchangeGet">
            <summary>Sets the stub of IExchangeDelete.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.RabbitMQ#Client#Framing#IExchangeDelete#IfUnused">
            <summary>Sets the stub of IExchangeDelete.get_IfUnused()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.IfUnusedGet">
            <summary>Sets the stub of IExchangeDelete.get_IfUnused()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.RabbitMQ#Client#Framing#IExchangeDelete#Nowait">
            <summary>Sets the stub of IExchangeDelete.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.NowaitGet">
            <summary>Sets the stub of IExchangeDelete.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.RabbitMQ#Client#Framing#IExchangeDelete#Reserved1">
            <summary>Sets the stub of IExchangeDelete.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDelete.Reserved1Get">
            <summary>Sets the stub of IExchangeDelete.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeleteOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IExchangeDeleteOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeleteOk.#ctor">
            <summary>Initializes a new instance of type StubIExchangeDeleteOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeleteOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeleteOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeleteOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeleteOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeleteOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeDeleteOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind">
            <summary>Stub type of RabbitMQ.Client.Framing.IExchangeUnbind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.#ctor">
            <summary>Initializes a new instance of type StubIExchangeUnbind</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RabbitMQ#Client#Framing#IExchangeUnbind#Arguments">
            <summary>Sets the stub of IExchangeUnbind.get_Arguments()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.ArgumentsGet">
            <summary>Sets the stub of IExchangeUnbind.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RabbitMQ#Client#Framing#IExchangeUnbind#Destination">
            <summary>Sets the stub of IExchangeUnbind.get_Destination()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.DestinationGet">
            <summary>Sets the stub of IExchangeUnbind.get_Destination()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RabbitMQ#Client#Framing#IExchangeUnbind#Nowait">
            <summary>Sets the stub of IExchangeUnbind.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.NowaitGet">
            <summary>Sets the stub of IExchangeUnbind.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RabbitMQ#Client#Framing#IExchangeUnbind#Reserved1">
            <summary>Sets the stub of IExchangeUnbind.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.Reserved1Get">
            <summary>Sets the stub of IExchangeUnbind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RabbitMQ#Client#Framing#IExchangeUnbind#RoutingKey">
            <summary>Sets the stub of IExchangeUnbind.get_RoutingKey()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RoutingKeyGet">
            <summary>Sets the stub of IExchangeUnbind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.RabbitMQ#Client#Framing#IExchangeUnbind#Source">
            <summary>Sets the stub of IExchangeUnbind.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbind.SourceGet">
            <summary>Sets the stub of IExchangeUnbind.get_Source()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbindOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IExchangeUnbindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbindOk.#ctor">
            <summary>Initializes a new instance of type StubIExchangeUnbindOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbindOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbindOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbindOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbindOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbindOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIExchangeUnbindOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueueBind">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueueBind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.#ctor">
            <summary>Initializes a new instance of type StubIQueueBind</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RabbitMQ#Client#Framing#IQueueBind#Arguments">
            <summary>Sets the stub of IQueueBind.get_Arguments()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.ArgumentsGet">
            <summary>Sets the stub of IQueueBind.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RabbitMQ#Client#Framing#IQueueBind#Exchange">
            <summary>Sets the stub of IQueueBind.get_Exchange()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.ExchangeGet">
            <summary>Sets the stub of IQueueBind.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RabbitMQ#Client#Framing#IQueueBind#Nowait">
            <summary>Sets the stub of IQueueBind.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.NowaitGet">
            <summary>Sets the stub of IQueueBind.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RabbitMQ#Client#Framing#IQueueBind#Queue">
            <summary>Sets the stub of IQueueBind.get_Queue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.QueueGet">
            <summary>Sets the stub of IQueueBind.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RabbitMQ#Client#Framing#IQueueBind#Reserved1">
            <summary>Sets the stub of IQueueBind.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.Reserved1Get">
            <summary>Sets the stub of IQueueBind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RabbitMQ#Client#Framing#IQueueBind#RoutingKey">
            <summary>Sets the stub of IQueueBind.get_RoutingKey()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBind.RoutingKeyGet">
            <summary>Sets the stub of IQueueBind.get_RoutingKey()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueueBindOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueueBindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueueBindOk.#ctor">
            <summary>Initializes a new instance of type StubIQueueBindOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBindOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBindOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBindOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBindOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueBindOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueBindOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueueDeclare</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.#ctor">
            <summary>Initializes a new instance of type StubIQueueDeclare</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#Framing#IQueueDeclare#Arguments">
            <summary>Sets the stub of IQueueDeclare.get_Arguments()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.ArgumentsGet">
            <summary>Sets the stub of IQueueDeclare.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#Framing#IQueueDeclare#AutoDelete">
            <summary>Sets the stub of IQueueDeclare.get_AutoDelete()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.AutoDeleteGet">
            <summary>Sets the stub of IQueueDeclare.get_AutoDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#Framing#IQueueDeclare#Durable">
            <summary>Sets the stub of IQueueDeclare.get_Durable()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.DurableGet">
            <summary>Sets the stub of IQueueDeclare.get_Durable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#Framing#IQueueDeclare#Exclusive">
            <summary>Sets the stub of IQueueDeclare.get_Exclusive()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.ExclusiveGet">
            <summary>Sets the stub of IQueueDeclare.get_Exclusive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#Framing#IQueueDeclare#Nowait">
            <summary>Sets the stub of IQueueDeclare.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.NowaitGet">
            <summary>Sets the stub of IQueueDeclare.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#Framing#IQueueDeclare#Passive">
            <summary>Sets the stub of IQueueDeclare.get_Passive()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.PassiveGet">
            <summary>Sets the stub of IQueueDeclare.get_Passive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#Framing#IQueueDeclare#Queue">
            <summary>Sets the stub of IQueueDeclare.get_Queue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.QueueGet">
            <summary>Sets the stub of IQueueDeclare.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.RabbitMQ#Client#Framing#IQueueDeclare#Reserved1">
            <summary>Sets the stub of IQueueDeclare.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclare.Reserved1Get">
            <summary>Sets the stub of IQueueDeclare.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueueDeclareOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.#ctor">
            <summary>Initializes a new instance of type StubIQueueDeclareOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.RabbitMQ#Client#Framing#IQueueDeclareOk#ConsumerCount">
            <summary>Sets the stub of IQueueDeclareOk.get_ConsumerCount()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.ConsumerCountGet">
            <summary>Sets the stub of IQueueDeclareOk.get_ConsumerCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.RabbitMQ#Client#Framing#IQueueDeclareOk#MessageCount">
            <summary>Sets the stub of IQueueDeclareOk.get_MessageCount()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.MessageCountGet">
            <summary>Sets the stub of IQueueDeclareOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.RabbitMQ#Client#Framing#IQueueDeclareOk#Queue">
            <summary>Sets the stub of IQueueDeclareOk.get_Queue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeclareOk.QueueGet">
            <summary>Sets the stub of IQueueDeclareOk.get_Queue()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueueDelete</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.#ctor">
            <summary>Initializes a new instance of type StubIQueueDelete</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.RabbitMQ#Client#Framing#IQueueDelete#IfEmpty">
            <summary>Sets the stub of IQueueDelete.get_IfEmpty()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.IfEmptyGet">
            <summary>Sets the stub of IQueueDelete.get_IfEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.RabbitMQ#Client#Framing#IQueueDelete#IfUnused">
            <summary>Sets the stub of IQueueDelete.get_IfUnused()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.IfUnusedGet">
            <summary>Sets the stub of IQueueDelete.get_IfUnused()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.RabbitMQ#Client#Framing#IQueueDelete#Nowait">
            <summary>Sets the stub of IQueueDelete.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.NowaitGet">
            <summary>Sets the stub of IQueueDelete.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.RabbitMQ#Client#Framing#IQueueDelete#Queue">
            <summary>Sets the stub of IQueueDelete.get_Queue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.QueueGet">
            <summary>Sets the stub of IQueueDelete.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.RabbitMQ#Client#Framing#IQueueDelete#Reserved1">
            <summary>Sets the stub of IQueueDelete.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDelete.Reserved1Get">
            <summary>Sets the stub of IQueueDelete.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueueDeleteOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk.#ctor">
            <summary>Initializes a new instance of type StubIQueueDeleteOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk.RabbitMQ#Client#Framing#IQueueDeleteOk#MessageCount">
            <summary>Sets the stub of IQueueDeleteOk.get_MessageCount()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk.MessageCountGet">
            <summary>Sets the stub of IQueueDeleteOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueDeleteOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueuePurge</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.#ctor">
            <summary>Initializes a new instance of type StubIQueuePurge</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.RabbitMQ#Client#Framing#IQueuePurge#Nowait">
            <summary>Sets the stub of IQueuePurge.get_Nowait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.NowaitGet">
            <summary>Sets the stub of IQueuePurge.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.RabbitMQ#Client#Framing#IQueuePurge#Queue">
            <summary>Sets the stub of IQueuePurge.get_Queue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.QueueGet">
            <summary>Sets the stub of IQueuePurge.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.RabbitMQ#Client#Framing#IQueuePurge#Reserved1">
            <summary>Sets the stub of IQueuePurge.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurge.Reserved1Get">
            <summary>Sets the stub of IQueuePurge.get_Reserved1()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueuePurgeOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk.#ctor">
            <summary>Initializes a new instance of type StubIQueuePurgeOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk.RabbitMQ#Client#Framing#IQueuePurgeOk#MessageCount">
            <summary>Sets the stub of IQueuePurgeOk.get_MessageCount()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk.MessageCountGet">
            <summary>Sets the stub of IQueuePurgeOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueuePurgeOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueueUnbind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.#ctor">
            <summary>Initializes a new instance of type StubIQueueUnbind</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.RabbitMQ#Client#Framing#IQueueUnbind#Arguments">
            <summary>Sets the stub of IQueueUnbind.get_Arguments()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.ArgumentsGet">
            <summary>Sets the stub of IQueueUnbind.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.RabbitMQ#Client#Framing#IQueueUnbind#Exchange">
            <summary>Sets the stub of IQueueUnbind.get_Exchange()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.ExchangeGet">
            <summary>Sets the stub of IQueueUnbind.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.RabbitMQ#Client#Framing#IQueueUnbind#Queue">
            <summary>Sets the stub of IQueueUnbind.get_Queue()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.QueueGet">
            <summary>Sets the stub of IQueueUnbind.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.RabbitMQ#Client#Framing#IQueueUnbind#Reserved1">
            <summary>Sets the stub of IQueueUnbind.get_Reserved1()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.Reserved1Get">
            <summary>Sets the stub of IQueueUnbind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.RabbitMQ#Client#Framing#IQueueUnbind#RoutingKey">
            <summary>Sets the stub of IQueueUnbind.get_RoutingKey()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbind.RoutingKeyGet">
            <summary>Sets the stub of IQueueUnbind.get_RoutingKey()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbindOk">
            <summary>Stub type of RabbitMQ.Client.Framing.IQueueUnbindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbindOk.#ctor">
            <summary>Initializes a new instance of type StubIQueueUnbindOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbindOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbindOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbindOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbindOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbindOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubIQueueUnbindOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubITxCommit">
            <summary>Stub type of RabbitMQ.Client.Framing.ITxCommit</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubITxCommit.#ctor">
            <summary>Initializes a new instance of type StubITxCommit</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxCommit.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxCommit.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxCommit.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxCommit.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxCommit.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxCommit.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubITxCommitOk">
            <summary>Stub type of RabbitMQ.Client.Framing.ITxCommitOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubITxCommitOk.#ctor">
            <summary>Initializes a new instance of type StubITxCommitOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxCommitOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxCommitOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxCommitOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxCommitOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxCommitOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxCommitOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubITxRollback">
            <summary>Stub type of RabbitMQ.Client.Framing.ITxRollback</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubITxRollback.#ctor">
            <summary>Initializes a new instance of type StubITxRollback</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxRollback.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxRollback.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxRollback.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxRollback.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxRollback.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxRollback.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubITxRollbackOk">
            <summary>Stub type of RabbitMQ.Client.Framing.ITxRollbackOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubITxRollbackOk.#ctor">
            <summary>Initializes a new instance of type StubITxRollbackOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxRollbackOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxRollbackOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxRollbackOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxRollbackOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxRollbackOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxRollbackOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubITxSelect">
            <summary>Stub type of RabbitMQ.Client.Framing.ITxSelect</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubITxSelect.#ctor">
            <summary>Initializes a new instance of type StubITxSelect</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxSelect.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxSelect.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxSelect.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxSelect.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxSelect.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxSelect.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubITxSelectOk">
            <summary>Stub type of RabbitMQ.Client.Framing.ITxSelectOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubITxSelectOk.#ctor">
            <summary>Initializes a new instance of type StubITxSelectOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxSelectOk.RabbitMQ#Client#IMethod#ProtocolClassId">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxSelectOk.ProtocolClassIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxSelectOk.RabbitMQ#Client#IMethod#ProtocolMethodId">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxSelectOk.ProtocolMethodIdGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubITxSelectOk.RabbitMQ#Client#IMethod#ProtocolMethodName">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubITxSelectOk.ProtocolMethodNameGet">
            <summary>Sets the stub of IMethod.get_ProtocolMethodName()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Fakes.StubProtocol">
            <summary>Stub type of RabbitMQ.Client.Framing.Protocol</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubProtocol.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubProtocol.ApiName">
            <summary>Sets the stub of Protocol.get_ApiName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.ApiNameGet">
            <summary>Sets the stub of Protocol.get_ApiName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubProtocol.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubProtocol.DecodeContentHeaderFrom(RabbitMQ.Util.NetworkBinaryReader)">
            <summary>Sets the stub of Protocol.DecodeContentHeaderFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.DecodeContentHeaderFromNetworkBinaryReader">
            <summary>Sets the stub of Protocol.DecodeContentHeaderFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubProtocol.DecodeMethodFrom(RabbitMQ.Util.NetworkBinaryReader)">
            <summary>Sets the stub of Protocol.DecodeMethodFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.DecodeMethodFromNetworkBinaryReader">
            <summary>Sets the stub of Protocol.DecodeMethodFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubProtocol.DefaultPort">
            <summary>Sets the stub of Protocol.get_DefaultPort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.DefaultPortGet">
            <summary>Sets the stub of Protocol.get_DefaultPort()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubProtocol.Equals(System.Object)">
            <summary>Sets the stub of ProtocolBase.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.EqualsObject">
            <summary>Sets the stub of ProtocolBase.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubProtocol.GetHashCode">
            <summary>Sets the stub of ProtocolBase.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.GetHashCode01">
            <summary>Sets the stub of ProtocolBase.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubProtocol.InitializeStub">
            <summary>Initializes a new instance of type StubProtocol</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubProtocol.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubProtocol.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubProtocol.MajorVersion">
            <summary>Sets the stub of Protocol.get_MajorVersion()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.MajorVersionGet">
            <summary>Sets the stub of Protocol.get_MajorVersion()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubProtocol.MinorVersion">
            <summary>Sets the stub of Protocol.get_MinorVersion()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.MinorVersionGet">
            <summary>Sets the stub of Protocol.get_MinorVersion()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Fakes.StubProtocol.Revision">
            <summary>Sets the stub of Protocol.get_Revision()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.RevisionGet">
            <summary>Sets the stub of Protocol.get_Revision()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Fakes.StubProtocol.ToString">
            <summary>Sets the stub of ProtocolBase.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Fakes.StubProtocol.ToString01">
            <summary>Sets the stub of ProtocolBase.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.AutorecoveringConnection</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.#ctor(RabbitMQ.Client.Framing.Impl.AutorecoveringConnection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.Abort">
            <summary>Sets the shim of AutorecoveringConnection.Abort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AbortInt32">
            <summary>Sets the shim of AutorecoveringConnection.Abort(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AbortUInt16String">
            <summary>Sets the shim of AutorecoveringConnection.Abort(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AbortUInt16StringInt32">
            <summary>Sets the shim of AutorecoveringConnection.Abort(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.Abort">
            <summary>Sets the shim of AutorecoveringConnection.Abort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.AbortInt32">
            <summary>Sets the shim of AutorecoveringConnection.Abort(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.AbortUInt16String">
            <summary>Sets the shim of AutorecoveringConnection.Abort(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.AbortUInt16StringInt32">
            <summary>Sets the shim of AutorecoveringConnection.Abort(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.AutoCloseGet">
            <summary>Sets the shim of AutorecoveringConnection.get_AutoClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.AutoCloseSetBoolean">
            <summary>Sets the shim of AutorecoveringConnection.set_AutoClose(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.BeginAutomaticRecovery">
            <summary>Sets the shim of AutorecoveringConnection.BeginAutomaticRecovery()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.CallbackExceptionAddEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.CallbackExceptionRemoveEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ChannelMaxGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ClientPropertiesGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ClientProvidedNameGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ClientProvidedName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ClientProvidedNameSetString">
            <summary>Sets the shim of AutorecoveringConnection.set_ClientProvidedName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.Close">
            <summary>Sets the shim of AutorecoveringConnection.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.CloseInt32">
            <summary>Sets the shim of AutorecoveringConnection.Close(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.CloseReasonGet">
            <summary>Sets the shim of AutorecoveringConnection.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.CloseShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.Close(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.CloseUInt16String">
            <summary>Sets the shim of AutorecoveringConnection.Close(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.CloseUInt16StringInt32">
            <summary>Sets the shim of AutorecoveringConnection.Close(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConnectionBlockedAddEventHandlerOfConnectionBlockedEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConnectionBlocked(EventHandler`1&lt;ConnectionBlockedEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConnectionBlockedRemoveEventHandlerOfConnectionBlockedEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConnectionBlocked(EventHandler`1&lt;ConnectionBlockedEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConnectionRecoveryErrorAddEventHandlerOfConnectionRecoveryErrorEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConnectionRecoveryError(EventHandler`1&lt;ConnectionRecoveryErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConnectionRecoveryErrorRemoveEventHandlerOfConnectionRecoveryErrorEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConnectionRecoveryError(EventHandler`1&lt;ConnectionRecoveryErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConnectionShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConnectionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConnectionShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConnectionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConnectionUnblockedAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConnectionUnblocked(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConnectionUnblockedRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConnectionUnblocked(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConsumerTagChangeAfterRecoveryAddEventHandlerOfConsumerTagChangedAfterRecoveryEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConsumerTagChangeAfterRecovery(EventHandler`1&lt;ConsumerTagChangedAfterRecoveryEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConsumerTagChangeAfterRecoveryRemoveEventHandlerOfConsumerTagChangedAfterRecoveryEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConsumerTagChangeAfterRecovery(EventHandler`1&lt;ConsumerTagChangedAfterRecoveryEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ConsumerWorkServiceGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ConsumerWorkService()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.CreateModel">
            <summary>Sets the shim of AutorecoveringConnection.CreateModel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.CreateNonRecoveringModel">
            <summary>Sets the shim of AutorecoveringConnection.CreateNonRecoveringModel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.DeleteRecordedBindingRecordedBinding">
            <summary>Sets the shim of AutorecoveringConnection.DeleteRecordedBinding(RecordedBinding rb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.DeleteRecordedConsumerString">
            <summary>Sets the shim of AutorecoveringConnection.DeleteRecordedConsumer(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.DeleteRecordedExchangeString">
            <summary>Sets the shim of AutorecoveringConnection.DeleteRecordedExchange(String name)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.DeleteRecordedQueueString">
            <summary>Sets the shim of AutorecoveringConnection.DeleteRecordedQueue(String name)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.EndpointGet">
            <summary>Sets the shim of AutorecoveringConnection.get_Endpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.EnsureIsOpen">
            <summary>Sets the shim of AutorecoveringConnection.EnsureIsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.FrameMaxGet">
            <summary>Sets the shim of AutorecoveringConnection.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.HandleConnectionBlockedString">
            <summary>Sets the shim of AutorecoveringConnection.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.HandleConnectionUnblocked">
            <summary>Sets the shim of AutorecoveringConnection.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.HandleTopologyRecoveryExceptionTopologyRecoveryException">
            <summary>Sets the shim of AutorecoveringConnection.HandleTopologyRecoveryException(TopologyRecoveryException e)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.HasMoreConsumersOnQueueICollectionOfRecordedConsumerString">
            <summary>Sets the shim of AutorecoveringConnection.HasMoreConsumersOnQueue(ICollection`1&lt;RecordedConsumer&gt; consumers, String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.HasMoreDestinationsBoundToExchangeICollectionOfRecordedBindingString">
            <summary>Sets the shim of AutorecoveringConnection.HasMoreDestinationsBoundToExchange(ICollection`1&lt;RecordedBinding&gt; bindings, String exchange)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.HeartbeatGet">
            <summary>Sets the shim of AutorecoveringConnection.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.Init">
            <summary>Sets the shim of AutorecoveringConnection.Init()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.InitIEndpointResolver">
            <summary>Sets the shim of AutorecoveringConnection.Init(IEndpointResolver endpoints)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.InitIFrameHandler">
            <summary>Sets the shim of AutorecoveringConnection.Init(IFrameHandler fh)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.IsOpenGet">
            <summary>Sets the shim of AutorecoveringConnection.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.KnownHostsGet">
            <summary>Sets the shim of AutorecoveringConnection.get_KnownHosts()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.KnownHostsSetAmqpTcpEndpointArray">
            <summary>Sets the shim of AutorecoveringConnection.set_KnownHosts(AmqpTcpEndpoint[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.LocalPortGet">
            <summary>Sets the shim of AutorecoveringConnection.get_LocalPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ManuallyClosedGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ManuallyClosed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ManuallyClosedSetBoolean">
            <summary>Sets the shim of AutorecoveringConnection.set_ManuallyClosed(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.MaybeDeleteRecordedAutoDeleteExchangeString">
            <summary>Sets the shim of AutorecoveringConnection.MaybeDeleteRecordedAutoDeleteExchange(String exchange)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.MaybeDeleteRecordedAutoDeleteQueueString">
            <summary>Sets the shim of AutorecoveringConnection.MaybeDeleteRecordedAutoDeleteQueue(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.PerformAutomaticRecovery">
            <summary>Sets the shim of AutorecoveringConnection.PerformAutomaticRecovery()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.PropagateQueueNameChangeToBindingsStringString">
            <summary>Sets the shim of AutorecoveringConnection.PropagateQueueNameChangeToBindings(String oldName, String newName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.PropagateQueueNameChangeToConsumersStringString">
            <summary>Sets the shim of AutorecoveringConnection.PropagateQueueNameChangeToConsumers(String oldName, String newName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ProtocolGet">
            <summary>Sets the shim of AutorecoveringConnection.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ProtocolRabbitMQClientIConnectionget">
            <summary>Sets the shim of AutorecoveringConnection.RabbitMQ.Client.IConnection.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.QueueNameChangeAfterRecoveryAddEventHandlerOfQueueNameChangedAfterRecoveryEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_QueueNameChangeAfterRecovery(EventHandler`1&lt;QueueNameChangedAfterRecoveryEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.QueueNameChangeAfterRecoveryRemoveEventHandlerOfQueueNameChangedAfterRecoveryEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_QueueNameChangeAfterRecovery(EventHandler`1&lt;QueueNameChangedAfterRecoveryEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecordBindingRecordedBinding">
            <summary>Sets the shim of AutorecoveringConnection.RecordBinding(RecordedBinding rb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecordConsumerStringRecordedConsumer">
            <summary>Sets the shim of AutorecoveringConnection.RecordConsumer(String name, RecordedConsumer c)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecordExchangeStringRecordedExchange">
            <summary>Sets the shim of AutorecoveringConnection.RecordExchange(String name, RecordedExchange x)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecordQueueStringRecordedQueue">
            <summary>Sets the shim of AutorecoveringConnection.RecordQueue(String name, RecordedQueue q)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecordedExchangesGet">
            <summary>Sets the shim of AutorecoveringConnection.get_RecordedExchanges()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecordedQueuesGet">
            <summary>Sets the shim of AutorecoveringConnection.get_RecordedQueues()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverBindings">
            <summary>Sets the shim of AutorecoveringConnection.RecoverBindings()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverConnectionBlockedHandlers">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConnectionBlockedHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverConnectionDelegate">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConnectionDelegate()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverConnectionShutdownHandlers">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConnectionShutdownHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverConnectionUnblockedHandlers">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConnectionUnblockedHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverConsumers">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConsumers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverEntities">
            <summary>Sets the shim of AutorecoveringConnection.RecoverEntities()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverExchanges">
            <summary>Sets the shim of AutorecoveringConnection.RecoverExchanges()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverModels">
            <summary>Sets the shim of AutorecoveringConnection.RecoverModels()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverQueues">
            <summary>Sets the shim of AutorecoveringConnection.RecoverQueues()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoveryAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoveryRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverySucceededAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_RecoverySucceeded(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RecoverySucceededRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_RecoverySucceeded(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RemotePortGet">
            <summary>Sets the shim of AutorecoveringConnection.get_RemotePort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.RunRecoveryEventHandlers">
            <summary>Sets the shim of AutorecoveringConnection.RunRecoveryEventHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ServerPropertiesGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ServerProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ShouldTriggerConnectionRecoveryShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.ShouldTriggerConnectionRecovery(ShutdownEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ShutdownReportGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ShutdownReport()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.SystemIDisposableDispose">
            <summary>Sets the shim of AutorecoveringConnection.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.ToString01">
            <summary>Sets the shim of AutorecoveringConnection.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AllInstances.UnregisterModelAutorecoveringModel">
            <summary>Sets the shim of AutorecoveringConnection.UnregisterModel(AutorecoveringModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AutoCloseGet">
            <summary>Sets the shim of AutorecoveringConnection.get_AutoClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.AutoCloseSetBoolean">
            <summary>Sets the shim of AutorecoveringConnection.set_AutoClose(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.BeginAutomaticRecovery">
            <summary>Sets the shim of AutorecoveringConnection.BeginAutomaticRecovery()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.Bind(RabbitMQ.Client.IConnection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.Bind(RabbitMQ.Client.IRecoverable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.Bind(RabbitMQ.Client.NetworkConnection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.CallbackExceptionAddEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.CallbackExceptionRemoveEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ChannelMaxGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ClientPropertiesGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ClientProvidedNameGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ClientProvidedName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ClientProvidedNameSetString">
            <summary>Sets the shim of AutorecoveringConnection.set_ClientProvidedName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.Close">
            <summary>Sets the shim of AutorecoveringConnection.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.CloseInt32">
            <summary>Sets the shim of AutorecoveringConnection.Close(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.CloseReasonGet">
            <summary>Sets the shim of AutorecoveringConnection.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.CloseShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.Close(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.CloseUInt16String">
            <summary>Sets the shim of AutorecoveringConnection.Close(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.CloseUInt16StringInt32">
            <summary>Sets the shim of AutorecoveringConnection.Close(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConnectionBlockedAddEventHandlerOfConnectionBlockedEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConnectionBlocked(EventHandler`1&lt;ConnectionBlockedEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConnectionBlockedRemoveEventHandlerOfConnectionBlockedEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConnectionBlocked(EventHandler`1&lt;ConnectionBlockedEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConnectionRecoveryErrorAddEventHandlerOfConnectionRecoveryErrorEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConnectionRecoveryError(EventHandler`1&lt;ConnectionRecoveryErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConnectionRecoveryErrorRemoveEventHandlerOfConnectionRecoveryErrorEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConnectionRecoveryError(EventHandler`1&lt;ConnectionRecoveryErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConnectionShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConnectionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConnectionShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConnectionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConnectionUnblockedAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConnectionUnblocked(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConnectionUnblockedRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConnectionUnblocked(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConstructorConnectionFactoryString">
            <summary>Sets the shim of AutorecoveringConnection.AutorecoveringConnection(ConnectionFactory factory, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConsumerTagChangeAfterRecoveryAddEventHandlerOfConsumerTagChangedAfterRecoveryEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_ConsumerTagChangeAfterRecovery(EventHandler`1&lt;ConsumerTagChangedAfterRecoveryEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConsumerTagChangeAfterRecoveryRemoveEventHandlerOfConsumerTagChangedAfterRecoveryEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_ConsumerTagChangeAfterRecovery(EventHandler`1&lt;ConsumerTagChangedAfterRecoveryEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ConsumerWorkServiceGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ConsumerWorkService()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.CreateModel">
            <summary>Sets the shim of AutorecoveringConnection.CreateModel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.CreateNonRecoveringModel">
            <summary>Sets the shim of AutorecoveringConnection.CreateNonRecoveringModel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.DeleteRecordedBindingRecordedBinding">
            <summary>Sets the shim of AutorecoveringConnection.DeleteRecordedBinding(RecordedBinding rb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.DeleteRecordedConsumerString">
            <summary>Sets the shim of AutorecoveringConnection.DeleteRecordedConsumer(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.DeleteRecordedExchangeString">
            <summary>Sets the shim of AutorecoveringConnection.DeleteRecordedExchange(String name)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.DeleteRecordedQueueString">
            <summary>Sets the shim of AutorecoveringConnection.DeleteRecordedQueue(String name)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.EndpointGet">
            <summary>Sets the shim of AutorecoveringConnection.get_Endpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.EnsureIsOpen">
            <summary>Sets the shim of AutorecoveringConnection.EnsureIsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.FrameMaxGet">
            <summary>Sets the shim of AutorecoveringConnection.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.HandleConnectionBlockedString">
            <summary>Sets the shim of AutorecoveringConnection.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.HandleConnectionUnblocked">
            <summary>Sets the shim of AutorecoveringConnection.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.HandleTopologyRecoveryExceptionTopologyRecoveryException">
            <summary>Sets the shim of AutorecoveringConnection.HandleTopologyRecoveryException(TopologyRecoveryException e)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.HasMoreConsumersOnQueueICollectionOfRecordedConsumerString">
            <summary>Sets the shim of AutorecoveringConnection.HasMoreConsumersOnQueue(ICollection`1&lt;RecordedConsumer&gt; consumers, String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.HasMoreDestinationsBoundToExchangeICollectionOfRecordedBindingString">
            <summary>Sets the shim of AutorecoveringConnection.HasMoreDestinationsBoundToExchange(ICollection`1&lt;RecordedBinding&gt; bindings, String exchange)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.HeartbeatGet">
            <summary>Sets the shim of AutorecoveringConnection.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.Init">
            <summary>Sets the shim of AutorecoveringConnection.Init()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.InitIEndpointResolver">
            <summary>Sets the shim of AutorecoveringConnection.Init(IEndpointResolver endpoints)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.InitIFrameHandler">
            <summary>Sets the shim of AutorecoveringConnection.Init(IFrameHandler fh)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.IsOpenGet">
            <summary>Sets the shim of AutorecoveringConnection.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.KnownHostsGet">
            <summary>Sets the shim of AutorecoveringConnection.get_KnownHosts()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.KnownHostsSetAmqpTcpEndpointArray">
            <summary>Sets the shim of AutorecoveringConnection.set_KnownHosts(AmqpTcpEndpoint[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.LocalPortGet">
            <summary>Sets the shim of AutorecoveringConnection.get_LocalPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ManuallyClosedGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ManuallyClosed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ManuallyClosedSetBoolean">
            <summary>Sets the shim of AutorecoveringConnection.set_ManuallyClosed(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.MaybeDeleteRecordedAutoDeleteExchangeString">
            <summary>Sets the shim of AutorecoveringConnection.MaybeDeleteRecordedAutoDeleteExchange(String exchange)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.MaybeDeleteRecordedAutoDeleteQueueString">
            <summary>Sets the shim of AutorecoveringConnection.MaybeDeleteRecordedAutoDeleteQueue(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.PerformAutomaticRecovery">
            <summary>Sets the shim of AutorecoveringConnection.PerformAutomaticRecovery()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.PropagateQueueNameChangeToBindingsStringString">
            <summary>Sets the shim of AutorecoveringConnection.PropagateQueueNameChangeToBindings(String oldName, String newName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.PropagateQueueNameChangeToConsumersStringString">
            <summary>Sets the shim of AutorecoveringConnection.PropagateQueueNameChangeToConsumers(String oldName, String newName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ProtocolGet">
            <summary>Sets the shim of AutorecoveringConnection.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ProtocolRabbitMQClientIConnectionget">
            <summary>Sets the shim of AutorecoveringConnection.RabbitMQ.Client.IConnection.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.QueueNameChangeAfterRecoveryAddEventHandlerOfQueueNameChangedAfterRecoveryEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_QueueNameChangeAfterRecovery(EventHandler`1&lt;QueueNameChangedAfterRecoveryEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.QueueNameChangeAfterRecoveryRemoveEventHandlerOfQueueNameChangedAfterRecoveryEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_QueueNameChangeAfterRecovery(EventHandler`1&lt;QueueNameChangedAfterRecoveryEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecordBindingRecordedBinding">
            <summary>Sets the shim of AutorecoveringConnection.RecordBinding(RecordedBinding rb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecordConsumerStringRecordedConsumer">
            <summary>Sets the shim of AutorecoveringConnection.RecordConsumer(String name, RecordedConsumer c)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecordExchangeStringRecordedExchange">
            <summary>Sets the shim of AutorecoveringConnection.RecordExchange(String name, RecordedExchange x)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecordQueueStringRecordedQueue">
            <summary>Sets the shim of AutorecoveringConnection.RecordQueue(String name, RecordedQueue q)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecordedExchangesGet">
            <summary>Sets the shim of AutorecoveringConnection.get_RecordedExchanges()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecordedQueuesGet">
            <summary>Sets the shim of AutorecoveringConnection.get_RecordedQueues()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverBindings">
            <summary>Sets the shim of AutorecoveringConnection.RecoverBindings()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverConnectionBlockedHandlers">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConnectionBlockedHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverConnectionDelegate">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConnectionDelegate()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverConnectionShutdownHandlers">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConnectionShutdownHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverConnectionUnblockedHandlers">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConnectionUnblockedHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverConsumers">
            <summary>Sets the shim of AutorecoveringConnection.RecoverConsumers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverEntities">
            <summary>Sets the shim of AutorecoveringConnection.RecoverEntities()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverExchanges">
            <summary>Sets the shim of AutorecoveringConnection.RecoverExchanges()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverModels">
            <summary>Sets the shim of AutorecoveringConnection.RecoverModels()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverQueues">
            <summary>Sets the shim of AutorecoveringConnection.RecoverQueues()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoveryAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoveryRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverySucceededAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.add_RecoverySucceeded(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RecoverySucceededRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.remove_RecoverySucceeded(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RemotePortGet">
            <summary>Sets the shim of AutorecoveringConnection.get_RemotePort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.RunRecoveryEventHandlers">
            <summary>Sets the shim of AutorecoveringConnection.RunRecoveryEventHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ServerPropertiesGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ServerProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ShouldTriggerConnectionRecoveryShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringConnection.ShouldTriggerConnectionRecovery(ShutdownEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ShutdownReportGet">
            <summary>Sets the shim of AutorecoveringConnection.get_ShutdownReport()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.SystemIDisposableDispose">
            <summary>Sets the shim of AutorecoveringConnection.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.ToString">
            <summary>Sets the shim of AutorecoveringConnection.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimAutorecoveringConnection.UnregisterModelAutorecoveringModel">
            <summary>Sets the shim of AutorecoveringConnection.UnregisterModel(AutorecoveringModel model)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicAck</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.#ctor(RabbitMQ.Client.Framing.Impl.BasicAck)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicAck.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances.DeliveryTagRabbitMQClientFramingIBasicAckget">
            <summary>Sets the shim of BasicAck.RabbitMQ.Client.Framing.IBasicAck.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicAck.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances.MultipleRabbitMQClientFramingIBasicAckget">
            <summary>Sets the shim of BasicAck.RabbitMQ.Client.Framing.IBasicAck.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicAck.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicAck.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicAck.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicAck.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicAck.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicAck.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.Bind(RabbitMQ.Client.Framing.IBasicAck)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.Constructor">
            <summary>Sets the shim of BasicAck.BasicAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.ConstructorUInt64Boolean">
            <summary>Sets the shim of BasicAck.BasicAck(UInt64 initDeliveryTag, Boolean initMultiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.DeliveryTagRabbitMQClientFramingIBasicAckget">
            <summary>Sets the shim of BasicAck.RabbitMQ.Client.Framing.IBasicAck.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.HasContentGet">
            <summary>Sets the shim of BasicAck.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.MultipleRabbitMQClientFramingIBasicAckget">
            <summary>Sets the shim of BasicAck.RabbitMQ.Client.Framing.IBasicAck.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.ProtocolClassIdGet">
            <summary>Sets the shim of BasicAck.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicAck.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicAck.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicAck.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicAck.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicAck.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicCancel</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.#ctor(RabbitMQ.Client.Framing.Impl.BasicCancel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicCancel.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances.ConsumerTagRabbitMQClientFramingIBasicCancelget">
            <summary>Sets the shim of BasicCancel.RabbitMQ.Client.Framing.IBasicCancel.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicCancel.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances.NowaitRabbitMQClientFramingIBasicCancelget">
            <summary>Sets the shim of BasicCancel.RabbitMQ.Client.Framing.IBasicCancel.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicCancel.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicCancel.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicCancel.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicCancel.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicCancel.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicCancel.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.Bind(RabbitMQ.Client.Framing.IBasicCancel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.Constructor">
            <summary>Sets the shim of BasicCancel.BasicCancel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.ConstructorStringBoolean">
            <summary>Sets the shim of BasicCancel.BasicCancel(String initConsumerTag, Boolean initNowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.ConsumerTagRabbitMQClientFramingIBasicCancelget">
            <summary>Sets the shim of BasicCancel.RabbitMQ.Client.Framing.IBasicCancel.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.HasContentGet">
            <summary>Sets the shim of BasicCancel.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.NowaitRabbitMQClientFramingIBasicCancelget">
            <summary>Sets the shim of BasicCancel.RabbitMQ.Client.Framing.IBasicCancel.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.ProtocolClassIdGet">
            <summary>Sets the shim of BasicCancel.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicCancel.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicCancel.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicCancel.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancel.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicCancel.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicCancelOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.#ctor(RabbitMQ.Client.Framing.Impl.BasicCancelOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicCancelOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AllInstances.ConsumerTagRabbitMQClientFramingIBasicCancelOkget">
            <summary>Sets the shim of BasicCancelOk.RabbitMQ.Client.Framing.IBasicCancelOk.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicCancelOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicCancelOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicCancelOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicCancelOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicCancelOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicCancelOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicCancelOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.Bind(RabbitMQ.Client.Framing.IBasicCancelOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.Constructor">
            <summary>Sets the shim of BasicCancelOk.BasicCancelOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.ConstructorString">
            <summary>Sets the shim of BasicCancelOk.BasicCancelOk(String initConsumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.ConsumerTagRabbitMQClientFramingIBasicCancelOkget">
            <summary>Sets the shim of BasicCancelOk.RabbitMQ.Client.Framing.IBasicCancelOk.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.HasContentGet">
            <summary>Sets the shim of BasicCancelOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.ProtocolClassIdGet">
            <summary>Sets the shim of BasicCancelOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicCancelOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicCancelOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicCancelOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicCancelOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicCancelOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicConsume</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.#ctor(RabbitMQ.Client.Framing.Impl.BasicConsume)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicConsume.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.ArgumentsRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.ConsumerTagRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.ExclusiveRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Exclusive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicConsume.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.NoAckRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_NoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.NoLocalRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_NoLocal()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.NowaitRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicConsume.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicConsume.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicConsume.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.QueueRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicConsume.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.Reserved1RabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicConsume.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicConsume.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.ArgumentsRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Arguments()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.Bind(RabbitMQ.Client.Framing.IBasicConsume)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.Constructor">
            <summary>Sets the shim of BasicConsume.BasicConsume()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.ConstructorUInt16StringStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of BasicConsume.BasicConsume(UInt16 initReserved1, String initQueue, String initConsumerTag, Boolean initNoLocal, Boolean initNoAck, Boolean initExclusive, Boolean initNowait, IDictionary`2&lt;String,Object&gt; initArguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.ConsumerTagRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.ExclusiveRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Exclusive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.HasContentGet">
            <summary>Sets the shim of BasicConsume.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.NoAckRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_NoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.NoLocalRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_NoLocal()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.NowaitRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.ProtocolClassIdGet">
            <summary>Sets the shim of BasicConsume.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicConsume.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicConsume.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.QueueRabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicConsume.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.Reserved1RabbitMQClientFramingIBasicConsumeget">
            <summary>Sets the shim of BasicConsume.RabbitMQ.Client.Framing.IBasicConsume.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsume.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicConsume.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicConsumeOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.#ctor(RabbitMQ.Client.Framing.Impl.BasicConsumeOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicConsumeOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AllInstances.ConsumerTagRabbitMQClientFramingIBasicConsumeOkget">
            <summary>Sets the shim of BasicConsumeOk.RabbitMQ.Client.Framing.IBasicConsumeOk.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicConsumeOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicConsumeOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicConsumeOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicConsumeOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicConsumeOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicConsumeOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicConsumeOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.Bind(RabbitMQ.Client.Framing.IBasicConsumeOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.Constructor">
            <summary>Sets the shim of BasicConsumeOk.BasicConsumeOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.ConstructorString">
            <summary>Sets the shim of BasicConsumeOk.BasicConsumeOk(String initConsumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.ConsumerTagRabbitMQClientFramingIBasicConsumeOkget">
            <summary>Sets the shim of BasicConsumeOk.RabbitMQ.Client.Framing.IBasicConsumeOk.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.HasContentGet">
            <summary>Sets the shim of BasicConsumeOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.ProtocolClassIdGet">
            <summary>Sets the shim of BasicConsumeOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicConsumeOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicConsumeOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicConsumeOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicConsumeOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicConsumeOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicDeliver</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.#ctor(RabbitMQ.Client.Framing.Impl.BasicDeliver)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicDeliver.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.ConsumerTagRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.DeliveryTagRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.ExchangeRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicDeliver.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicDeliver.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicDeliver.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicDeliver.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicDeliver.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.RedeliveredRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.RoutingKeyRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicDeliver.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicDeliver.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.Bind(RabbitMQ.Client.Framing.IBasicDeliver)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.Constructor">
            <summary>Sets the shim of BasicDeliver.BasicDeliver()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.ConstructorStringUInt64BooleanStringString">
            <summary>Sets the shim of BasicDeliver.BasicDeliver(String initConsumerTag, UInt64 initDeliveryTag, Boolean initRedelivered, String initExchange, String initRoutingKey)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.ConsumerTagRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.DeliveryTagRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.ExchangeRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.HasContentGet">
            <summary>Sets the shim of BasicDeliver.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.ProtocolClassIdGet">
            <summary>Sets the shim of BasicDeliver.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicDeliver.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicDeliver.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicDeliver.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.RedeliveredRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.RoutingKeyRabbitMQClientFramingIBasicDeliverget">
            <summary>Sets the shim of BasicDeliver.RabbitMQ.Client.Framing.IBasicDeliver.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicDeliver.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicDeliver.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicGet</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.#ctor(RabbitMQ.Client.Framing.Impl.BasicGet)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicGet.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicGet.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.NoAckRabbitMQClientFramingIBasicGetget">
            <summary>Sets the shim of BasicGet.RabbitMQ.Client.Framing.IBasicGet.get_NoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicGet.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicGet.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicGet.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.QueueRabbitMQClientFramingIBasicGetget">
            <summary>Sets the shim of BasicGet.RabbitMQ.Client.Framing.IBasicGet.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicGet.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.Reserved1RabbitMQClientFramingIBasicGetget">
            <summary>Sets the shim of BasicGet.RabbitMQ.Client.Framing.IBasicGet.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicGet.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicGet.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.Bind(RabbitMQ.Client.Framing.IBasicGet)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.Constructor">
            <summary>Sets the shim of BasicGet.BasicGet()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.ConstructorUInt16StringBoolean">
            <summary>Sets the shim of BasicGet.BasicGet(UInt16 initReserved1, String initQueue, Boolean initNoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.HasContentGet">
            <summary>Sets the shim of BasicGet.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.NoAckRabbitMQClientFramingIBasicGetget">
            <summary>Sets the shim of BasicGet.RabbitMQ.Client.Framing.IBasicGet.get_NoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.ProtocolClassIdGet">
            <summary>Sets the shim of BasicGet.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicGet.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicGet.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.QueueRabbitMQClientFramingIBasicGetget">
            <summary>Sets the shim of BasicGet.RabbitMQ.Client.Framing.IBasicGet.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicGet.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.Reserved1RabbitMQClientFramingIBasicGetget">
            <summary>Sets the shim of BasicGet.RabbitMQ.Client.Framing.IBasicGet.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGet.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicGet.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicGetEmpty</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.#ctor(RabbitMQ.Client.Framing.Impl.BasicGetEmpty)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicGetEmpty.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicGetEmpty.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicGetEmpty.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicGetEmpty.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicGetEmpty.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicGetEmpty.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AllInstances.Reserved1RabbitMQClientFramingIBasicGetEmptyget">
            <summary>Sets the shim of BasicGetEmpty.RabbitMQ.Client.Framing.IBasicGetEmpty.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicGetEmpty.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicGetEmpty.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.Bind(RabbitMQ.Client.Framing.IBasicGetEmpty)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.Constructor">
            <summary>Sets the shim of BasicGetEmpty.BasicGetEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.ConstructorString">
            <summary>Sets the shim of BasicGetEmpty.BasicGetEmpty(String initReserved1)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.HasContentGet">
            <summary>Sets the shim of BasicGetEmpty.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.ProtocolClassIdGet">
            <summary>Sets the shim of BasicGetEmpty.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicGetEmpty.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicGetEmpty.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicGetEmpty.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.Reserved1RabbitMQClientFramingIBasicGetEmptyget">
            <summary>Sets the shim of BasicGetEmpty.RabbitMQ.Client.Framing.IBasicGetEmpty.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetEmpty.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicGetEmpty.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicGetOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.#ctor(RabbitMQ.Client.Framing.Impl.BasicGetOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicGetOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.DeliveryTagRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.ExchangeRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicGetOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.MessageCountRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicGetOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicGetOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicGetOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicGetOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.RedeliveredRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.RoutingKeyRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicGetOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicGetOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.Bind(RabbitMQ.Client.Framing.IBasicGetOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.Constructor">
            <summary>Sets the shim of BasicGetOk.BasicGetOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.ConstructorUInt64BooleanStringStringUInt32">
            <summary>Sets the shim of BasicGetOk.BasicGetOk(UInt64 initDeliveryTag, Boolean initRedelivered, String initExchange, String initRoutingKey, UInt32 initMessageCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.DeliveryTagRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.ExchangeRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.HasContentGet">
            <summary>Sets the shim of BasicGetOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.MessageCountRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.ProtocolClassIdGet">
            <summary>Sets the shim of BasicGetOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicGetOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicGetOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicGetOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.RedeliveredRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_Redelivered()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.RoutingKeyRabbitMQClientFramingIBasicGetOkget">
            <summary>Sets the shim of BasicGetOk.RabbitMQ.Client.Framing.IBasicGetOk.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicGetOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicGetOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicNack</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.#ctor(RabbitMQ.Client.Framing.Impl.BasicNack)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicNack.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.DeliveryTagRabbitMQClientFramingIBasicNackget">
            <summary>Sets the shim of BasicNack.RabbitMQ.Client.Framing.IBasicNack.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicNack.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.MultipleRabbitMQClientFramingIBasicNackget">
            <summary>Sets the shim of BasicNack.RabbitMQ.Client.Framing.IBasicNack.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicNack.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicNack.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicNack.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicNack.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.RequeueRabbitMQClientFramingIBasicNackget">
            <summary>Sets the shim of BasicNack.RabbitMQ.Client.Framing.IBasicNack.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicNack.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicNack.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.Bind(RabbitMQ.Client.Framing.IBasicNack)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.Constructor">
            <summary>Sets the shim of BasicNack.BasicNack()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.ConstructorUInt64BooleanBoolean">
            <summary>Sets the shim of BasicNack.BasicNack(UInt64 initDeliveryTag, Boolean initMultiple, Boolean initRequeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.DeliveryTagRabbitMQClientFramingIBasicNackget">
            <summary>Sets the shim of BasicNack.RabbitMQ.Client.Framing.IBasicNack.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.HasContentGet">
            <summary>Sets the shim of BasicNack.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.MultipleRabbitMQClientFramingIBasicNackget">
            <summary>Sets the shim of BasicNack.RabbitMQ.Client.Framing.IBasicNack.get_Multiple()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.ProtocolClassIdGet">
            <summary>Sets the shim of BasicNack.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicNack.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicNack.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicNack.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.RequeueRabbitMQClientFramingIBasicNackget">
            <summary>Sets the shim of BasicNack.RabbitMQ.Client.Framing.IBasicNack.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicNack.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicNack.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicPublish</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.#ctor(RabbitMQ.Client.Framing.Impl.BasicPublish)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicPublish.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.ExchangeRabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicPublish.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.ImmediateRabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_Immediate()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.MandatoryRabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_Mandatory()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicPublish.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicPublish.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicPublish.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicPublish.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.Reserved1RabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.RoutingKeyRabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicPublish.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicPublish.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.Bind(RabbitMQ.Client.Framing.IBasicPublish)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.Constructor">
            <summary>Sets the shim of BasicPublish.BasicPublish()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.ConstructorUInt16StringStringBooleanBoolean">
            <summary>Sets the shim of BasicPublish.BasicPublish(UInt16 initReserved1, String initExchange, String initRoutingKey, Boolean initMandatory, Boolean initImmediate)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.ExchangeRabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.HasContentGet">
            <summary>Sets the shim of BasicPublish.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.ImmediateRabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_Immediate()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.MandatoryRabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_Mandatory()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.ProtocolClassIdGet">
            <summary>Sets the shim of BasicPublish.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicPublish.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicPublish.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicPublish.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.Reserved1RabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.RoutingKeyRabbitMQClientFramingIBasicPublishget">
            <summary>Sets the shim of BasicPublish.RabbitMQ.Client.Framing.IBasicPublish.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicPublish.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicPublish.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicQos</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.#ctor(RabbitMQ.Client.Framing.Impl.BasicQos)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicQos.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.GlobalRabbitMQClientFramingIBasicQosget">
            <summary>Sets the shim of BasicQos.RabbitMQ.Client.Framing.IBasicQos.get_Global()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicQos.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.PrefetchCountRabbitMQClientFramingIBasicQosget">
            <summary>Sets the shim of BasicQos.RabbitMQ.Client.Framing.IBasicQos.get_PrefetchCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.PrefetchSizeRabbitMQClientFramingIBasicQosget">
            <summary>Sets the shim of BasicQos.RabbitMQ.Client.Framing.IBasicQos.get_PrefetchSize()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicQos.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicQos.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicQos.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicQos.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicQos.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicQos.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.Bind(RabbitMQ.Client.Framing.IBasicQos)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.Constructor">
            <summary>Sets the shim of BasicQos.BasicQos()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.ConstructorUInt32UInt16Boolean">
            <summary>Sets the shim of BasicQos.BasicQos(UInt32 initPrefetchSize, UInt16 initPrefetchCount, Boolean initGlobal)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.GlobalRabbitMQClientFramingIBasicQosget">
            <summary>Sets the shim of BasicQos.RabbitMQ.Client.Framing.IBasicQos.get_Global()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.HasContentGet">
            <summary>Sets the shim of BasicQos.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.PrefetchCountRabbitMQClientFramingIBasicQosget">
            <summary>Sets the shim of BasicQos.RabbitMQ.Client.Framing.IBasicQos.get_PrefetchCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.PrefetchSizeRabbitMQClientFramingIBasicQosget">
            <summary>Sets the shim of BasicQos.RabbitMQ.Client.Framing.IBasicQos.get_PrefetchSize()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.ProtocolClassIdGet">
            <summary>Sets the shim of BasicQos.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicQos.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicQos.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicQos.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQos.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicQos.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicQosOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.#ctor(RabbitMQ.Client.Framing.Impl.BasicQosOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicQosOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicQosOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicQosOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicQosOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicQosOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicQosOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicQosOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicQosOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.Bind(RabbitMQ.Client.Framing.IBasicQosOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.Constructor">
            <summary>Sets the shim of BasicQosOk.BasicQosOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.HasContentGet">
            <summary>Sets the shim of BasicQosOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.ProtocolClassIdGet">
            <summary>Sets the shim of BasicQosOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicQosOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicQosOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicQosOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicQosOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicQosOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicRecover</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.#ctor(RabbitMQ.Client.Framing.Impl.BasicRecover)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicRecover.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicRecover.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicRecover.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicRecover.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicRecover.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicRecover.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AllInstances.RequeueRabbitMQClientFramingIBasicRecoverget">
            <summary>Sets the shim of BasicRecover.RabbitMQ.Client.Framing.IBasicRecover.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicRecover.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicRecover.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.Bind(RabbitMQ.Client.Framing.IBasicRecover)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.Constructor">
            <summary>Sets the shim of BasicRecover.BasicRecover()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.ConstructorBoolean">
            <summary>Sets the shim of BasicRecover.BasicRecover(Boolean initRequeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.HasContentGet">
            <summary>Sets the shim of BasicRecover.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.ProtocolClassIdGet">
            <summary>Sets the shim of BasicRecover.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicRecover.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicRecover.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicRecover.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.RequeueRabbitMQClientFramingIBasicRecoverget">
            <summary>Sets the shim of BasicRecover.RabbitMQ.Client.Framing.IBasicRecover.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecover.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicRecover.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicRecoverAsync</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.#ctor(RabbitMQ.Client.Framing.Impl.BasicRecoverAsync)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicRecoverAsync.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicRecoverAsync.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicRecoverAsync.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicRecoverAsync.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicRecoverAsync.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicRecoverAsync.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AllInstances.RequeueRabbitMQClientFramingIBasicRecoverAsyncget">
            <summary>Sets the shim of BasicRecoverAsync.RabbitMQ.Client.Framing.IBasicRecoverAsync.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicRecoverAsync.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicRecoverAsync.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.Bind(RabbitMQ.Client.Framing.IBasicRecoverAsync)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.Constructor">
            <summary>Sets the shim of BasicRecoverAsync.BasicRecoverAsync()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.ConstructorBoolean">
            <summary>Sets the shim of BasicRecoverAsync.BasicRecoverAsync(Boolean initRequeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.HasContentGet">
            <summary>Sets the shim of BasicRecoverAsync.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.ProtocolClassIdGet">
            <summary>Sets the shim of BasicRecoverAsync.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicRecoverAsync.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicRecoverAsync.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicRecoverAsync.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.RequeueRabbitMQClientFramingIBasicRecoverAsyncget">
            <summary>Sets the shim of BasicRecoverAsync.RabbitMQ.Client.Framing.IBasicRecoverAsync.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverAsync.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicRecoverAsync.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicRecoverOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.#ctor(RabbitMQ.Client.Framing.Impl.BasicRecoverOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicRecoverOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicRecoverOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicRecoverOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicRecoverOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicRecoverOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicRecoverOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicRecoverOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicRecoverOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.Bind(RabbitMQ.Client.Framing.IBasicRecoverOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.Constructor">
            <summary>Sets the shim of BasicRecoverOk.BasicRecoverOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.HasContentGet">
            <summary>Sets the shim of BasicRecoverOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.ProtocolClassIdGet">
            <summary>Sets the shim of BasicRecoverOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicRecoverOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicRecoverOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicRecoverOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicRecoverOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicRecoverOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicReject</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.#ctor(RabbitMQ.Client.Framing.Impl.BasicReject)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicReject.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances.DeliveryTagRabbitMQClientFramingIBasicRejectget">
            <summary>Sets the shim of BasicReject.RabbitMQ.Client.Framing.IBasicReject.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicReject.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicReject.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicReject.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicReject.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicReject.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances.RequeueRabbitMQClientFramingIBasicRejectget">
            <summary>Sets the shim of BasicReject.RabbitMQ.Client.Framing.IBasicReject.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicReject.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicReject.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.Bind(RabbitMQ.Client.Framing.IBasicReject)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.Constructor">
            <summary>Sets the shim of BasicReject.BasicReject()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.ConstructorUInt64Boolean">
            <summary>Sets the shim of BasicReject.BasicReject(UInt64 initDeliveryTag, Boolean initRequeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.DeliveryTagRabbitMQClientFramingIBasicRejectget">
            <summary>Sets the shim of BasicReject.RabbitMQ.Client.Framing.IBasicReject.get_DeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.HasContentGet">
            <summary>Sets the shim of BasicReject.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.ProtocolClassIdGet">
            <summary>Sets the shim of BasicReject.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicReject.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicReject.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicReject.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.RequeueRabbitMQClientFramingIBasicRejectget">
            <summary>Sets the shim of BasicReject.RabbitMQ.Client.Framing.IBasicReject.get_Requeue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReject.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicReject.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.BasicReturn</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.#ctor(RabbitMQ.Client.Framing.Impl.BasicReturn)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicReturn.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.ExchangeRabbitMQClientFramingIBasicReturnget">
            <summary>Sets the shim of BasicReturn.RabbitMQ.Client.Framing.IBasicReturn.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.HasContentGet">
            <summary>Sets the shim of BasicReturn.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of BasicReturn.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicReturn.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicReturn.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicReturn.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.ReplyCodeRabbitMQClientFramingIBasicReturnget">
            <summary>Sets the shim of BasicReturn.RabbitMQ.Client.Framing.IBasicReturn.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.ReplyTextRabbitMQClientFramingIBasicReturnget">
            <summary>Sets the shim of BasicReturn.RabbitMQ.Client.Framing.IBasicReturn.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.RoutingKeyRabbitMQClientFramingIBasicReturnget">
            <summary>Sets the shim of BasicReturn.RabbitMQ.Client.Framing.IBasicReturn.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicReturn.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of BasicReturn.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.Bind(RabbitMQ.Client.Framing.IBasicReturn)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.Constructor">
            <summary>Sets the shim of BasicReturn.BasicReturn()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.ConstructorUInt16StringStringString">
            <summary>Sets the shim of BasicReturn.BasicReturn(UInt16 initReplyCode, String initReplyText, String initExchange, String initRoutingKey)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.ExchangeRabbitMQClientFramingIBasicReturnget">
            <summary>Sets the shim of BasicReturn.RabbitMQ.Client.Framing.IBasicReturn.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.HasContentGet">
            <summary>Sets the shim of BasicReturn.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.ProtocolClassIdGet">
            <summary>Sets the shim of BasicReturn.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.ProtocolMethodIdGet">
            <summary>Sets the shim of BasicReturn.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.ProtocolMethodNameGet">
            <summary>Sets the shim of BasicReturn.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of BasicReturn.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.ReplyCodeRabbitMQClientFramingIBasicReturnget">
            <summary>Sets the shim of BasicReturn.RabbitMQ.Client.Framing.IBasicReturn.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.ReplyTextRabbitMQClientFramingIBasicReturnget">
            <summary>Sets the shim of BasicReturn.RabbitMQ.Client.Framing.IBasicReturn.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.RoutingKeyRabbitMQClientFramingIBasicReturnget">
            <summary>Sets the shim of BasicReturn.RabbitMQ.Client.Framing.IBasicReturn.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimBasicReturn.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of BasicReturn.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ChannelClose</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.#ctor(RabbitMQ.Client.Framing.Impl.ChannelClose)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelClose.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.ClassIdRabbitMQClientFramingIChannelCloseget">
            <summary>Sets the shim of ChannelClose.RabbitMQ.Client.Framing.IChannelClose.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.HasContentGet">
            <summary>Sets the shim of ChannelClose.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.MethodIdRabbitMQClientFramingIChannelCloseget">
            <summary>Sets the shim of ChannelClose.RabbitMQ.Client.Framing.IChannelClose.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelClose.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelClose.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelClose.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelClose.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.ReplyCodeRabbitMQClientFramingIChannelCloseget">
            <summary>Sets the shim of ChannelClose.RabbitMQ.Client.Framing.IChannelClose.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.ReplyTextRabbitMQClientFramingIChannelCloseget">
            <summary>Sets the shim of ChannelClose.RabbitMQ.Client.Framing.IChannelClose.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelClose.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelClose.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.Bind(RabbitMQ.Client.Framing.IChannelClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.ClassIdRabbitMQClientFramingIChannelCloseget">
            <summary>Sets the shim of ChannelClose.RabbitMQ.Client.Framing.IChannelClose.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.Constructor">
            <summary>Sets the shim of ChannelClose.ChannelClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.ConstructorUInt16StringUInt16UInt16">
            <summary>Sets the shim of ChannelClose.ChannelClose(UInt16 initReplyCode, String initReplyText, UInt16 initClassId, UInt16 initMethodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.HasContentGet">
            <summary>Sets the shim of ChannelClose.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.MethodIdRabbitMQClientFramingIChannelCloseget">
            <summary>Sets the shim of ChannelClose.RabbitMQ.Client.Framing.IChannelClose.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelClose.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelClose.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelClose.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelClose.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.ReplyCodeRabbitMQClientFramingIChannelCloseget">
            <summary>Sets the shim of ChannelClose.RabbitMQ.Client.Framing.IChannelClose.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.ReplyTextRabbitMQClientFramingIChannelCloseget">
            <summary>Sets the shim of ChannelClose.RabbitMQ.Client.Framing.IChannelClose.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelClose.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelClose.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ChannelCloseOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.#ctor(RabbitMQ.Client.Framing.Impl.ChannelCloseOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelCloseOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ChannelCloseOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelCloseOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelCloseOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelCloseOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelCloseOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelCloseOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelCloseOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.Bind(RabbitMQ.Client.Framing.IChannelCloseOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.Constructor">
            <summary>Sets the shim of ChannelCloseOk.ChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.HasContentGet">
            <summary>Sets the shim of ChannelCloseOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelCloseOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelCloseOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelCloseOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelCloseOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelCloseOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelCloseOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ChannelFlow</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.#ctor(RabbitMQ.Client.Framing.Impl.ChannelFlow)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.ActiveRabbitMQClientFramingIChannelFlowget">
            <summary>Sets the shim of ChannelFlow.RabbitMQ.Client.Framing.IChannelFlow.get_Active()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AllInstances.ActiveRabbitMQClientFramingIChannelFlowget">
            <summary>Sets the shim of ChannelFlow.RabbitMQ.Client.Framing.IChannelFlow.get_Active()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelFlow.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AllInstances.HasContentGet">
            <summary>Sets the shim of ChannelFlow.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelFlow.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelFlow.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelFlow.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelFlow.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelFlow.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelFlow.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.Bind(RabbitMQ.Client.Framing.IChannelFlow)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.Constructor">
            <summary>Sets the shim of ChannelFlow.ChannelFlow()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.ConstructorBoolean">
            <summary>Sets the shim of ChannelFlow.ChannelFlow(Boolean initActive)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.HasContentGet">
            <summary>Sets the shim of ChannelFlow.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelFlow.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelFlow.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelFlow.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelFlow.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlow.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelFlow.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ChannelFlowOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.#ctor(RabbitMQ.Client.Framing.Impl.ChannelFlowOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.ActiveRabbitMQClientFramingIChannelFlowOkget">
            <summary>Sets the shim of ChannelFlowOk.RabbitMQ.Client.Framing.IChannelFlowOk.get_Active()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AllInstances.ActiveRabbitMQClientFramingIChannelFlowOkget">
            <summary>Sets the shim of ChannelFlowOk.RabbitMQ.Client.Framing.IChannelFlowOk.get_Active()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelFlowOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ChannelFlowOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelFlowOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelFlowOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelFlowOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelFlowOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelFlowOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelFlowOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.Bind(RabbitMQ.Client.Framing.IChannelFlowOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.Constructor">
            <summary>Sets the shim of ChannelFlowOk.ChannelFlowOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.ConstructorBoolean">
            <summary>Sets the shim of ChannelFlowOk.ChannelFlowOk(Boolean initActive)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.HasContentGet">
            <summary>Sets the shim of ChannelFlowOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelFlowOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelFlowOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelFlowOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelFlowOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelFlowOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelFlowOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ChannelOpen</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.#ctor(RabbitMQ.Client.Framing.Impl.ChannelOpen)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelOpen.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AllInstances.HasContentGet">
            <summary>Sets the shim of ChannelOpen.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelOpen.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelOpen.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelOpen.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelOpen.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AllInstances.Reserved1RabbitMQClientFramingIChannelOpenget">
            <summary>Sets the shim of ChannelOpen.RabbitMQ.Client.Framing.IChannelOpen.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelOpen.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelOpen.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.Bind(RabbitMQ.Client.Framing.IChannelOpen)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.Constructor">
            <summary>Sets the shim of ChannelOpen.ChannelOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.ConstructorString">
            <summary>Sets the shim of ChannelOpen.ChannelOpen(String initReserved1)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.HasContentGet">
            <summary>Sets the shim of ChannelOpen.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelOpen.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelOpen.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelOpen.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelOpen.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.Reserved1RabbitMQClientFramingIChannelOpenget">
            <summary>Sets the shim of ChannelOpen.RabbitMQ.Client.Framing.IChannelOpen.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpen.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelOpen.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ChannelOpenOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.#ctor(RabbitMQ.Client.Framing.Impl.ChannelOpenOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelOpenOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ChannelOpenOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelOpenOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelOpenOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelOpenOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelOpenOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AllInstances.Reserved1RabbitMQClientFramingIChannelOpenOkget">
            <summary>Sets the shim of ChannelOpenOk.RabbitMQ.Client.Framing.IChannelOpenOk.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelOpenOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ChannelOpenOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.Bind(RabbitMQ.Client.Framing.IChannelOpenOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.Constructor">
            <summary>Sets the shim of ChannelOpenOk.ChannelOpenOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.ConstructorByteArray">
            <summary>Sets the shim of ChannelOpenOk.ChannelOpenOk(Byte[] initReserved1)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.HasContentGet">
            <summary>Sets the shim of ChannelOpenOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.ProtocolClassIdGet">
            <summary>Sets the shim of ChannelOpenOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ChannelOpenOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ChannelOpenOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ChannelOpenOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.Reserved1RabbitMQClientFramingIChannelOpenOkget">
            <summary>Sets the shim of ChannelOpenOk.RabbitMQ.Client.Framing.IChannelOpenOk.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimChannelOpenOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ChannelOpenOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConfirmSelect</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.#ctor(RabbitMQ.Client.Framing.Impl.ConfirmSelect)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConfirmSelect.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AllInstances.HasContentGet">
            <summary>Sets the shim of ConfirmSelect.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AllInstances.NowaitRabbitMQClientFramingIConfirmSelectget">
            <summary>Sets the shim of ConfirmSelect.RabbitMQ.Client.Framing.IConfirmSelect.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConfirmSelect.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConfirmSelect.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConfirmSelect.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConfirmSelect.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConfirmSelect.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConfirmSelect.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.Bind(RabbitMQ.Client.Framing.IConfirmSelect)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.Constructor">
            <summary>Sets the shim of ConfirmSelect.ConfirmSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.ConstructorBoolean">
            <summary>Sets the shim of ConfirmSelect.ConfirmSelect(Boolean initNowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.HasContentGet">
            <summary>Sets the shim of ConfirmSelect.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.NowaitRabbitMQClientFramingIConfirmSelectget">
            <summary>Sets the shim of ConfirmSelect.RabbitMQ.Client.Framing.IConfirmSelect.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.ProtocolClassIdGet">
            <summary>Sets the shim of ConfirmSelect.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.ProtocolMethodIdGet">
            <summary>Sets the shim of ConfirmSelect.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.ProtocolMethodNameGet">
            <summary>Sets the shim of ConfirmSelect.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConfirmSelect.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelect.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConfirmSelect.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConfirmSelectOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.#ctor(RabbitMQ.Client.Framing.Impl.ConfirmSelectOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConfirmSelectOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ConfirmSelectOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConfirmSelectOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConfirmSelectOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConfirmSelectOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConfirmSelectOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConfirmSelectOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConfirmSelectOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.Bind(RabbitMQ.Client.Framing.IConfirmSelectOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.Constructor">
            <summary>Sets the shim of ConfirmSelectOk.ConfirmSelectOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.HasContentGet">
            <summary>Sets the shim of ConfirmSelectOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.ProtocolClassIdGet">
            <summary>Sets the shim of ConfirmSelectOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ConfirmSelectOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ConfirmSelectOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConfirmSelectOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConfirmSelectOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConfirmSelectOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.Connection</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.#ctor(RabbitMQ.Client.Framing.Impl.Connection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.Abort">
            <summary>Sets the shim of Connection.Abort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AbortInt32">
            <summary>Sets the shim of Connection.Abort(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AbortUInt16String">
            <summary>Sets the shim of Connection.Abort(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AbortUInt16StringInt32">
            <summary>Sets the shim of Connection.Abort(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AbortUInt16StringShutdownInitiatorInt32">
            <summary>Sets the shim of Connection.Abort(UInt16 reasonCode, String reasonText, ShutdownInitiator initiator, Int32 timeout)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.Abort">
            <summary>Sets the shim of Connection.Abort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.AbortInt32">
            <summary>Sets the shim of Connection.Abort(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.AbortUInt16String">
            <summary>Sets the shim of Connection.Abort(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.AbortUInt16StringInt32">
            <summary>Sets the shim of Connection.Abort(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.AbortUInt16StringShutdownInitiatorInt32">
            <summary>Sets the shim of Connection.Abort(UInt16 reasonCode, String reasonText, ShutdownInitiator initiator, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.AutoCloseGet">
            <summary>Sets the shim of Connection.get_AutoClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.AutoCloseSetBoolean">
            <summary>Sets the shim of Connection.set_AutoClose(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CallbackExceptionAddEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of Connection.add_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CallbackExceptionRemoveEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of Connection.remove_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ChannelCloseWrapperUInt16String">
            <summary>Sets the shim of Connection.ChannelCloseWrapper(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ChannelMaxGet">
            <summary>Sets the shim of Connection.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ClientPropertiesGet">
            <summary>Sets the shim of Connection.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ClientPropertiesSetIDictionaryOfStringObject">
            <summary>Sets the shim of Connection.set_ClientProperties(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ClientProvidedNameGet">
            <summary>Sets the shim of Connection.get_ClientProvidedName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ClientProvidedNameSetString">
            <summary>Sets the shim of Connection.set_ClientProvidedName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.Close">
            <summary>Sets the shim of Connection.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CloseInt32">
            <summary>Sets the shim of Connection.Close(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CloseReasonGet">
            <summary>Sets the shim of Connection.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CloseShutdownEventArgs">
            <summary>Sets the shim of Connection.Close(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CloseShutdownEventArgsBooleanInt32">
            <summary>Sets the shim of Connection.Close(ShutdownEventArgs reason, Boolean abort, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CloseUInt16String">
            <summary>Sets the shim of Connection.Close(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CloseUInt16StringInt32">
            <summary>Sets the shim of Connection.Close(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ClosingLoop">
            <summary>Sets the shim of Connection.ClosingLoop()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConnectionBlockedAddEventHandlerOfConnectionBlockedEventArgs">
            <summary>Sets the shim of Connection.add_ConnectionBlocked(EventHandler`1&lt;ConnectionBlockedEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConnectionBlockedRemoveEventHandlerOfConnectionBlockedEventArgs">
            <summary>Sets the shim of Connection.remove_ConnectionBlocked(EventHandler`1&lt;ConnectionBlockedEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConnectionCloseWrapperUInt16String">
            <summary>Sets the shim of Connection.ConnectionCloseWrapper(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConnectionRecoveryErrorAddEventHandlerOfConnectionRecoveryErrorEventArgs">
            <summary>Sets the shim of Connection.add_ConnectionRecoveryError(EventHandler`1&lt;ConnectionRecoveryErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConnectionRecoveryErrorRemoveEventHandlerOfConnectionRecoveryErrorEventArgs">
            <summary>Sets the shim of Connection.remove_ConnectionRecoveryError(EventHandler`1&lt;ConnectionRecoveryErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConnectionShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of Connection.add_ConnectionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConnectionShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of Connection.remove_ConnectionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConnectionUnblockedAddEventHandlerOfEventArgs">
            <summary>Sets the shim of Connection.add_ConnectionUnblocked(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConnectionUnblockedRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of Connection.remove_ConnectionUnblocked(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConsumerWorkServiceGet">
            <summary>Sets the shim of Connection.get_ConsumerWorkService()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ConsumerWorkServiceSetConsumerWorkService">
            <summary>Sets the shim of Connection.set_ConsumerWorkService(ConsumerWorkService value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CreateModel">
            <summary>Sets the shim of Connection.CreateModel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CreateSession">
            <summary>Sets the shim of Connection.CreateSession()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.CreateSessionInt32">
            <summary>Sets the shim of Connection.CreateSession(Int32 channelNumber)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.EndpointGet">
            <summary>Sets the shim of Connection.get_Endpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.EnsureIsOpen">
            <summary>Sets the shim of Connection.EnsureIsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.FinishClose">
            <summary>Sets the shim of Connection.FinishClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.FrameMaxGet">
            <summary>Sets the shim of Connection.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.FrameMaxSetUInt32">
            <summary>Sets the shim of Connection.set_FrameMax(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.HandleConnectionBlockedString">
            <summary>Sets the shim of Connection.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.HandleConnectionUnblocked">
            <summary>Sets the shim of Connection.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.HandleDomainUnloadObjectEventArgs">
            <summary>Sets the shim of Connection.HandleDomainUnload(Object sender, EventArgs ea)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.HandleMainLoopExceptionShutdownEventArgs">
            <summary>Sets the shim of Connection.HandleMainLoopException(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.HardProtocolExceptionHandlerHardProtocolException">
            <summary>Sets the shim of Connection.HardProtocolExceptionHandler(HardProtocolException hpe)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.HeartbeatGet">
            <summary>Sets the shim of Connection.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.HeartbeatReadTimerCallbackObject">
            <summary>Sets the shim of Connection.HeartbeatReadTimerCallback(Object state)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.HeartbeatSetUInt16">
            <summary>Sets the shim of Connection.set_Heartbeat(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.HeartbeatWriteTimerCallbackObject">
            <summary>Sets the shim of Connection.HeartbeatWriteTimerCallback(Object state)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.IdGet">
            <summary>Sets the shim of Connection.get_Id()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.InternalCloseShutdownEventArgs">
            <summary>Sets the shim of Connection.InternalClose(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.IsOpenGet">
            <summary>Sets the shim of Connection.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.KnownHostsGet">
            <summary>Sets the shim of Connection.get_KnownHosts()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.KnownHostsSetAmqpTcpEndpointArray">
            <summary>Sets the shim of Connection.set_KnownHosts(AmqpTcpEndpoint[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.LocalEndPointGet">
            <summary>Sets the shim of Connection.get_LocalEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.LocalPortGet">
            <summary>Sets the shim of Connection.get_LocalPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.LogCloseErrorStringException">
            <summary>Sets the shim of Connection.LogCloseError(String error, Exception ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.MainLoop">
            <summary>Sets the shim of Connection.MainLoop()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.MainLoopIteration">
            <summary>Sets the shim of Connection.MainLoopIteration()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.MaybeDisposeTimerTimerRef">
            <summary>Sets the shim of Connection.MaybeDisposeTimer(Timer&amp; timer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.MaybeStartHeartbeatTimers">
            <summary>Sets the shim of Connection.MaybeStartHeartbeatTimers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.MaybeStopHeartbeatTimers">
            <summary>Sets the shim of Connection.MaybeStopHeartbeatTimers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.NotifyHeartbeatListener">
            <summary>Sets the shim of Connection.NotifyHeartbeatListener()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.NotifyReceivedCloseOk">
            <summary>Sets the shim of Connection.NotifyReceivedCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the shim of Connection.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.OnConnectionBlockedConnectionBlockedEventArgs">
            <summary>Sets the shim of Connection.OnConnectionBlocked(ConnectionBlockedEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.OnConnectionUnblocked">
            <summary>Sets the shim of Connection.OnConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.OnShutdown">
            <summary>Sets the shim of Connection.OnShutdown()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.OpenBoolean">
            <summary>Sets the shim of Connection.Open(Boolean insist)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.PrettyPrintShutdownReport">
            <summary>Sets the shim of Connection.PrettyPrintShutdownReport()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ProtocolGet">
            <summary>Sets the shim of Connection.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ProtocolRabbitMQClientIConnectionget">
            <summary>Sets the shim of Connection.RabbitMQ.Client.IConnection.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.QuiesceChannelSoftProtocolException">
            <summary>Sets the shim of Connection.QuiesceChannel(SoftProtocolException pe)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.RecoverySucceededAddEventHandlerOfEventArgs">
            <summary>Sets the shim of Connection.add_RecoverySucceeded(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.RecoverySucceededRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of Connection.remove_RecoverySucceeded(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.RemoteEndPointGet">
            <summary>Sets the shim of Connection.get_RemoteEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.RemotePortGet">
            <summary>Sets the shim of Connection.get_RemotePort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ServerPropertiesGet">
            <summary>Sets the shim of Connection.get_ServerProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ServerPropertiesSetIDictionaryOfStringObject">
            <summary>Sets the shim of Connection.set_ServerProperties(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.SetCloseReasonShutdownEventArgs">
            <summary>Sets the shim of Connection.SetCloseReason(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ShutdownReportGet">
            <summary>Sets the shim of Connection.get_ShutdownReport()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.StartAndTune">
            <summary>Sets the shim of Connection.StartAndTune()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.StartMainLoopBoolean">
            <summary>Sets the shim of Connection.StartMainLoop(Boolean useBackgroundThread)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.SystemIDisposableDispose">
            <summary>Sets the shim of Connection.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.TerminateMainloop">
            <summary>Sets the shim of Connection.TerminateMainloop()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.ToString01">
            <summary>Sets the shim of Connection.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.WriteFrameFrame">
            <summary>Sets the shim of Connection.WriteFrame(Frame f)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AllInstances.WriteFrameSetIListOfFrame">
            <summary>Sets the shim of Connection.WriteFrameSet(IList`1&lt;Frame&gt; f)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AutoCloseGet">
            <summary>Sets the shim of Connection.get_AutoClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.AutoCloseSetBoolean">
            <summary>Sets the shim of Connection.set_AutoClose(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.Bind(RabbitMQ.Client.IConnection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.Bind(RabbitMQ.Client.NetworkConnection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CallbackExceptionAddEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of Connection.add_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CallbackExceptionRemoveEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of Connection.remove_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ChannelCloseWrapperUInt16String">
            <summary>Sets the shim of Connection.ChannelCloseWrapper(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ChannelMaxGet">
            <summary>Sets the shim of Connection.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ClientPropertiesGet">
            <summary>Sets the shim of Connection.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ClientPropertiesSetIDictionaryOfStringObject">
            <summary>Sets the shim of Connection.set_ClientProperties(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ClientProvidedNameGet">
            <summary>Sets the shim of Connection.get_ClientProvidedName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ClientProvidedNameSetString">
            <summary>Sets the shim of Connection.set_ClientProvidedName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.Close">
            <summary>Sets the shim of Connection.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CloseInt32">
            <summary>Sets the shim of Connection.Close(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CloseReasonGet">
            <summary>Sets the shim of Connection.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CloseShutdownEventArgs">
            <summary>Sets the shim of Connection.Close(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CloseShutdownEventArgsBooleanInt32">
            <summary>Sets the shim of Connection.Close(ShutdownEventArgs reason, Boolean abort, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CloseUInt16String">
            <summary>Sets the shim of Connection.Close(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CloseUInt16StringInt32">
            <summary>Sets the shim of Connection.Close(UInt16 reasonCode, String reasonText, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ClosingLoop">
            <summary>Sets the shim of Connection.ClosingLoop()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConnectionBlockedAddEventHandlerOfConnectionBlockedEventArgs">
            <summary>Sets the shim of Connection.add_ConnectionBlocked(EventHandler`1&lt;ConnectionBlockedEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConnectionBlockedRemoveEventHandlerOfConnectionBlockedEventArgs">
            <summary>Sets the shim of Connection.remove_ConnectionBlocked(EventHandler`1&lt;ConnectionBlockedEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConnectionCloseWrapperUInt16String">
            <summary>Sets the shim of Connection.ConnectionCloseWrapper(UInt16 reasonCode, String reasonText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConnectionRecoveryErrorAddEventHandlerOfConnectionRecoveryErrorEventArgs">
            <summary>Sets the shim of Connection.add_ConnectionRecoveryError(EventHandler`1&lt;ConnectionRecoveryErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConnectionRecoveryErrorRemoveEventHandlerOfConnectionRecoveryErrorEventArgs">
            <summary>Sets the shim of Connection.remove_ConnectionRecoveryError(EventHandler`1&lt;ConnectionRecoveryErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConnectionShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of Connection.add_ConnectionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConnectionShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of Connection.remove_ConnectionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConnectionUnblockedAddEventHandlerOfEventArgs">
            <summary>Sets the shim of Connection.add_ConnectionUnblocked(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConnectionUnblockedRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of Connection.remove_ConnectionUnblocked(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConstructorIConnectionFactoryBooleanIFrameHandlerString">
            <summary>Sets the shim of Connection.Connection(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConsumerWorkServiceGet">
            <summary>Sets the shim of Connection.get_ConsumerWorkService()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ConsumerWorkServiceSetConsumerWorkService">
            <summary>Sets the shim of Connection.set_ConsumerWorkService(ConsumerWorkService value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CreateModel">
            <summary>Sets the shim of Connection.CreateModel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CreateSession">
            <summary>Sets the shim of Connection.CreateSession()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.CreateSessionInt32">
            <summary>Sets the shim of Connection.CreateSession(Int32 channelNumber)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.DefaultClientProperties">
            <summary>Sets the shim of Connection.DefaultClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.EndpointGet">
            <summary>Sets the shim of Connection.get_Endpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.EnsureIsOpen">
            <summary>Sets the shim of Connection.EnsureIsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.FinishClose">
            <summary>Sets the shim of Connection.FinishClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.FrameMaxGet">
            <summary>Sets the shim of Connection.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.FrameMaxSetUInt32">
            <summary>Sets the shim of Connection.set_FrameMax(UInt32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.HandleConnectionBlockedString">
            <summary>Sets the shim of Connection.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.HandleConnectionUnblocked">
            <summary>Sets the shim of Connection.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.HandleDomainUnloadObjectEventArgs">
            <summary>Sets the shim of Connection.HandleDomainUnload(Object sender, EventArgs ea)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.HandleMainLoopExceptionShutdownEventArgs">
            <summary>Sets the shim of Connection.HandleMainLoopException(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.HardProtocolExceptionHandlerHardProtocolException">
            <summary>Sets the shim of Connection.HardProtocolExceptionHandler(HardProtocolException hpe)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.HeartbeatGet">
            <summary>Sets the shim of Connection.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.HeartbeatReadTimerCallbackObject">
            <summary>Sets the shim of Connection.HeartbeatReadTimerCallback(Object state)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.HeartbeatSetUInt16">
            <summary>Sets the shim of Connection.set_Heartbeat(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.HeartbeatWriteTimerCallbackObject">
            <summary>Sets the shim of Connection.HeartbeatWriteTimerCallback(Object state)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.IdGet">
            <summary>Sets the shim of Connection.get_Id()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.InternalCloseShutdownEventArgs">
            <summary>Sets the shim of Connection.InternalClose(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.IsOpenGet">
            <summary>Sets the shim of Connection.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.KnownHostsGet">
            <summary>Sets the shim of Connection.get_KnownHosts()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.KnownHostsSetAmqpTcpEndpointArray">
            <summary>Sets the shim of Connection.set_KnownHosts(AmqpTcpEndpoint[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.LocalEndPointGet">
            <summary>Sets the shim of Connection.get_LocalEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.LocalPortGet">
            <summary>Sets the shim of Connection.get_LocalPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.LogCloseErrorStringException">
            <summary>Sets the shim of Connection.LogCloseError(String error, Exception ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.MainLoop">
            <summary>Sets the shim of Connection.MainLoop()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.MainLoopIteration">
            <summary>Sets the shim of Connection.MainLoopIteration()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.MaybeDisposeTimerTimerRef">
            <summary>Sets the shim of Connection.MaybeDisposeTimer(Timer&amp; timer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.MaybeStartHeartbeatTimers">
            <summary>Sets the shim of Connection.MaybeStartHeartbeatTimers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.MaybeStopHeartbeatTimers">
            <summary>Sets the shim of Connection.MaybeStopHeartbeatTimers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.NegotiatedMaxValueUInt32UInt32">
            <summary>Sets the shim of Connection.NegotiatedMaxValue(UInt32 clientValue, UInt32 serverValue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.NotifyHeartbeatListener">
            <summary>Sets the shim of Connection.NotifyHeartbeatListener()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.NotifyReceivedCloseOk">
            <summary>Sets the shim of Connection.NotifyReceivedCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the shim of Connection.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.OnConnectionBlockedConnectionBlockedEventArgs">
            <summary>Sets the shim of Connection.OnConnectionBlocked(ConnectionBlockedEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.OnConnectionUnblocked">
            <summary>Sets the shim of Connection.OnConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.OnShutdown">
            <summary>Sets the shim of Connection.OnShutdown()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.OpenBoolean">
            <summary>Sets the shim of Connection.Open(Boolean insist)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.PrettyPrintShutdownReport">
            <summary>Sets the shim of Connection.PrettyPrintShutdownReport()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ProtocolGet">
            <summary>Sets the shim of Connection.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ProtocolRabbitMQClientIConnectionget">
            <summary>Sets the shim of Connection.RabbitMQ.Client.IConnection.get_Protocol()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.QuiesceChannelSoftProtocolException">
            <summary>Sets the shim of Connection.QuiesceChannel(SoftProtocolException pe)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.RecoverySucceededAddEventHandlerOfEventArgs">
            <summary>Sets the shim of Connection.add_RecoverySucceeded(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.RecoverySucceededRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of Connection.remove_RecoverySucceeded(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.RemoteEndPointGet">
            <summary>Sets the shim of Connection.get_RemoteEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.RemotePortGet">
            <summary>Sets the shim of Connection.get_RemotePort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ServerPropertiesGet">
            <summary>Sets the shim of Connection.get_ServerProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ServerPropertiesSetIDictionaryOfStringObject">
            <summary>Sets the shim of Connection.set_ServerProperties(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.SetCloseReasonShutdownEventArgs">
            <summary>Sets the shim of Connection.SetCloseReason(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ShutdownReportGet">
            <summary>Sets the shim of Connection.get_ShutdownReport()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.StartAndTune">
            <summary>Sets the shim of Connection.StartAndTune()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.StartMainLoopBoolean">
            <summary>Sets the shim of Connection.StartMainLoop(Boolean useBackgroundThread)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.SystemIDisposableDispose">
            <summary>Sets the shim of Connection.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.TerminateMainloop">
            <summary>Sets the shim of Connection.TerminateMainloop()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.ToString">
            <summary>Sets the shim of Connection.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.WriteFrameFrame">
            <summary>Sets the shim of Connection.WriteFrame(Frame f)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnection.WriteFrameSetIListOfFrame">
            <summary>Sets the shim of Connection.WriteFrameSet(IList`1&lt;Frame&gt; f)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionBlocked</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionBlocked)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionBlocked.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionBlocked.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionBlocked.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionBlocked.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionBlocked.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionBlocked.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AllInstances.ReasonRabbitMQClientFramingIConnectionBlockedget">
            <summary>Sets the shim of ConnectionBlocked.RabbitMQ.Client.Framing.IConnectionBlocked.get_Reason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionBlocked.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionBlocked.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.Bind(RabbitMQ.Client.Framing.IConnectionBlocked)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.Constructor">
            <summary>Sets the shim of ConnectionBlocked.ConnectionBlocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.ConstructorString">
            <summary>Sets the shim of ConnectionBlocked.ConnectionBlocked(String initReason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.HasContentGet">
            <summary>Sets the shim of ConnectionBlocked.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionBlocked.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionBlocked.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionBlocked.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionBlocked.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.ReasonRabbitMQClientFramingIConnectionBlockedget">
            <summary>Sets the shim of ConnectionBlocked.RabbitMQ.Client.Framing.IConnectionBlocked.get_Reason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionBlocked.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionBlocked.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionClose</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionClose)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionClose.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.ClassIdRabbitMQClientFramingIConnectionCloseget">
            <summary>Sets the shim of ConnectionClose.RabbitMQ.Client.Framing.IConnectionClose.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionClose.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.MethodIdRabbitMQClientFramingIConnectionCloseget">
            <summary>Sets the shim of ConnectionClose.RabbitMQ.Client.Framing.IConnectionClose.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionClose.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionClose.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionClose.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionClose.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.ReplyCodeRabbitMQClientFramingIConnectionCloseget">
            <summary>Sets the shim of ConnectionClose.RabbitMQ.Client.Framing.IConnectionClose.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.ReplyTextRabbitMQClientFramingIConnectionCloseget">
            <summary>Sets the shim of ConnectionClose.RabbitMQ.Client.Framing.IConnectionClose.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionClose.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionClose.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.Bind(RabbitMQ.Client.Framing.IConnectionClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.ClassIdRabbitMQClientFramingIConnectionCloseget">
            <summary>Sets the shim of ConnectionClose.RabbitMQ.Client.Framing.IConnectionClose.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.Constructor">
            <summary>Sets the shim of ConnectionClose.ConnectionClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.ConstructorUInt16StringUInt16UInt16">
            <summary>Sets the shim of ConnectionClose.ConnectionClose(UInt16 initReplyCode, String initReplyText, UInt16 initClassId, UInt16 initMethodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.HasContentGet">
            <summary>Sets the shim of ConnectionClose.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.MethodIdRabbitMQClientFramingIConnectionCloseget">
            <summary>Sets the shim of ConnectionClose.RabbitMQ.Client.Framing.IConnectionClose.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionClose.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionClose.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionClose.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionClose.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.ReplyCodeRabbitMQClientFramingIConnectionCloseget">
            <summary>Sets the shim of ConnectionClose.RabbitMQ.Client.Framing.IConnectionClose.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.ReplyTextRabbitMQClientFramingIConnectionCloseget">
            <summary>Sets the shim of ConnectionClose.RabbitMQ.Client.Framing.IConnectionClose.get_ReplyText()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionClose.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionClose.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionCloseOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionCloseOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionCloseOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionCloseOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionCloseOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionCloseOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionCloseOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionCloseOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionCloseOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionCloseOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.Bind(RabbitMQ.Client.Framing.IConnectionCloseOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.Constructor">
            <summary>Sets the shim of ConnectionCloseOk.ConnectionCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.HasContentGet">
            <summary>Sets the shim of ConnectionCloseOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionCloseOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionCloseOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionCloseOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionCloseOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionCloseOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionCloseOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionOpen</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionOpen)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionOpen.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionOpen.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionOpen.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionOpen.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionOpen.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionOpen.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.Reserved1RabbitMQClientFramingIConnectionOpenget">
            <summary>Sets the shim of ConnectionOpen.RabbitMQ.Client.Framing.IConnectionOpen.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.Reserved2RabbitMQClientFramingIConnectionOpenget">
            <summary>Sets the shim of ConnectionOpen.RabbitMQ.Client.Framing.IConnectionOpen.get_Reserved2()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.VirtualHostRabbitMQClientFramingIConnectionOpenget">
            <summary>Sets the shim of ConnectionOpen.RabbitMQ.Client.Framing.IConnectionOpen.get_VirtualHost()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionOpen.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionOpen.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.Bind(RabbitMQ.Client.Framing.IConnectionOpen)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.Constructor">
            <summary>Sets the shim of ConnectionOpen.ConnectionOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.ConstructorStringStringBoolean">
            <summary>Sets the shim of ConnectionOpen.ConnectionOpen(String initVirtualHost, String initReserved1, Boolean initReserved2)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.HasContentGet">
            <summary>Sets the shim of ConnectionOpen.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionOpen.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionOpen.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionOpen.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionOpen.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.Reserved1RabbitMQClientFramingIConnectionOpenget">
            <summary>Sets the shim of ConnectionOpen.RabbitMQ.Client.Framing.IConnectionOpen.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.Reserved2RabbitMQClientFramingIConnectionOpenget">
            <summary>Sets the shim of ConnectionOpen.RabbitMQ.Client.Framing.IConnectionOpen.get_Reserved2()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.VirtualHostRabbitMQClientFramingIConnectionOpenget">
            <summary>Sets the shim of ConnectionOpen.RabbitMQ.Client.Framing.IConnectionOpen.get_VirtualHost()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpen.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionOpen.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionOpenOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionOpenOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionOpenOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionOpenOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionOpenOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionOpenOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionOpenOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionOpenOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AllInstances.Reserved1RabbitMQClientFramingIConnectionOpenOkget">
            <summary>Sets the shim of ConnectionOpenOk.RabbitMQ.Client.Framing.IConnectionOpenOk.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionOpenOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionOpenOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.Bind(RabbitMQ.Client.Framing.IConnectionOpenOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.Constructor">
            <summary>Sets the shim of ConnectionOpenOk.ConnectionOpenOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.ConstructorString">
            <summary>Sets the shim of ConnectionOpenOk.ConnectionOpenOk(String initReserved1)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.HasContentGet">
            <summary>Sets the shim of ConnectionOpenOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionOpenOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionOpenOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionOpenOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionOpenOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.Reserved1RabbitMQClientFramingIConnectionOpenOkget">
            <summary>Sets the shim of ConnectionOpenOk.RabbitMQ.Client.Framing.IConnectionOpenOk.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionOpenOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionOpenOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionSecure</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionSecure)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionSecure.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AllInstances.ChallengeRabbitMQClientFramingIConnectionSecureget">
            <summary>Sets the shim of ConnectionSecure.RabbitMQ.Client.Framing.IConnectionSecure.get_Challenge()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionSecure.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionSecure.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionSecure.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionSecure.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionSecure.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionSecure.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionSecure.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.Bind(RabbitMQ.Client.Framing.IConnectionSecure)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.ChallengeRabbitMQClientFramingIConnectionSecureget">
            <summary>Sets the shim of ConnectionSecure.RabbitMQ.Client.Framing.IConnectionSecure.get_Challenge()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.Constructor">
            <summary>Sets the shim of ConnectionSecure.ConnectionSecure()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.ConstructorByteArray">
            <summary>Sets the shim of ConnectionSecure.ConnectionSecure(Byte[] initChallenge)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.HasContentGet">
            <summary>Sets the shim of ConnectionSecure.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionSecure.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionSecure.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionSecure.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionSecure.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecure.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionSecure.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionSecureOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionSecureOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionSecureOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionSecureOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionSecureOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionSecureOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionSecureOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionSecureOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AllInstances.ResponseRabbitMQClientFramingIConnectionSecureOkget">
            <summary>Sets the shim of ConnectionSecureOk.RabbitMQ.Client.Framing.IConnectionSecureOk.get_Response()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionSecureOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionSecureOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.Bind(RabbitMQ.Client.Framing.IConnectionSecureOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.Constructor">
            <summary>Sets the shim of ConnectionSecureOk.ConnectionSecureOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.ConstructorByteArray">
            <summary>Sets the shim of ConnectionSecureOk.ConnectionSecureOk(Byte[] initResponse)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.HasContentGet">
            <summary>Sets the shim of ConnectionSecureOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionSecureOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionSecureOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionSecureOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionSecureOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.ResponseRabbitMQClientFramingIConnectionSecureOkget">
            <summary>Sets the shim of ConnectionSecureOk.RabbitMQ.Client.Framing.IConnectionSecureOk.get_Response()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionSecureOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionSecureOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionStart</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionStart)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionStart.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionStart.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.LocalesRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_Locales()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.MechanismsRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_Mechanisms()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionStart.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionStart.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionStart.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionStart.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.ServerPropertiesRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_ServerProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.VersionMajorRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_VersionMajor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.VersionMinorRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_VersionMinor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionStart.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionStart.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.Bind(RabbitMQ.Client.Framing.IConnectionStart)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.Constructor">
            <summary>Sets the shim of ConnectionStart.ConnectionStart()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.ConstructorByteByteIDictionaryOfStringObjectByteArrayByteArray">
            <summary>Sets the shim of ConnectionStart.ConnectionStart(Byte initVersionMajor, Byte initVersionMinor, IDictionary`2&lt;String,Object&gt; initServerProperties, Byte[] initMechanisms, Byte[] initLocales)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.HasContentGet">
            <summary>Sets the shim of ConnectionStart.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.LocalesRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_Locales()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.MechanismsRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_Mechanisms()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionStart.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionStart.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionStart.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionStart.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.ServerPropertiesRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_ServerProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.VersionMajorRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_VersionMajor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.VersionMinorRabbitMQClientFramingIConnectionStartget">
            <summary>Sets the shim of ConnectionStart.RabbitMQ.Client.Framing.IConnectionStart.get_VersionMinor()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStart.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionStart.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionStartOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionStartOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionStartOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.ClientPropertiesRabbitMQClientFramingIConnectionStartOkget">
            <summary>Sets the shim of ConnectionStartOk.RabbitMQ.Client.Framing.IConnectionStartOk.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionStartOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.LocaleRabbitMQClientFramingIConnectionStartOkget">
            <summary>Sets the shim of ConnectionStartOk.RabbitMQ.Client.Framing.IConnectionStartOk.get_Locale()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.MechanismRabbitMQClientFramingIConnectionStartOkget">
            <summary>Sets the shim of ConnectionStartOk.RabbitMQ.Client.Framing.IConnectionStartOk.get_Mechanism()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionStartOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionStartOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionStartOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionStartOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.ResponseRabbitMQClientFramingIConnectionStartOkget">
            <summary>Sets the shim of ConnectionStartOk.RabbitMQ.Client.Framing.IConnectionStartOk.get_Response()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionStartOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionStartOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.Bind(RabbitMQ.Client.Framing.IConnectionStartOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.ClientPropertiesRabbitMQClientFramingIConnectionStartOkget">
            <summary>Sets the shim of ConnectionStartOk.RabbitMQ.Client.Framing.IConnectionStartOk.get_ClientProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.Constructor">
            <summary>Sets the shim of ConnectionStartOk.ConnectionStartOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.ConstructorIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the shim of ConnectionStartOk.ConnectionStartOk(IDictionary`2&lt;String,Object&gt; initClientProperties, String initMechanism, Byte[] initResponse, String initLocale)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.HasContentGet">
            <summary>Sets the shim of ConnectionStartOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.LocaleRabbitMQClientFramingIConnectionStartOkget">
            <summary>Sets the shim of ConnectionStartOk.RabbitMQ.Client.Framing.IConnectionStartOk.get_Locale()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.MechanismRabbitMQClientFramingIConnectionStartOkget">
            <summary>Sets the shim of ConnectionStartOk.RabbitMQ.Client.Framing.IConnectionStartOk.get_Mechanism()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionStartOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionStartOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionStartOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionStartOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.ResponseRabbitMQClientFramingIConnectionStartOkget">
            <summary>Sets the shim of ConnectionStartOk.RabbitMQ.Client.Framing.IConnectionStartOk.get_Response()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionStartOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionStartOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionTune</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionTune)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionTune.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.ChannelMaxRabbitMQClientFramingIConnectionTuneget">
            <summary>Sets the shim of ConnectionTune.RabbitMQ.Client.Framing.IConnectionTune.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.FrameMaxRabbitMQClientFramingIConnectionTuneget">
            <summary>Sets the shim of ConnectionTune.RabbitMQ.Client.Framing.IConnectionTune.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionTune.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.HeartbeatRabbitMQClientFramingIConnectionTuneget">
            <summary>Sets the shim of ConnectionTune.RabbitMQ.Client.Framing.IConnectionTune.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionTune.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionTune.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionTune.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionTune.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionTune.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionTune.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.Bind(RabbitMQ.Client.Framing.IConnectionTune)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.ChannelMaxRabbitMQClientFramingIConnectionTuneget">
            <summary>Sets the shim of ConnectionTune.RabbitMQ.Client.Framing.IConnectionTune.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.Constructor">
            <summary>Sets the shim of ConnectionTune.ConnectionTune()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.ConstructorUInt16UInt32UInt16">
            <summary>Sets the shim of ConnectionTune.ConnectionTune(UInt16 initChannelMax, UInt32 initFrameMax, UInt16 initHeartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.FrameMaxRabbitMQClientFramingIConnectionTuneget">
            <summary>Sets the shim of ConnectionTune.RabbitMQ.Client.Framing.IConnectionTune.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.HasContentGet">
            <summary>Sets the shim of ConnectionTune.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.HeartbeatRabbitMQClientFramingIConnectionTuneget">
            <summary>Sets the shim of ConnectionTune.RabbitMQ.Client.Framing.IConnectionTune.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionTune.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionTune.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionTune.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionTune.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTune.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionTune.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionTuneOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionTuneOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionTuneOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.ChannelMaxRabbitMQClientFramingIConnectionTuneOkget">
            <summary>Sets the shim of ConnectionTuneOk.RabbitMQ.Client.Framing.IConnectionTuneOk.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.FrameMaxRabbitMQClientFramingIConnectionTuneOkget">
            <summary>Sets the shim of ConnectionTuneOk.RabbitMQ.Client.Framing.IConnectionTuneOk.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionTuneOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.HeartbeatRabbitMQClientFramingIConnectionTuneOkget">
            <summary>Sets the shim of ConnectionTuneOk.RabbitMQ.Client.Framing.IConnectionTuneOk.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionTuneOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionTuneOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionTuneOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionTuneOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionTuneOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionTuneOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.Bind(RabbitMQ.Client.Framing.IConnectionTuneOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.ChannelMaxRabbitMQClientFramingIConnectionTuneOkget">
            <summary>Sets the shim of ConnectionTuneOk.RabbitMQ.Client.Framing.IConnectionTuneOk.get_ChannelMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.Constructor">
            <summary>Sets the shim of ConnectionTuneOk.ConnectionTuneOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.ConstructorUInt16UInt32UInt16">
            <summary>Sets the shim of ConnectionTuneOk.ConnectionTuneOk(UInt16 initChannelMax, UInt32 initFrameMax, UInt16 initHeartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.FrameMaxRabbitMQClientFramingIConnectionTuneOkget">
            <summary>Sets the shim of ConnectionTuneOk.RabbitMQ.Client.Framing.IConnectionTuneOk.get_FrameMax()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.HasContentGet">
            <summary>Sets the shim of ConnectionTuneOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.HeartbeatRabbitMQClientFramingIConnectionTuneOkget">
            <summary>Sets the shim of ConnectionTuneOk.RabbitMQ.Client.Framing.IConnectionTuneOk.get_Heartbeat()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionTuneOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionTuneOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionTuneOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionTuneOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionTuneOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionTuneOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ConnectionUnblocked</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.#ctor(RabbitMQ.Client.Framing.Impl.ConnectionUnblocked)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionUnblocked.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.AllInstances.HasContentGet">
            <summary>Sets the shim of ConnectionUnblocked.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionUnblocked.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionUnblocked.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionUnblocked.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionUnblocked.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionUnblocked.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ConnectionUnblocked.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.Bind(RabbitMQ.Client.Framing.IConnectionUnblocked)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.Constructor">
            <summary>Sets the shim of ConnectionUnblocked.ConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.HasContentGet">
            <summary>Sets the shim of ConnectionUnblocked.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.ProtocolClassIdGet">
            <summary>Sets the shim of ConnectionUnblocked.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.ProtocolMethodIdGet">
            <summary>Sets the shim of ConnectionUnblocked.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.ProtocolMethodNameGet">
            <summary>Sets the shim of ConnectionUnblocked.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ConnectionUnblocked.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimConnectionUnblocked.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ConnectionUnblocked.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ExchangeBind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.#ctor(RabbitMQ.Client.Framing.Impl.ExchangeBind)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeBind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.ArgumentsRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.DestinationRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Destination()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.HasContentGet">
            <summary>Sets the shim of ExchangeBind.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.NowaitRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeBind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeBind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeBind.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeBind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.Reserved1RabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.RoutingKeyRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.SourceRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Source()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeBind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeBind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.ArgumentsRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Arguments()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.Bind(RabbitMQ.Client.Framing.IExchangeBind)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.Constructor">
            <summary>Sets the shim of ExchangeBind.ExchangeBind()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.ConstructorUInt16StringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ExchangeBind.ExchangeBind(UInt16 initReserved1, String initDestination, String initSource, String initRoutingKey, Boolean initNowait, IDictionary`2&lt;String,Object&gt; initArguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.DestinationRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Destination()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.HasContentGet">
            <summary>Sets the shim of ExchangeBind.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.NowaitRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeBind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeBind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeBind.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeBind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.Reserved1RabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.RoutingKeyRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.SourceRabbitMQClientFramingIExchangeBindget">
            <summary>Sets the shim of ExchangeBind.RabbitMQ.Client.Framing.IExchangeBind.get_Source()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBind.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeBind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ExchangeBindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.#ctor(RabbitMQ.Client.Framing.Impl.ExchangeBindOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeBindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ExchangeBindOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeBindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeBindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeBindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeBindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeBindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeBindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.Bind(RabbitMQ.Client.Framing.IExchangeBindOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.Constructor">
            <summary>Sets the shim of ExchangeBindOk.ExchangeBindOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.HasContentGet">
            <summary>Sets the shim of ExchangeBindOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeBindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeBindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeBindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeBindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeBindOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeBindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ExchangeDeclare</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.#ctor(RabbitMQ.Client.Framing.Impl.ExchangeDeclare)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeDeclare.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.ArgumentsRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.AutoDeleteRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_AutoDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.DurableRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Durable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.ExchangeRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.HasContentGet">
            <summary>Sets the shim of ExchangeDeclare.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.InternalRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Internal()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.NowaitRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.PassiveRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Passive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeDeclare.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeDeclare.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeDeclare.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeDeclare.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.Reserved1RabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.TypeRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeDeclare.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeDeclare.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.ArgumentsRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.AutoDeleteRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_AutoDelete()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.Bind(RabbitMQ.Client.Framing.IExchangeDeclare)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.Constructor">
            <summary>Sets the shim of ExchangeDeclare.ExchangeDeclare()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.ConstructorUInt16StringStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ExchangeDeclare.ExchangeDeclare(UInt16 initReserved1, String initExchange, String initType, Boolean initPassive, Boolean initDurable, Boolean initAutoDelete, Boolean initInternal, Boolean initNowait, IDictionary`2&lt;String,Object&gt; initArguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.DurableRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Durable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.ExchangeRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.HasContentGet">
            <summary>Sets the shim of ExchangeDeclare.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.InternalRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Internal()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.NowaitRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.PassiveRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Passive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeDeclare.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeDeclare.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeDeclare.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeDeclare.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.Reserved1RabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.TypeRabbitMQClientFramingIExchangeDeclareget">
            <summary>Sets the shim of ExchangeDeclare.RabbitMQ.Client.Framing.IExchangeDeclare.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclare.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeDeclare.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ExchangeDeclareOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.#ctor(RabbitMQ.Client.Framing.Impl.ExchangeDeclareOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeDeclareOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ExchangeDeclareOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeDeclareOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeDeclareOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeDeclareOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeDeclareOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeDeclareOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeDeclareOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.Bind(RabbitMQ.Client.Framing.IExchangeDeclareOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.Constructor">
            <summary>Sets the shim of ExchangeDeclareOk.ExchangeDeclareOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.HasContentGet">
            <summary>Sets the shim of ExchangeDeclareOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeDeclareOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeDeclareOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeDeclareOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeDeclareOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeclareOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeDeclareOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ExchangeDelete</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.#ctor(RabbitMQ.Client.Framing.Impl.ExchangeDelete)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeDelete.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.ExchangeRabbitMQClientFramingIExchangeDeleteget">
            <summary>Sets the shim of ExchangeDelete.RabbitMQ.Client.Framing.IExchangeDelete.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.HasContentGet">
            <summary>Sets the shim of ExchangeDelete.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.IfUnusedRabbitMQClientFramingIExchangeDeleteget">
            <summary>Sets the shim of ExchangeDelete.RabbitMQ.Client.Framing.IExchangeDelete.get_IfUnused()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.NowaitRabbitMQClientFramingIExchangeDeleteget">
            <summary>Sets the shim of ExchangeDelete.RabbitMQ.Client.Framing.IExchangeDelete.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeDelete.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeDelete.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeDelete.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeDelete.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.Reserved1RabbitMQClientFramingIExchangeDeleteget">
            <summary>Sets the shim of ExchangeDelete.RabbitMQ.Client.Framing.IExchangeDelete.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeDelete.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeDelete.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.Bind(RabbitMQ.Client.Framing.IExchangeDelete)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.Constructor">
            <summary>Sets the shim of ExchangeDelete.ExchangeDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.ConstructorUInt16StringBooleanBoolean">
            <summary>Sets the shim of ExchangeDelete.ExchangeDelete(UInt16 initReserved1, String initExchange, Boolean initIfUnused, Boolean initNowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.ExchangeRabbitMQClientFramingIExchangeDeleteget">
            <summary>Sets the shim of ExchangeDelete.RabbitMQ.Client.Framing.IExchangeDelete.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.HasContentGet">
            <summary>Sets the shim of ExchangeDelete.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.IfUnusedRabbitMQClientFramingIExchangeDeleteget">
            <summary>Sets the shim of ExchangeDelete.RabbitMQ.Client.Framing.IExchangeDelete.get_IfUnused()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.NowaitRabbitMQClientFramingIExchangeDeleteget">
            <summary>Sets the shim of ExchangeDelete.RabbitMQ.Client.Framing.IExchangeDelete.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeDelete.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeDelete.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeDelete.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeDelete.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.Reserved1RabbitMQClientFramingIExchangeDeleteget">
            <summary>Sets the shim of ExchangeDelete.RabbitMQ.Client.Framing.IExchangeDelete.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDelete.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeDelete.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ExchangeDeleteOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.#ctor(RabbitMQ.Client.Framing.Impl.ExchangeDeleteOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeDeleteOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ExchangeDeleteOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeDeleteOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeDeleteOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeDeleteOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeDeleteOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeDeleteOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeDeleteOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.Bind(RabbitMQ.Client.Framing.IExchangeDeleteOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.Constructor">
            <summary>Sets the shim of ExchangeDeleteOk.ExchangeDeleteOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.HasContentGet">
            <summary>Sets the shim of ExchangeDeleteOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeDeleteOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeDeleteOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeDeleteOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeDeleteOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeDeleteOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeDeleteOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ExchangeUnbind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.#ctor(RabbitMQ.Client.Framing.Impl.ExchangeUnbind)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeUnbind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.ArgumentsRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.DestinationRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Destination()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.HasContentGet">
            <summary>Sets the shim of ExchangeUnbind.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.NowaitRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeUnbind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeUnbind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeUnbind.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeUnbind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.Reserved1RabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.RoutingKeyRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.SourceRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Source()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeUnbind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeUnbind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.ArgumentsRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Arguments()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.Bind(RabbitMQ.Client.Framing.IExchangeUnbind)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.Constructor">
            <summary>Sets the shim of ExchangeUnbind.ExchangeUnbind()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.ConstructorUInt16StringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ExchangeUnbind.ExchangeUnbind(UInt16 initReserved1, String initDestination, String initSource, String initRoutingKey, Boolean initNowait, IDictionary`2&lt;String,Object&gt; initArguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.DestinationRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Destination()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.HasContentGet">
            <summary>Sets the shim of ExchangeUnbind.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.NowaitRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeUnbind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeUnbind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeUnbind.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeUnbind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.Reserved1RabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.RoutingKeyRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.SourceRabbitMQClientFramingIExchangeUnbindget">
            <summary>Sets the shim of ExchangeUnbind.RabbitMQ.Client.Framing.IExchangeUnbind.get_Source()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbind.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeUnbind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ExchangeUnbindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.#ctor(RabbitMQ.Client.Framing.Impl.ExchangeUnbindOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeUnbindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.AllInstances.HasContentGet">
            <summary>Sets the shim of ExchangeUnbindOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeUnbindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeUnbindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeUnbindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeUnbindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeUnbindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of ExchangeUnbindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.Bind(RabbitMQ.Client.Framing.IExchangeUnbindOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.Constructor">
            <summary>Sets the shim of ExchangeUnbindOk.ExchangeUnbindOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.HasContentGet">
            <summary>Sets the shim of ExchangeUnbindOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.ProtocolClassIdGet">
            <summary>Sets the shim of ExchangeUnbindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.ProtocolMethodIdGet">
            <summary>Sets the shim of ExchangeUnbindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.ProtocolMethodNameGet">
            <summary>Sets the shim of ExchangeUnbindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of ExchangeUnbindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimExchangeUnbindOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of ExchangeUnbindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimIProtocolExtensions">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.IProtocolExtensions</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimIProtocolExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimIProtocolExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimIProtocolExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimIProtocolExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimIProtocolExtensions.CreateFrameHandlerIProtocolAmqpTcpEndpointFuncOfAddressFamilyITcpClientInt32Int32Int32">
            <summary>Sets the shim of IProtocolExtensions.CreateFrameHandler(IProtocol protocol, AmqpTcpEndpoint endpoint, Func`2&lt;AddressFamily,ITcpClient&gt; socketFactory, Int32 connectionTimeout, Int32 readTimeout, Int32 writeTimeout)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.Model</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.#ctor(RabbitMQ.Client.Framing.Impl.Model)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.BasicAckUInt64Boolean">
            <summary>Sets the shim of Model.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.BasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of Model.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.BasicQosUInt32UInt16Boolean">
            <summary>Sets the shim of Model.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.BasicRecoverAsyncBoolean">
            <summary>Sets the shim of Model.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.BasicRejectUInt64Boolean">
            <summary>Sets the shim of Model.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.ConnectionTuneOkUInt16UInt32UInt16">
            <summary>Sets the shim of Model.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.CreateBasicProperties">
            <summary>Sets the shim of Model.CreateBasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.DispatchAsynchronousCommand">
            <summary>Sets the shim of Model.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.QueueUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of Model.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.TxCommit">
            <summary>Sets the shim of Model.TxCommit()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.TxRollback">
            <summary>Sets the shim of Model.TxRollback()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances.TxSelect">
            <summary>Sets the shim of Model.TxSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_BasicCancelStringBoolean">
            <summary>Sets the shim of Model._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_BasicConsumeStringStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_BasicGetStringBoolean">
            <summary>Sets the shim of Model._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of Model._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_BasicRecoverBoolean">
            <summary>Sets the shim of Model._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ChannelCloseOk">
            <summary>Sets the shim of Model._Private_ChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of Model._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ChannelFlowOkBoolean">
            <summary>Sets the shim of Model._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ChannelOpenString">
            <summary>Sets the shim of Model._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ConfirmSelectBoolean">
            <summary>Sets the shim of Model._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ConnectionCloseOk">
            <summary>Sets the shim of Model._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of Model._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ConnectionOpenStringStringBoolean">
            <summary>Sets the shim of Model._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ConnectionSecureOkByteArray">
            <summary>Sets the shim of Model._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the shim of Model._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ExchangeBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ExchangeDeclareStringStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ExchangeDeleteStringBooleanBoolean">
            <summary>Sets the shim of Model._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_ExchangeUnbindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_QueueBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_QueueDeclareStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_QueueDeleteStringBooleanBooleanBoolean">
            <summary>Sets the shim of Model._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.AllInstances._Private_QueuePurgeStringBoolean">
            <summary>Sets the shim of Model._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.BasicAckUInt64Boolean">
            <summary>Sets the shim of Model.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.BasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of Model.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.BasicQosUInt32UInt16Boolean">
            <summary>Sets the shim of Model.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.BasicRecoverAsyncBoolean">
            <summary>Sets the shim of Model.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.BasicRejectUInt64Boolean">
            <summary>Sets the shim of Model.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.Bind(RabbitMQ.Client.IModel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.Bind(RabbitMQ.Client.IRecoverable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.Bind(RabbitMQ.Client.Impl.IFullModel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.ConnectionTuneOkUInt16UInt32UInt16">
            <summary>Sets the shim of Model.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.ConstructorISession">
            <summary>Sets the shim of Model.Model(ISession session)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.ConstructorISessionConsumerWorkService">
            <summary>Sets the shim of Model.Model(ISession session, ConsumerWorkService workService)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.CreateBasicProperties">
            <summary>Sets the shim of Model.CreateBasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.DispatchAsynchronousCommand">
            <summary>Sets the shim of Model.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.QueueUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of Model.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.TxCommit">
            <summary>Sets the shim of Model.TxCommit()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.TxRollback">
            <summary>Sets the shim of Model.TxRollback()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel.TxSelect">
            <summary>Sets the shim of Model.TxSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_BasicCancelStringBoolean">
            <summary>Sets the shim of Model._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_BasicConsumeStringStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_BasicGetStringBoolean">
            <summary>Sets the shim of Model._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of Model._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_BasicRecoverBoolean">
            <summary>Sets the shim of Model._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ChannelCloseOk">
            <summary>Sets the shim of Model._Private_ChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of Model._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ChannelFlowOkBoolean">
            <summary>Sets the shim of Model._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ChannelOpenString">
            <summary>Sets the shim of Model._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ConfirmSelectBoolean">
            <summary>Sets the shim of Model._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ConnectionCloseOk">
            <summary>Sets the shim of Model._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of Model._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ConnectionOpenStringStringBoolean">
            <summary>Sets the shim of Model._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ConnectionSecureOkByteArray">
            <summary>Sets the shim of Model._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the shim of Model._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ExchangeBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ExchangeDeclareStringStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ExchangeDeleteStringBooleanBoolean">
            <summary>Sets the shim of Model._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_ExchangeUnbindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_QueueBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_QueueDeclareStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of Model._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_QueueDeleteStringBooleanBooleanBoolean">
            <summary>Sets the shim of Model._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimModel._Private_QueuePurgeStringBoolean">
            <summary>Sets the shim of Model._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.ProtocolBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.#ctor(RabbitMQ.Client.Framing.Impl.ProtocolBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.CanSendWhileClosedCommand">
            <summary>Sets the shim of ProtocolBase.CanSendWhileClosed(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.CreateChannelCloseUInt16StringCommandOutInt32OutInt32Out">
            <summary>Sets the shim of ProtocolBase.CreateChannelClose(UInt16 reasonCode, String reasonText, Command&amp; request, Int32&amp; replyClassId, Int32&amp; replyMethodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.CreateConnectionCloseUInt16StringCommandOutInt32OutInt32Out">
            <summary>Sets the shim of ProtocolBase.CreateConnectionClose(UInt16 reasonCode, String reasonText, Command&amp; request, Int32&amp; replyClassId, Int32&amp; replyMethodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.CreateConnectionConnectionFactoryIFrameHandlerBoolean">
            <summary>Sets the shim of ProtocolBase.CreateConnection(ConnectionFactory factory, IFrameHandler frameHandler, Boolean automaticRecoveryEnabled)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.CreateConnectionConnectionFactoryIFrameHandlerBooleanString">
            <summary>Sets the shim of ProtocolBase.CreateConnection(ConnectionFactory factory, IFrameHandler frameHandler, Boolean automaticRecoveryEnabled, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.CreateConnectionIConnectionFactoryBooleanIFrameHandler">
            <summary>Sets the shim of ProtocolBase.CreateConnection(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.CreateConnectionIConnectionFactoryBooleanIFrameHandlerString">
            <summary>Sets the shim of ProtocolBase.CreateConnection(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.CreateModelISession">
            <summary>Sets the shim of ProtocolBase.CreateModel(ISession session)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.CreateModelISessionConsumerWorkService">
            <summary>Sets the shim of ProtocolBase.CreateModel(ISession session, ConsumerWorkService workService)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.EqualsObject">
            <summary>Sets the shim of ProtocolBase.Equals(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.GetHashCode01">
            <summary>Sets the shim of ProtocolBase.GetHashCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.ToString01">
            <summary>Sets the shim of ProtocolBase.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.AllInstances.VersionGet">
            <summary>Sets the shim of ProtocolBase.get_Version()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.Bind(RabbitMQ.Client.IProtocol)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.CanSendWhileClosedCommand">
            <summary>Sets the shim of ProtocolBase.CanSendWhileClosed(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.Constructor">
            <summary>Sets the shim of ProtocolBase.ProtocolBase()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.CreateConnectionConnectionFactoryIFrameHandlerBoolean">
            <summary>Sets the shim of ProtocolBase.CreateConnection(ConnectionFactory factory, IFrameHandler frameHandler, Boolean automaticRecoveryEnabled)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.CreateConnectionConnectionFactoryIFrameHandlerBooleanString">
            <summary>Sets the shim of ProtocolBase.CreateConnection(ConnectionFactory factory, IFrameHandler frameHandler, Boolean automaticRecoveryEnabled, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.CreateConnectionIConnectionFactoryBooleanIFrameHandler">
            <summary>Sets the shim of ProtocolBase.CreateConnection(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.CreateConnectionIConnectionFactoryBooleanIFrameHandlerString">
            <summary>Sets the shim of ProtocolBase.CreateConnection(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler, String clientProvidedName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.CreateModelISession">
            <summary>Sets the shim of ProtocolBase.CreateModel(ISession session)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.CreateModelISessionConsumerWorkService">
            <summary>Sets the shim of ProtocolBase.CreateModel(ISession session, ConsumerWorkService workService)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.EqualsObject">
            <summary>Sets the shim of ProtocolBase.Equals(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.GetHashCode">
            <summary>Sets the shim of ProtocolBase.GetHashCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.ToString">
            <summary>Sets the shim of ProtocolBase.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimProtocolBase.VersionGet">
            <summary>Sets the shim of ProtocolBase.get_Version()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueueBind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.#ctor(RabbitMQ.Client.Framing.Impl.QueueBind)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueBind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.ArgumentsRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.ExchangeRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.HasContentGet">
            <summary>Sets the shim of QueueBind.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.NowaitRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueueBind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueBind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueBind.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.QueueRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueBind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.Reserved1RabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.RoutingKeyRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueBind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueBind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.ArgumentsRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Arguments()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.Bind(RabbitMQ.Client.Framing.IQueueBind)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.Constructor">
            <summary>Sets the shim of QueueBind.QueueBind()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.ConstructorUInt16StringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of QueueBind.QueueBind(UInt16 initReserved1, String initQueue, String initExchange, String initRoutingKey, Boolean initNowait, IDictionary`2&lt;String,Object&gt; initArguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.ExchangeRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.HasContentGet">
            <summary>Sets the shim of QueueBind.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.NowaitRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.ProtocolClassIdGet">
            <summary>Sets the shim of QueueBind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueBind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueBind.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.QueueRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueBind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.Reserved1RabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.RoutingKeyRabbitMQClientFramingIQueueBindget">
            <summary>Sets the shim of QueueBind.RabbitMQ.Client.Framing.IQueueBind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBind.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueBind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueueBindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.#ctor(RabbitMQ.Client.Framing.Impl.QueueBindOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueBindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.AllInstances.HasContentGet">
            <summary>Sets the shim of QueueBindOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueueBindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueBindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueBindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueBindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueBindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueBindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.Bind(RabbitMQ.Client.Framing.IQueueBindOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.Constructor">
            <summary>Sets the shim of QueueBindOk.QueueBindOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.HasContentGet">
            <summary>Sets the shim of QueueBindOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.ProtocolClassIdGet">
            <summary>Sets the shim of QueueBindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueBindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueBindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueBindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueBindOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueBindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueueDeclare</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.#ctor(RabbitMQ.Client.Framing.Impl.QueueDeclare)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueDeclare.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.ArgumentsRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.AutoDeleteRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_AutoDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.DurableRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Durable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.ExclusiveRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Exclusive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.HasContentGet">
            <summary>Sets the shim of QueueDeclare.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.NowaitRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.PassiveRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Passive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueueDeclare.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueDeclare.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueDeclare.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.QueueRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueDeclare.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.Reserved1RabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueDeclare.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueDeclare.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.ArgumentsRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.AutoDeleteRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_AutoDelete()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.Bind(RabbitMQ.Client.Framing.IQueueDeclare)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.Constructor">
            <summary>Sets the shim of QueueDeclare.QueueDeclare()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.ConstructorUInt16StringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of QueueDeclare.QueueDeclare(UInt16 initReserved1, String initQueue, Boolean initPassive, Boolean initDurable, Boolean initExclusive, Boolean initAutoDelete, Boolean initNowait, IDictionary`2&lt;String,Object&gt; initArguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.DurableRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Durable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.ExclusiveRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Exclusive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.HasContentGet">
            <summary>Sets the shim of QueueDeclare.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.NowaitRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.PassiveRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Passive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.ProtocolClassIdGet">
            <summary>Sets the shim of QueueDeclare.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueDeclare.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueDeclare.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.QueueRabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueDeclare.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.Reserved1RabbitMQClientFramingIQueueDeclareget">
            <summary>Sets the shim of QueueDeclare.RabbitMQ.Client.Framing.IQueueDeclare.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclare.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueDeclare.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueueDeclareOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.#ctor(RabbitMQ.Client.Framing.Impl.QueueDeclareOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueDeclareOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.ConsumerCountRabbitMQClientFramingIQueueDeclareOkget">
            <summary>Sets the shim of QueueDeclareOk.RabbitMQ.Client.Framing.IQueueDeclareOk.get_ConsumerCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.HasContentGet">
            <summary>Sets the shim of QueueDeclareOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.MessageCountRabbitMQClientFramingIQueueDeclareOkget">
            <summary>Sets the shim of QueueDeclareOk.RabbitMQ.Client.Framing.IQueueDeclareOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueueDeclareOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueDeclareOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueDeclareOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.QueueRabbitMQClientFramingIQueueDeclareOkget">
            <summary>Sets the shim of QueueDeclareOk.RabbitMQ.Client.Framing.IQueueDeclareOk.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueDeclareOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueDeclareOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueDeclareOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.Bind(RabbitMQ.Client.Framing.IQueueDeclareOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.Constructor">
            <summary>Sets the shim of QueueDeclareOk.QueueDeclareOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.ConstructorStringUInt32UInt32">
            <summary>Sets the shim of QueueDeclareOk.QueueDeclareOk(String initQueue, UInt32 initMessageCount, UInt32 initConsumerCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.ConsumerCountRabbitMQClientFramingIQueueDeclareOkget">
            <summary>Sets the shim of QueueDeclareOk.RabbitMQ.Client.Framing.IQueueDeclareOk.get_ConsumerCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.HasContentGet">
            <summary>Sets the shim of QueueDeclareOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.MessageCountRabbitMQClientFramingIQueueDeclareOkget">
            <summary>Sets the shim of QueueDeclareOk.RabbitMQ.Client.Framing.IQueueDeclareOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.ProtocolClassIdGet">
            <summary>Sets the shim of QueueDeclareOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueDeclareOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueDeclareOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.QueueRabbitMQClientFramingIQueueDeclareOkget">
            <summary>Sets the shim of QueueDeclareOk.RabbitMQ.Client.Framing.IQueueDeclareOk.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueDeclareOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeclareOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueDeclareOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueueDelete</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.#ctor(RabbitMQ.Client.Framing.Impl.QueueDelete)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueDelete.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.HasContentGet">
            <summary>Sets the shim of QueueDelete.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.IfEmptyRabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_IfEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.IfUnusedRabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_IfUnused()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.NowaitRabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueueDelete.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueDelete.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueDelete.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.QueueRabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueDelete.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.Reserved1RabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueDelete.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueDelete.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.Bind(RabbitMQ.Client.Framing.IQueueDelete)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.Constructor">
            <summary>Sets the shim of QueueDelete.QueueDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.ConstructorUInt16StringBooleanBooleanBoolean">
            <summary>Sets the shim of QueueDelete.QueueDelete(UInt16 initReserved1, String initQueue, Boolean initIfUnused, Boolean initIfEmpty, Boolean initNowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.HasContentGet">
            <summary>Sets the shim of QueueDelete.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.IfEmptyRabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_IfEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.IfUnusedRabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_IfUnused()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.NowaitRabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.ProtocolClassIdGet">
            <summary>Sets the shim of QueueDelete.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueDelete.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueDelete.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.QueueRabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueDelete.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.Reserved1RabbitMQClientFramingIQueueDeleteget">
            <summary>Sets the shim of QueueDelete.RabbitMQ.Client.Framing.IQueueDelete.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDelete.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueDelete.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueueDeleteOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.#ctor(RabbitMQ.Client.Framing.Impl.QueueDeleteOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueDeleteOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AllInstances.HasContentGet">
            <summary>Sets the shim of QueueDeleteOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AllInstances.MessageCountRabbitMQClientFramingIQueueDeleteOkget">
            <summary>Sets the shim of QueueDeleteOk.RabbitMQ.Client.Framing.IQueueDeleteOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueueDeleteOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueDeleteOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueDeleteOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueDeleteOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueDeleteOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueDeleteOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.Bind(RabbitMQ.Client.Framing.IQueueDeleteOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.Constructor">
            <summary>Sets the shim of QueueDeleteOk.QueueDeleteOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.ConstructorUInt32">
            <summary>Sets the shim of QueueDeleteOk.QueueDeleteOk(UInt32 initMessageCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.HasContentGet">
            <summary>Sets the shim of QueueDeleteOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.MessageCountRabbitMQClientFramingIQueueDeleteOkget">
            <summary>Sets the shim of QueueDeleteOk.RabbitMQ.Client.Framing.IQueueDeleteOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.ProtocolClassIdGet">
            <summary>Sets the shim of QueueDeleteOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueDeleteOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueDeleteOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueDeleteOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueDeleteOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueDeleteOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueuePurge</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.#ctor(RabbitMQ.Client.Framing.Impl.QueuePurge)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueuePurge.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.HasContentGet">
            <summary>Sets the shim of QueuePurge.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.NowaitRabbitMQClientFramingIQueuePurgeget">
            <summary>Sets the shim of QueuePurge.RabbitMQ.Client.Framing.IQueuePurge.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueuePurge.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueuePurge.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueuePurge.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.QueueRabbitMQClientFramingIQueuePurgeget">
            <summary>Sets the shim of QueuePurge.RabbitMQ.Client.Framing.IQueuePurge.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueuePurge.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.Reserved1RabbitMQClientFramingIQueuePurgeget">
            <summary>Sets the shim of QueuePurge.RabbitMQ.Client.Framing.IQueuePurge.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueuePurge.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueuePurge.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.Bind(RabbitMQ.Client.Framing.IQueuePurge)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.Constructor">
            <summary>Sets the shim of QueuePurge.QueuePurge()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.ConstructorUInt16StringBoolean">
            <summary>Sets the shim of QueuePurge.QueuePurge(UInt16 initReserved1, String initQueue, Boolean initNowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.HasContentGet">
            <summary>Sets the shim of QueuePurge.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.NowaitRabbitMQClientFramingIQueuePurgeget">
            <summary>Sets the shim of QueuePurge.RabbitMQ.Client.Framing.IQueuePurge.get_Nowait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.ProtocolClassIdGet">
            <summary>Sets the shim of QueuePurge.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.ProtocolMethodIdGet">
            <summary>Sets the shim of QueuePurge.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.ProtocolMethodNameGet">
            <summary>Sets the shim of QueuePurge.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.QueueRabbitMQClientFramingIQueuePurgeget">
            <summary>Sets the shim of QueuePurge.RabbitMQ.Client.Framing.IQueuePurge.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueuePurge.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.Reserved1RabbitMQClientFramingIQueuePurgeget">
            <summary>Sets the shim of QueuePurge.RabbitMQ.Client.Framing.IQueuePurge.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurge.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueuePurge.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueuePurgeOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.#ctor(RabbitMQ.Client.Framing.Impl.QueuePurgeOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueuePurgeOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AllInstances.HasContentGet">
            <summary>Sets the shim of QueuePurgeOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AllInstances.MessageCountRabbitMQClientFramingIQueuePurgeOkget">
            <summary>Sets the shim of QueuePurgeOk.RabbitMQ.Client.Framing.IQueuePurgeOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueuePurgeOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueuePurgeOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueuePurgeOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueuePurgeOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueuePurgeOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueuePurgeOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.Bind(RabbitMQ.Client.Framing.IQueuePurgeOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.Constructor">
            <summary>Sets the shim of QueuePurgeOk.QueuePurgeOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.ConstructorUInt32">
            <summary>Sets the shim of QueuePurgeOk.QueuePurgeOk(UInt32 initMessageCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.HasContentGet">
            <summary>Sets the shim of QueuePurgeOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.MessageCountRabbitMQClientFramingIQueuePurgeOkget">
            <summary>Sets the shim of QueuePurgeOk.RabbitMQ.Client.Framing.IQueuePurgeOk.get_MessageCount()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.ProtocolClassIdGet">
            <summary>Sets the shim of QueuePurgeOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.ProtocolMethodIdGet">
            <summary>Sets the shim of QueuePurgeOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.ProtocolMethodNameGet">
            <summary>Sets the shim of QueuePurgeOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueuePurgeOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueuePurgeOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueuePurgeOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueueUnbind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.#ctor(RabbitMQ.Client.Framing.Impl.QueueUnbind)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueUnbind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.ArgumentsRabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.ExchangeRabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.HasContentGet">
            <summary>Sets the shim of QueueUnbind.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueueUnbind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueUnbind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueUnbind.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.QueueRabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueUnbind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.Reserved1RabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.RoutingKeyRabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueUnbind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueUnbind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.ArgumentsRabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_Arguments()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.Bind(RabbitMQ.Client.Framing.IQueueUnbind)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.Constructor">
            <summary>Sets the shim of QueueUnbind.QueueUnbind()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.ConstructorUInt16StringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of QueueUnbind.QueueUnbind(UInt16 initReserved1, String initQueue, String initExchange, String initRoutingKey, IDictionary`2&lt;String,Object&gt; initArguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.ExchangeRabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_Exchange()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.HasContentGet">
            <summary>Sets the shim of QueueUnbind.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.ProtocolClassIdGet">
            <summary>Sets the shim of QueueUnbind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueUnbind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueUnbind.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.QueueRabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueUnbind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.Reserved1RabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_Reserved1()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.RoutingKeyRabbitMQClientFramingIQueueUnbindget">
            <summary>Sets the shim of QueueUnbind.RabbitMQ.Client.Framing.IQueueUnbind.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbind.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueUnbind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.QueueUnbindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.#ctor(RabbitMQ.Client.Framing.Impl.QueueUnbindOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueUnbindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.AllInstances.HasContentGet">
            <summary>Sets the shim of QueueUnbindOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of QueueUnbindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueUnbindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueUnbindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueUnbindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueUnbindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of QueueUnbindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.Bind(RabbitMQ.Client.Framing.IQueueUnbindOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.Constructor">
            <summary>Sets the shim of QueueUnbindOk.QueueUnbindOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.HasContentGet">
            <summary>Sets the shim of QueueUnbindOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.ProtocolClassIdGet">
            <summary>Sets the shim of QueueUnbindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.ProtocolMethodIdGet">
            <summary>Sets the shim of QueueUnbindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.ProtocolMethodNameGet">
            <summary>Sets the shim of QueueUnbindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of QueueUnbindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimQueueUnbindOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of QueueUnbindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.TxCommit</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.#ctor(RabbitMQ.Client.Framing.Impl.TxCommit)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxCommit.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.AllInstances.HasContentGet">
            <summary>Sets the shim of TxCommit.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of TxCommit.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of TxCommit.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of TxCommit.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxCommit.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxCommit.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxCommit.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.Bind(RabbitMQ.Client.Framing.ITxCommit)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.Constructor">
            <summary>Sets the shim of TxCommit.TxCommit()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.HasContentGet">
            <summary>Sets the shim of TxCommit.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.ProtocolClassIdGet">
            <summary>Sets the shim of TxCommit.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.ProtocolMethodIdGet">
            <summary>Sets the shim of TxCommit.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.ProtocolMethodNameGet">
            <summary>Sets the shim of TxCommit.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxCommit.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommit.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxCommit.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.TxCommitOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.#ctor(RabbitMQ.Client.Framing.Impl.TxCommitOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxCommitOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.AllInstances.HasContentGet">
            <summary>Sets the shim of TxCommitOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of TxCommitOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of TxCommitOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of TxCommitOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxCommitOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxCommitOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxCommitOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.Bind(RabbitMQ.Client.Framing.ITxCommitOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.Constructor">
            <summary>Sets the shim of TxCommitOk.TxCommitOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.HasContentGet">
            <summary>Sets the shim of TxCommitOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.ProtocolClassIdGet">
            <summary>Sets the shim of TxCommitOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.ProtocolMethodIdGet">
            <summary>Sets the shim of TxCommitOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.ProtocolMethodNameGet">
            <summary>Sets the shim of TxCommitOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxCommitOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxCommitOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxCommitOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.TxRollback</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.#ctor(RabbitMQ.Client.Framing.Impl.TxRollback)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxRollback.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.AllInstances.HasContentGet">
            <summary>Sets the shim of TxRollback.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of TxRollback.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of TxRollback.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of TxRollback.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxRollback.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxRollback.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxRollback.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.Bind(RabbitMQ.Client.Framing.ITxRollback)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.Constructor">
            <summary>Sets the shim of TxRollback.TxRollback()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.HasContentGet">
            <summary>Sets the shim of TxRollback.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.ProtocolClassIdGet">
            <summary>Sets the shim of TxRollback.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.ProtocolMethodIdGet">
            <summary>Sets the shim of TxRollback.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.ProtocolMethodNameGet">
            <summary>Sets the shim of TxRollback.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxRollback.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollback.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxRollback.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.TxRollbackOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.#ctor(RabbitMQ.Client.Framing.Impl.TxRollbackOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxRollbackOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.AllInstances.HasContentGet">
            <summary>Sets the shim of TxRollbackOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of TxRollbackOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of TxRollbackOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of TxRollbackOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxRollbackOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxRollbackOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxRollbackOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.Bind(RabbitMQ.Client.Framing.ITxRollbackOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.Constructor">
            <summary>Sets the shim of TxRollbackOk.TxRollbackOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.HasContentGet">
            <summary>Sets the shim of TxRollbackOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.ProtocolClassIdGet">
            <summary>Sets the shim of TxRollbackOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.ProtocolMethodIdGet">
            <summary>Sets the shim of TxRollbackOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.ProtocolMethodNameGet">
            <summary>Sets the shim of TxRollbackOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxRollbackOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxRollbackOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxRollbackOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.TxSelect</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.#ctor(RabbitMQ.Client.Framing.Impl.TxSelect)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxSelect.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.AllInstances.HasContentGet">
            <summary>Sets the shim of TxSelect.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of TxSelect.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of TxSelect.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of TxSelect.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxSelect.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxSelect.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxSelect.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.Bind(RabbitMQ.Client.Framing.ITxSelect)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.Constructor">
            <summary>Sets the shim of TxSelect.TxSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.HasContentGet">
            <summary>Sets the shim of TxSelect.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.ProtocolClassIdGet">
            <summary>Sets the shim of TxSelect.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.ProtocolMethodIdGet">
            <summary>Sets the shim of TxSelect.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.ProtocolMethodNameGet">
            <summary>Sets the shim of TxSelect.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxSelect.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelect.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxSelect.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk">
            <summary>Shim type of RabbitMQ.Client.Framing.Impl.TxSelectOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.#ctor(RabbitMQ.Client.Framing.Impl.TxSelectOk)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.AllInstances.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxSelectOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.AllInstances.HasContentGet">
            <summary>Sets the shim of TxSelectOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.AllInstances.ProtocolClassIdGet">
            <summary>Sets the shim of TxSelectOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.AllInstances.ProtocolMethodIdGet">
            <summary>Sets the shim of TxSelectOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.AllInstances.ProtocolMethodNameGet">
            <summary>Sets the shim of TxSelectOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.AllInstances.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxSelectOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.AllInstances.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxSelectOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the shim of TxSelectOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.Bind(RabbitMQ.Client.Framing.ITxSelectOk)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.Constructor">
            <summary>Sets the shim of TxSelectOk.TxSelectOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.HasContentGet">
            <summary>Sets the shim of TxSelectOk.get_HasContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.ProtocolClassIdGet">
            <summary>Sets the shim of TxSelectOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.ProtocolMethodIdGet">
            <summary>Sets the shim of TxSelectOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.ProtocolMethodNameGet">
            <summary>Sets the shim of TxSelectOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the shim of TxSelectOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.ShimTxSelectOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the shim of TxSelectOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubAutorecoveringConnection">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.AutorecoveringConnection</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubAutorecoveringConnection.#ctor(RabbitMQ.Client.ConnectionFactory,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubAutorecoveringConnection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubAutorecoveringConnection.InitializeStub">
            <summary>Initializes a new instance of type StubAutorecoveringConnection</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubAutorecoveringConnection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubAutorecoveringConnection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubAutorecoveringConnection.ToString">
            <summary>Sets the stub of AutorecoveringConnection.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubAutorecoveringConnection.ToString01">
            <summary>Sets the stub of AutorecoveringConnection.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicAck</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.#ctor(System.UInt64,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicAck.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicAck.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.HasContent">
            <summary>Sets the stub of BasicAck.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.HasContentGet">
            <summary>Sets the stub of BasicAck.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.InitializeStub">
            <summary>Initializes a new instance of type StubBasicAck</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.ProtocolClassId">
            <summary>Sets the stub of BasicAck.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.ProtocolClassIdGet">
            <summary>Sets the stub of BasicAck.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.ProtocolMethodId">
            <summary>Sets the stub of BasicAck.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicAck.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.ProtocolMethodName">
            <summary>Sets the stub of BasicAck.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicAck.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicAck.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicAck.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicAck.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicAck.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicAck.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicCancel</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicCancel.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicCancel.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.HasContent">
            <summary>Sets the stub of BasicCancel.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.HasContentGet">
            <summary>Sets the stub of BasicCancel.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.InitializeStub">
            <summary>Initializes a new instance of type StubBasicCancel</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.ProtocolClassId">
            <summary>Sets the stub of BasicCancel.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.ProtocolClassIdGet">
            <summary>Sets the stub of BasicCancel.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.ProtocolMethodId">
            <summary>Sets the stub of BasicCancel.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicCancel.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.ProtocolMethodName">
            <summary>Sets the stub of BasicCancel.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicCancel.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicCancel.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicCancel.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicCancel.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancel.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicCancel.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicCancelOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicCancelOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicCancelOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.HasContent">
            <summary>Sets the stub of BasicCancelOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.HasContentGet">
            <summary>Sets the stub of BasicCancelOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.InitializeStub">
            <summary>Initializes a new instance of type StubBasicCancelOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.ProtocolClassId">
            <summary>Sets the stub of BasicCancelOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.ProtocolClassIdGet">
            <summary>Sets the stub of BasicCancelOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.ProtocolMethodId">
            <summary>Sets the stub of BasicCancelOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicCancelOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.ProtocolMethodName">
            <summary>Sets the stub of BasicCancelOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicCancelOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicCancelOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicCancelOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicCancelOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicCancelOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicCancelOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicConsume</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.#ctor(System.UInt16,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicConsume.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicConsume.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.HasContent">
            <summary>Sets the stub of BasicConsume.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.HasContentGet">
            <summary>Sets the stub of BasicConsume.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.InitializeStub">
            <summary>Initializes a new instance of type StubBasicConsume</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.ProtocolClassId">
            <summary>Sets the stub of BasicConsume.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.ProtocolClassIdGet">
            <summary>Sets the stub of BasicConsume.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.ProtocolMethodId">
            <summary>Sets the stub of BasicConsume.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicConsume.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.ProtocolMethodName">
            <summary>Sets the stub of BasicConsume.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicConsume.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicConsume.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicConsume.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicConsume.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsume.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicConsume.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicConsumeOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicConsumeOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicConsumeOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.HasContent">
            <summary>Sets the stub of BasicConsumeOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.HasContentGet">
            <summary>Sets the stub of BasicConsumeOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.InitializeStub">
            <summary>Initializes a new instance of type StubBasicConsumeOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.ProtocolClassId">
            <summary>Sets the stub of BasicConsumeOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.ProtocolClassIdGet">
            <summary>Sets the stub of BasicConsumeOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.ProtocolMethodId">
            <summary>Sets the stub of BasicConsumeOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicConsumeOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.ProtocolMethodName">
            <summary>Sets the stub of BasicConsumeOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicConsumeOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicConsumeOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicConsumeOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicConsumeOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicConsumeOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicConsumeOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicDeliver</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.#ctor(System.String,System.UInt64,System.Boolean,System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicDeliver.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicDeliver.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.HasContent">
            <summary>Sets the stub of BasicDeliver.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.HasContentGet">
            <summary>Sets the stub of BasicDeliver.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.InitializeStub">
            <summary>Initializes a new instance of type StubBasicDeliver</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.ProtocolClassId">
            <summary>Sets the stub of BasicDeliver.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.ProtocolClassIdGet">
            <summary>Sets the stub of BasicDeliver.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.ProtocolMethodId">
            <summary>Sets the stub of BasicDeliver.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicDeliver.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.ProtocolMethodName">
            <summary>Sets the stub of BasicDeliver.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicDeliver.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicDeliver.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicDeliver.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicDeliver.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicDeliver.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicDeliver.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicGet</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.#ctor(System.UInt16,System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicGet.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicGet.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.HasContent">
            <summary>Sets the stub of BasicGet.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.HasContentGet">
            <summary>Sets the stub of BasicGet.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.InitializeStub">
            <summary>Initializes a new instance of type StubBasicGet</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.ProtocolClassId">
            <summary>Sets the stub of BasicGet.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.ProtocolClassIdGet">
            <summary>Sets the stub of BasicGet.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.ProtocolMethodId">
            <summary>Sets the stub of BasicGet.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicGet.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.ProtocolMethodName">
            <summary>Sets the stub of BasicGet.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicGet.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicGet.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicGet.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicGet.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGet.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicGet.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicGetEmpty</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicGetEmpty.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicGetEmpty.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.HasContent">
            <summary>Sets the stub of BasicGetEmpty.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.HasContentGet">
            <summary>Sets the stub of BasicGetEmpty.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.InitializeStub">
            <summary>Initializes a new instance of type StubBasicGetEmpty</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.ProtocolClassId">
            <summary>Sets the stub of BasicGetEmpty.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.ProtocolClassIdGet">
            <summary>Sets the stub of BasicGetEmpty.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.ProtocolMethodId">
            <summary>Sets the stub of BasicGetEmpty.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicGetEmpty.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.ProtocolMethodName">
            <summary>Sets the stub of BasicGetEmpty.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicGetEmpty.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicGetEmpty.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicGetEmpty.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicGetEmpty.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetEmpty.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicGetEmpty.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicGetOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.#ctor(System.UInt64,System.Boolean,System.String,System.String,System.UInt32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicGetOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicGetOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.HasContent">
            <summary>Sets the stub of BasicGetOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.HasContentGet">
            <summary>Sets the stub of BasicGetOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.InitializeStub">
            <summary>Initializes a new instance of type StubBasicGetOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.ProtocolClassId">
            <summary>Sets the stub of BasicGetOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.ProtocolClassIdGet">
            <summary>Sets the stub of BasicGetOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.ProtocolMethodId">
            <summary>Sets the stub of BasicGetOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicGetOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.ProtocolMethodName">
            <summary>Sets the stub of BasicGetOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicGetOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicGetOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicGetOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicGetOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicGetOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicGetOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicNack</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.#ctor(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicNack.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicNack.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.HasContent">
            <summary>Sets the stub of BasicNack.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.HasContentGet">
            <summary>Sets the stub of BasicNack.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.InitializeStub">
            <summary>Initializes a new instance of type StubBasicNack</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.ProtocolClassId">
            <summary>Sets the stub of BasicNack.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.ProtocolClassIdGet">
            <summary>Sets the stub of BasicNack.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.ProtocolMethodId">
            <summary>Sets the stub of BasicNack.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicNack.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.ProtocolMethodName">
            <summary>Sets the stub of BasicNack.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicNack.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicNack.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicNack.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicNack.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicNack.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicNack.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicPublish</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.#ctor(System.UInt16,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicPublish.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicPublish.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.HasContent">
            <summary>Sets the stub of BasicPublish.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.HasContentGet">
            <summary>Sets the stub of BasicPublish.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.InitializeStub">
            <summary>Initializes a new instance of type StubBasicPublish</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.ProtocolClassId">
            <summary>Sets the stub of BasicPublish.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.ProtocolClassIdGet">
            <summary>Sets the stub of BasicPublish.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.ProtocolMethodId">
            <summary>Sets the stub of BasicPublish.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicPublish.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.ProtocolMethodName">
            <summary>Sets the stub of BasicPublish.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicPublish.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicPublish.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicPublish.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicPublish.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicPublish.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicPublish.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicQos</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.#ctor(System.UInt32,System.UInt16,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicQos.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicQos.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.HasContent">
            <summary>Sets the stub of BasicQos.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.HasContentGet">
            <summary>Sets the stub of BasicQos.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.InitializeStub">
            <summary>Initializes a new instance of type StubBasicQos</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.ProtocolClassId">
            <summary>Sets the stub of BasicQos.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.ProtocolClassIdGet">
            <summary>Sets the stub of BasicQos.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.ProtocolMethodId">
            <summary>Sets the stub of BasicQos.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicQos.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.ProtocolMethodName">
            <summary>Sets the stub of BasicQos.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicQos.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicQos.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicQos.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicQos.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQos.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicQos.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicQosOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicQosOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicQosOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.HasContent">
            <summary>Sets the stub of BasicQosOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.HasContentGet">
            <summary>Sets the stub of BasicQosOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.InitializeStub">
            <summary>Initializes a new instance of type StubBasicQosOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.ProtocolClassId">
            <summary>Sets the stub of BasicQosOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.ProtocolClassIdGet">
            <summary>Sets the stub of BasicQosOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.ProtocolMethodId">
            <summary>Sets the stub of BasicQosOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicQosOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.ProtocolMethodName">
            <summary>Sets the stub of BasicQosOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicQosOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicQosOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicQosOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicQosOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicQosOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicQosOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicRecover</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicRecover.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicRecover.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.HasContent">
            <summary>Sets the stub of BasicRecover.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.HasContentGet">
            <summary>Sets the stub of BasicRecover.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.InitializeStub">
            <summary>Initializes a new instance of type StubBasicRecover</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.ProtocolClassId">
            <summary>Sets the stub of BasicRecover.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.ProtocolClassIdGet">
            <summary>Sets the stub of BasicRecover.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.ProtocolMethodId">
            <summary>Sets the stub of BasicRecover.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicRecover.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.ProtocolMethodName">
            <summary>Sets the stub of BasicRecover.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicRecover.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicRecover.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicRecover.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicRecover.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecover.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicRecover.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicRecoverAsync</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicRecoverAsync.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicRecoverAsync.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.HasContent">
            <summary>Sets the stub of BasicRecoverAsync.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.HasContentGet">
            <summary>Sets the stub of BasicRecoverAsync.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.InitializeStub">
            <summary>Initializes a new instance of type StubBasicRecoverAsync</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.ProtocolClassId">
            <summary>Sets the stub of BasicRecoverAsync.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.ProtocolClassIdGet">
            <summary>Sets the stub of BasicRecoverAsync.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.ProtocolMethodId">
            <summary>Sets the stub of BasicRecoverAsync.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicRecoverAsync.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.ProtocolMethodName">
            <summary>Sets the stub of BasicRecoverAsync.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicRecoverAsync.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicRecoverAsync.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicRecoverAsync.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicRecoverAsync.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverAsync.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicRecoverAsync.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicRecoverOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicRecoverOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicRecoverOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.HasContent">
            <summary>Sets the stub of BasicRecoverOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.HasContentGet">
            <summary>Sets the stub of BasicRecoverOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.InitializeStub">
            <summary>Initializes a new instance of type StubBasicRecoverOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.ProtocolClassId">
            <summary>Sets the stub of BasicRecoverOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.ProtocolClassIdGet">
            <summary>Sets the stub of BasicRecoverOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.ProtocolMethodId">
            <summary>Sets the stub of BasicRecoverOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicRecoverOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.ProtocolMethodName">
            <summary>Sets the stub of BasicRecoverOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicRecoverOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicRecoverOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicRecoverOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicRecoverOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicRecoverOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicRecoverOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicReject</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.#ctor(System.UInt64,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicReject.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicReject.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.HasContent">
            <summary>Sets the stub of BasicReject.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.HasContentGet">
            <summary>Sets the stub of BasicReject.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.InitializeStub">
            <summary>Initializes a new instance of type StubBasicReject</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.ProtocolClassId">
            <summary>Sets the stub of BasicReject.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.ProtocolClassIdGet">
            <summary>Sets the stub of BasicReject.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.ProtocolMethodId">
            <summary>Sets the stub of BasicReject.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicReject.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.ProtocolMethodName">
            <summary>Sets the stub of BasicReject.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicReject.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicReject.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicReject.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicReject.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReject.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicReject.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.BasicReturn</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.#ctor(System.UInt16,System.String,System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of BasicReturn.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of BasicReturn.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.HasContent">
            <summary>Sets the stub of BasicReturn.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.HasContentGet">
            <summary>Sets the stub of BasicReturn.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.InitializeStub">
            <summary>Initializes a new instance of type StubBasicReturn</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.ProtocolClassId">
            <summary>Sets the stub of BasicReturn.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.ProtocolClassIdGet">
            <summary>Sets the stub of BasicReturn.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.ProtocolMethodId">
            <summary>Sets the stub of BasicReturn.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.ProtocolMethodIdGet">
            <summary>Sets the stub of BasicReturn.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.ProtocolMethodName">
            <summary>Sets the stub of BasicReturn.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.ProtocolMethodNameGet">
            <summary>Sets the stub of BasicReturn.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of BasicReturn.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of BasicReturn.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of BasicReturn.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubBasicReturn.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of BasicReturn.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ChannelClose</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.#ctor(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ChannelClose.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ChannelClose.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.HasContent">
            <summary>Sets the stub of ChannelClose.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.HasContentGet">
            <summary>Sets the stub of ChannelClose.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.InitializeStub">
            <summary>Initializes a new instance of type StubChannelClose</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.ProtocolClassId">
            <summary>Sets the stub of ChannelClose.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.ProtocolClassIdGet">
            <summary>Sets the stub of ChannelClose.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.ProtocolMethodId">
            <summary>Sets the stub of ChannelClose.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.ProtocolMethodIdGet">
            <summary>Sets the stub of ChannelClose.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.ProtocolMethodName">
            <summary>Sets the stub of ChannelClose.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.ProtocolMethodNameGet">
            <summary>Sets the stub of ChannelClose.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ChannelClose.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ChannelClose.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ChannelClose.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelClose.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ChannelClose.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ChannelCloseOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ChannelCloseOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ChannelCloseOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.HasContent">
            <summary>Sets the stub of ChannelCloseOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.HasContentGet">
            <summary>Sets the stub of ChannelCloseOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.InitializeStub">
            <summary>Initializes a new instance of type StubChannelCloseOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.ProtocolClassId">
            <summary>Sets the stub of ChannelCloseOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.ProtocolClassIdGet">
            <summary>Sets the stub of ChannelCloseOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.ProtocolMethodId">
            <summary>Sets the stub of ChannelCloseOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ChannelCloseOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.ProtocolMethodName">
            <summary>Sets the stub of ChannelCloseOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ChannelCloseOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ChannelCloseOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ChannelCloseOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ChannelCloseOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelCloseOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ChannelCloseOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ChannelFlow</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ChannelFlow.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ChannelFlow.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.HasContent">
            <summary>Sets the stub of ChannelFlow.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.HasContentGet">
            <summary>Sets the stub of ChannelFlow.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.InitializeStub">
            <summary>Initializes a new instance of type StubChannelFlow</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.ProtocolClassId">
            <summary>Sets the stub of ChannelFlow.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.ProtocolClassIdGet">
            <summary>Sets the stub of ChannelFlow.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.ProtocolMethodId">
            <summary>Sets the stub of ChannelFlow.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.ProtocolMethodIdGet">
            <summary>Sets the stub of ChannelFlow.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.ProtocolMethodName">
            <summary>Sets the stub of ChannelFlow.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.ProtocolMethodNameGet">
            <summary>Sets the stub of ChannelFlow.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ChannelFlow.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ChannelFlow.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ChannelFlow.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlow.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ChannelFlow.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ChannelFlowOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ChannelFlowOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ChannelFlowOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.HasContent">
            <summary>Sets the stub of ChannelFlowOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.HasContentGet">
            <summary>Sets the stub of ChannelFlowOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.InitializeStub">
            <summary>Initializes a new instance of type StubChannelFlowOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.ProtocolClassId">
            <summary>Sets the stub of ChannelFlowOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.ProtocolClassIdGet">
            <summary>Sets the stub of ChannelFlowOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.ProtocolMethodId">
            <summary>Sets the stub of ChannelFlowOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ChannelFlowOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.ProtocolMethodName">
            <summary>Sets the stub of ChannelFlowOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ChannelFlowOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ChannelFlowOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ChannelFlowOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ChannelFlowOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelFlowOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ChannelFlowOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ChannelOpen</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ChannelOpen.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ChannelOpen.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.HasContent">
            <summary>Sets the stub of ChannelOpen.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.HasContentGet">
            <summary>Sets the stub of ChannelOpen.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.InitializeStub">
            <summary>Initializes a new instance of type StubChannelOpen</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.ProtocolClassId">
            <summary>Sets the stub of ChannelOpen.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.ProtocolClassIdGet">
            <summary>Sets the stub of ChannelOpen.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.ProtocolMethodId">
            <summary>Sets the stub of ChannelOpen.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.ProtocolMethodIdGet">
            <summary>Sets the stub of ChannelOpen.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.ProtocolMethodName">
            <summary>Sets the stub of ChannelOpen.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.ProtocolMethodNameGet">
            <summary>Sets the stub of ChannelOpen.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ChannelOpen.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ChannelOpen.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ChannelOpen.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpen.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ChannelOpen.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ChannelOpenOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.#ctor(System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ChannelOpenOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ChannelOpenOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.HasContent">
            <summary>Sets the stub of ChannelOpenOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.HasContentGet">
            <summary>Sets the stub of ChannelOpenOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.InitializeStub">
            <summary>Initializes a new instance of type StubChannelOpenOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.ProtocolClassId">
            <summary>Sets the stub of ChannelOpenOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.ProtocolClassIdGet">
            <summary>Sets the stub of ChannelOpenOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.ProtocolMethodId">
            <summary>Sets the stub of ChannelOpenOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ChannelOpenOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.ProtocolMethodName">
            <summary>Sets the stub of ChannelOpenOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ChannelOpenOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ChannelOpenOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ChannelOpenOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ChannelOpenOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubChannelOpenOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ChannelOpenOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConfirmSelect</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConfirmSelect.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConfirmSelect.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.HasContent">
            <summary>Sets the stub of ConfirmSelect.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.HasContentGet">
            <summary>Sets the stub of ConfirmSelect.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.InitializeStub">
            <summary>Initializes a new instance of type StubConfirmSelect</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.ProtocolClassId">
            <summary>Sets the stub of ConfirmSelect.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.ProtocolClassIdGet">
            <summary>Sets the stub of ConfirmSelect.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.ProtocolMethodId">
            <summary>Sets the stub of ConfirmSelect.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.ProtocolMethodIdGet">
            <summary>Sets the stub of ConfirmSelect.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.ProtocolMethodName">
            <summary>Sets the stub of ConfirmSelect.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.ProtocolMethodNameGet">
            <summary>Sets the stub of ConfirmSelect.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConfirmSelect.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConfirmSelect.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConfirmSelect.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelect.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConfirmSelect.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConfirmSelectOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConfirmSelectOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConfirmSelectOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.HasContent">
            <summary>Sets the stub of ConfirmSelectOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.HasContentGet">
            <summary>Sets the stub of ConfirmSelectOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.InitializeStub">
            <summary>Initializes a new instance of type StubConfirmSelectOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.ProtocolClassId">
            <summary>Sets the stub of ConfirmSelectOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.ProtocolClassIdGet">
            <summary>Sets the stub of ConfirmSelectOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.ProtocolMethodId">
            <summary>Sets the stub of ConfirmSelectOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ConfirmSelectOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.ProtocolMethodName">
            <summary>Sets the stub of ConfirmSelectOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ConfirmSelectOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConfirmSelectOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConfirmSelectOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConfirmSelectOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConfirmSelectOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConfirmSelectOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnection">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.Connection</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnection.#ctor(RabbitMQ.Client.IConnectionFactory,System.Boolean,RabbitMQ.Client.Impl.IFrameHandler,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnection.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnection.InitializeStub">
            <summary>Initializes a new instance of type StubConnection</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnection.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnection.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnection.ToString">
            <summary>Sets the stub of Connection.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnection.ToString01">
            <summary>Sets the stub of Connection.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionBlocked</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionBlocked.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionBlocked.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.HasContent">
            <summary>Sets the stub of ConnectionBlocked.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.HasContentGet">
            <summary>Sets the stub of ConnectionBlocked.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionBlocked</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.ProtocolClassId">
            <summary>Sets the stub of ConnectionBlocked.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionBlocked.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.ProtocolMethodId">
            <summary>Sets the stub of ConnectionBlocked.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionBlocked.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.ProtocolMethodName">
            <summary>Sets the stub of ConnectionBlocked.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionBlocked.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionBlocked.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionBlocked.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionBlocked.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionBlocked.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionBlocked.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionClose</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.#ctor(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionClose.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionClose.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.HasContent">
            <summary>Sets the stub of ConnectionClose.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.HasContentGet">
            <summary>Sets the stub of ConnectionClose.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionClose</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.ProtocolClassId">
            <summary>Sets the stub of ConnectionClose.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionClose.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.ProtocolMethodId">
            <summary>Sets the stub of ConnectionClose.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionClose.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.ProtocolMethodName">
            <summary>Sets the stub of ConnectionClose.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionClose.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionClose.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionClose.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionClose.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionClose.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionClose.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionCloseOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionCloseOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionCloseOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.HasContent">
            <summary>Sets the stub of ConnectionCloseOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.HasContentGet">
            <summary>Sets the stub of ConnectionCloseOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionCloseOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.ProtocolClassId">
            <summary>Sets the stub of ConnectionCloseOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionCloseOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.ProtocolMethodId">
            <summary>Sets the stub of ConnectionCloseOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionCloseOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.ProtocolMethodName">
            <summary>Sets the stub of ConnectionCloseOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionCloseOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionCloseOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionCloseOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionCloseOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionCloseOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionCloseOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionOpen</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.#ctor(System.String,System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionOpen.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionOpen.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.HasContent">
            <summary>Sets the stub of ConnectionOpen.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.HasContentGet">
            <summary>Sets the stub of ConnectionOpen.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionOpen</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.ProtocolClassId">
            <summary>Sets the stub of ConnectionOpen.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionOpen.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.ProtocolMethodId">
            <summary>Sets the stub of ConnectionOpen.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionOpen.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.ProtocolMethodName">
            <summary>Sets the stub of ConnectionOpen.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionOpen.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionOpen.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionOpen.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionOpen.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpen.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionOpen.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionOpenOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionOpenOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionOpenOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.HasContent">
            <summary>Sets the stub of ConnectionOpenOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.HasContentGet">
            <summary>Sets the stub of ConnectionOpenOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionOpenOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.ProtocolClassId">
            <summary>Sets the stub of ConnectionOpenOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionOpenOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.ProtocolMethodId">
            <summary>Sets the stub of ConnectionOpenOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionOpenOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.ProtocolMethodName">
            <summary>Sets the stub of ConnectionOpenOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionOpenOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionOpenOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionOpenOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionOpenOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionOpenOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionOpenOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionSecure</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.#ctor(System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionSecure.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionSecure.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.HasContent">
            <summary>Sets the stub of ConnectionSecure.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.HasContentGet">
            <summary>Sets the stub of ConnectionSecure.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionSecure</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.ProtocolClassId">
            <summary>Sets the stub of ConnectionSecure.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionSecure.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.ProtocolMethodId">
            <summary>Sets the stub of ConnectionSecure.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionSecure.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.ProtocolMethodName">
            <summary>Sets the stub of ConnectionSecure.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionSecure.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionSecure.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionSecure.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionSecure.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecure.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionSecure.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionSecureOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.#ctor(System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionSecureOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionSecureOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.HasContent">
            <summary>Sets the stub of ConnectionSecureOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.HasContentGet">
            <summary>Sets the stub of ConnectionSecureOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionSecureOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.ProtocolClassId">
            <summary>Sets the stub of ConnectionSecureOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionSecureOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.ProtocolMethodId">
            <summary>Sets the stub of ConnectionSecureOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionSecureOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.ProtocolMethodName">
            <summary>Sets the stub of ConnectionSecureOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionSecureOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionSecureOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionSecureOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionSecureOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionSecureOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionSecureOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionStart</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.#ctor(System.Byte,System.Byte,System.Collections.Generic.IDictionary{System.String,System.Object},System.Byte[],System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionStart.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionStart.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.HasContent">
            <summary>Sets the stub of ConnectionStart.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.HasContentGet">
            <summary>Sets the stub of ConnectionStart.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionStart</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.ProtocolClassId">
            <summary>Sets the stub of ConnectionStart.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionStart.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.ProtocolMethodId">
            <summary>Sets the stub of ConnectionStart.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionStart.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.ProtocolMethodName">
            <summary>Sets the stub of ConnectionStart.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionStart.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionStart.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionStart.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionStart.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStart.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionStart.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionStartOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Byte[],System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionStartOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionStartOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.HasContent">
            <summary>Sets the stub of ConnectionStartOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.HasContentGet">
            <summary>Sets the stub of ConnectionStartOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionStartOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.ProtocolClassId">
            <summary>Sets the stub of ConnectionStartOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionStartOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.ProtocolMethodId">
            <summary>Sets the stub of ConnectionStartOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionStartOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.ProtocolMethodName">
            <summary>Sets the stub of ConnectionStartOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionStartOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionStartOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionStartOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionStartOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionStartOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionStartOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionTune</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.#ctor(System.UInt16,System.UInt32,System.UInt16)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionTune.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionTune.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.HasContent">
            <summary>Sets the stub of ConnectionTune.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.HasContentGet">
            <summary>Sets the stub of ConnectionTune.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionTune</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.ProtocolClassId">
            <summary>Sets the stub of ConnectionTune.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionTune.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.ProtocolMethodId">
            <summary>Sets the stub of ConnectionTune.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionTune.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.ProtocolMethodName">
            <summary>Sets the stub of ConnectionTune.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionTune.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionTune.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionTune.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionTune.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTune.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionTune.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionTuneOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.#ctor(System.UInt16,System.UInt32,System.UInt16)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionTuneOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionTuneOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.HasContent">
            <summary>Sets the stub of ConnectionTuneOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.HasContentGet">
            <summary>Sets the stub of ConnectionTuneOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionTuneOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.ProtocolClassId">
            <summary>Sets the stub of ConnectionTuneOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionTuneOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.ProtocolMethodId">
            <summary>Sets the stub of ConnectionTuneOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionTuneOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.ProtocolMethodName">
            <summary>Sets the stub of ConnectionTuneOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionTuneOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionTuneOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionTuneOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionTuneOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionTuneOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionTuneOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ConnectionUnblocked</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ConnectionUnblocked.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ConnectionUnblocked.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.HasContent">
            <summary>Sets the stub of ConnectionUnblocked.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.HasContentGet">
            <summary>Sets the stub of ConnectionUnblocked.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionUnblocked</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.ProtocolClassId">
            <summary>Sets the stub of ConnectionUnblocked.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.ProtocolClassIdGet">
            <summary>Sets the stub of ConnectionUnblocked.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.ProtocolMethodId">
            <summary>Sets the stub of ConnectionUnblocked.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.ProtocolMethodIdGet">
            <summary>Sets the stub of ConnectionUnblocked.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.ProtocolMethodName">
            <summary>Sets the stub of ConnectionUnblocked.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.ProtocolMethodNameGet">
            <summary>Sets the stub of ConnectionUnblocked.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ConnectionUnblocked.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ConnectionUnblocked.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ConnectionUnblocked.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubConnectionUnblocked.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ConnectionUnblocked.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ExchangeBind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.#ctor(System.UInt16,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ExchangeBind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ExchangeBind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.HasContent">
            <summary>Sets the stub of ExchangeBind.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.HasContentGet">
            <summary>Sets the stub of ExchangeBind.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.InitializeStub">
            <summary>Initializes a new instance of type StubExchangeBind</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.ProtocolClassId">
            <summary>Sets the stub of ExchangeBind.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.ProtocolClassIdGet">
            <summary>Sets the stub of ExchangeBind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.ProtocolMethodId">
            <summary>Sets the stub of ExchangeBind.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.ProtocolMethodIdGet">
            <summary>Sets the stub of ExchangeBind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.ProtocolMethodName">
            <summary>Sets the stub of ExchangeBind.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.ProtocolMethodNameGet">
            <summary>Sets the stub of ExchangeBind.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ExchangeBind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ExchangeBind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ExchangeBind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBind.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ExchangeBind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ExchangeBindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ExchangeBindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ExchangeBindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.HasContent">
            <summary>Sets the stub of ExchangeBindOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.HasContentGet">
            <summary>Sets the stub of ExchangeBindOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.InitializeStub">
            <summary>Initializes a new instance of type StubExchangeBindOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.ProtocolClassId">
            <summary>Sets the stub of ExchangeBindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.ProtocolClassIdGet">
            <summary>Sets the stub of ExchangeBindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.ProtocolMethodId">
            <summary>Sets the stub of ExchangeBindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ExchangeBindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.ProtocolMethodName">
            <summary>Sets the stub of ExchangeBindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ExchangeBindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ExchangeBindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ExchangeBindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ExchangeBindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeBindOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ExchangeBindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ExchangeDeclare</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.#ctor(System.UInt16,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ExchangeDeclare.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ExchangeDeclare.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.HasContent">
            <summary>Sets the stub of ExchangeDeclare.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.HasContentGet">
            <summary>Sets the stub of ExchangeDeclare.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.InitializeStub">
            <summary>Initializes a new instance of type StubExchangeDeclare</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.ProtocolClassId">
            <summary>Sets the stub of ExchangeDeclare.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.ProtocolClassIdGet">
            <summary>Sets the stub of ExchangeDeclare.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.ProtocolMethodId">
            <summary>Sets the stub of ExchangeDeclare.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.ProtocolMethodIdGet">
            <summary>Sets the stub of ExchangeDeclare.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.ProtocolMethodName">
            <summary>Sets the stub of ExchangeDeclare.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.ProtocolMethodNameGet">
            <summary>Sets the stub of ExchangeDeclare.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ExchangeDeclare.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ExchangeDeclare.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ExchangeDeclare.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclare.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ExchangeDeclare.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ExchangeDeclareOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ExchangeDeclareOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ExchangeDeclareOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.HasContent">
            <summary>Sets the stub of ExchangeDeclareOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.HasContentGet">
            <summary>Sets the stub of ExchangeDeclareOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.InitializeStub">
            <summary>Initializes a new instance of type StubExchangeDeclareOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.ProtocolClassId">
            <summary>Sets the stub of ExchangeDeclareOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.ProtocolClassIdGet">
            <summary>Sets the stub of ExchangeDeclareOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.ProtocolMethodId">
            <summary>Sets the stub of ExchangeDeclareOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ExchangeDeclareOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.ProtocolMethodName">
            <summary>Sets the stub of ExchangeDeclareOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ExchangeDeclareOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ExchangeDeclareOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ExchangeDeclareOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ExchangeDeclareOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeclareOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ExchangeDeclareOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ExchangeDelete</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.#ctor(System.UInt16,System.String,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ExchangeDelete.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ExchangeDelete.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.HasContent">
            <summary>Sets the stub of ExchangeDelete.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.HasContentGet">
            <summary>Sets the stub of ExchangeDelete.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.InitializeStub">
            <summary>Initializes a new instance of type StubExchangeDelete</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.ProtocolClassId">
            <summary>Sets the stub of ExchangeDelete.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.ProtocolClassIdGet">
            <summary>Sets the stub of ExchangeDelete.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.ProtocolMethodId">
            <summary>Sets the stub of ExchangeDelete.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.ProtocolMethodIdGet">
            <summary>Sets the stub of ExchangeDelete.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.ProtocolMethodName">
            <summary>Sets the stub of ExchangeDelete.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.ProtocolMethodNameGet">
            <summary>Sets the stub of ExchangeDelete.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ExchangeDelete.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ExchangeDelete.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ExchangeDelete.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDelete.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ExchangeDelete.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ExchangeDeleteOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ExchangeDeleteOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ExchangeDeleteOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.HasContent">
            <summary>Sets the stub of ExchangeDeleteOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.HasContentGet">
            <summary>Sets the stub of ExchangeDeleteOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.InitializeStub">
            <summary>Initializes a new instance of type StubExchangeDeleteOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.ProtocolClassId">
            <summary>Sets the stub of ExchangeDeleteOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.ProtocolClassIdGet">
            <summary>Sets the stub of ExchangeDeleteOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.ProtocolMethodId">
            <summary>Sets the stub of ExchangeDeleteOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ExchangeDeleteOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.ProtocolMethodName">
            <summary>Sets the stub of ExchangeDeleteOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ExchangeDeleteOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ExchangeDeleteOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ExchangeDeleteOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ExchangeDeleteOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeDeleteOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ExchangeDeleteOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ExchangeUnbind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.#ctor(System.UInt16,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ExchangeUnbind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ExchangeUnbind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.HasContent">
            <summary>Sets the stub of ExchangeUnbind.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.HasContentGet">
            <summary>Sets the stub of ExchangeUnbind.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.InitializeStub">
            <summary>Initializes a new instance of type StubExchangeUnbind</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.ProtocolClassId">
            <summary>Sets the stub of ExchangeUnbind.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.ProtocolClassIdGet">
            <summary>Sets the stub of ExchangeUnbind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.ProtocolMethodId">
            <summary>Sets the stub of ExchangeUnbind.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.ProtocolMethodIdGet">
            <summary>Sets the stub of ExchangeUnbind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.ProtocolMethodName">
            <summary>Sets the stub of ExchangeUnbind.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.ProtocolMethodNameGet">
            <summary>Sets the stub of ExchangeUnbind.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ExchangeUnbind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ExchangeUnbind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ExchangeUnbind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbind.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ExchangeUnbind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ExchangeUnbindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ExchangeUnbindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of ExchangeUnbindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.HasContent">
            <summary>Sets the stub of ExchangeUnbindOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.HasContentGet">
            <summary>Sets the stub of ExchangeUnbindOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.InitializeStub">
            <summary>Initializes a new instance of type StubExchangeUnbindOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.ProtocolClassId">
            <summary>Sets the stub of ExchangeUnbindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.ProtocolClassIdGet">
            <summary>Sets the stub of ExchangeUnbindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.ProtocolMethodId">
            <summary>Sets the stub of ExchangeUnbindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.ProtocolMethodIdGet">
            <summary>Sets the stub of ExchangeUnbindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.ProtocolMethodName">
            <summary>Sets the stub of ExchangeUnbindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.ProtocolMethodNameGet">
            <summary>Sets the stub of ExchangeUnbindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of ExchangeUnbindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of ExchangeUnbindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of ExchangeUnbindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubExchangeUnbindOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of ExchangeUnbindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubModel">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.Model</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.#ctor(RabbitMQ.Client.Impl.ISession)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.#ctor(RabbitMQ.Client.Impl.ISession,RabbitMQ.Client.ConsumerWorkService)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicAck(System.UInt64,System.Boolean)">
            <summary>Sets the stub of Model.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicAckUInt64Boolean">
            <summary>Sets the stub of Model.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicNack(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Sets the stub of Model.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicNackUInt64BooleanBoolean">
            <summary>Sets the stub of Model.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicQos(System.UInt32,System.UInt16,System.Boolean)">
            <summary>Sets the stub of Model.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicQosUInt32UInt16Boolean">
            <summary>Sets the stub of Model.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicRecoverAsync(System.Boolean)">
            <summary>Sets the stub of Model.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicRecoverAsyncBoolean">
            <summary>Sets the stub of Model.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicReject(System.UInt64,System.Boolean)">
            <summary>Sets the stub of Model.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.BasicRejectUInt64Boolean">
            <summary>Sets the stub of Model.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.ConnectionTuneOk(System.UInt16,System.UInt32,System.UInt16)">
            <summary>Sets the stub of Model.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.ConnectionTuneOkUInt16UInt32UInt16">
            <summary>Sets the stub of Model.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.CreateBasicProperties">
            <summary>Sets the stub of Model.CreateBasicProperties()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.CreateBasicProperties01">
            <summary>Sets the stub of Model.CreateBasicProperties()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.DispatchAsynchronous(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of Model.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.DispatchAsynchronousCommand">
            <summary>Sets the stub of Model.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.HandleAckNackUInt64BooleanBoolean">
            <summary>Sets the stub of ModelBase.handleAckNack(UInt64 deliveryTag, Boolean multiple, Boolean isNack)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of ModelBase.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of ModelBase.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.HandleBasicGetOk(System.UInt64,System.Boolean,System.String,System.String,System.UInt32,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of ModelBase.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the stub of ModelBase.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.InitializeStub">
            <summary>Initializes a new instance of type StubModel</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnBasicAck(RabbitMQ.Client.Events.BasicAckEventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnBasicAckBasicAckEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnBasicNack(RabbitMQ.Client.Events.BasicNackEventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnBasicNackBasicNackEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnBasicRecoverOk(System.EventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnBasicRecoverOkEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnBasicReturn(RabbitMQ.Client.Events.BasicReturnEventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnBasicReturnBasicReturnEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnCallbackException(RabbitMQ.Client.Events.CallbackExceptionEventArgs)">
            <summary>Sets the stub of ModelBase.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the stub of ModelBase.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnFlowControl(RabbitMQ.Client.Events.FlowControlEventArgs)">
            <summary>Sets the stub of ModelBase.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnFlowControlFlowControlEventArgs">
            <summary>Sets the stub of ModelBase.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnModelShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of ModelBase.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.OnModelShutdownShutdownEventArgs">
            <summary>Sets the stub of ModelBase.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.QueueUnbind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.QueueUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of Model.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.ToString">
            <summary>Sets the stub of ModelBase.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.ToString01">
            <summary>Sets the stub of ModelBase.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.TxCommit">
            <summary>Sets the stub of Model.TxCommit()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.TxCommit01">
            <summary>Sets the stub of Model.TxCommit()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.TxRollback">
            <summary>Sets the stub of Model.TxRollback()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.TxRollback01">
            <summary>Sets the stub of Model.TxRollback()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.TxSelect">
            <summary>Sets the stub of Model.TxSelect()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.TxSelect01">
            <summary>Sets the stub of Model.TxSelect()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicCancel(System.String,System.Boolean)">
            <summary>Sets the stub of Model._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicCancelStringBoolean">
            <summary>Sets the stub of Model._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicConsume(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicConsumeStringStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicGet(System.String,System.Boolean)">
            <summary>Sets the stub of Model._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicGetStringBoolean">
            <summary>Sets the stub of Model._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicPublish(System.String,System.String,System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of Model._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the stub of Model._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicRecover(System.Boolean)">
            <summary>Sets the stub of Model._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_BasicRecoverBoolean">
            <summary>Sets the stub of Model._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ChannelClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of Model._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ChannelCloseOk">
            <summary>Sets the stub of Model._Private_ChannelCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ChannelCloseOk01">
            <summary>Sets the stub of Model._Private_ChannelCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of Model._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ChannelFlowOk(System.Boolean)">
            <summary>Sets the stub of Model._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ChannelFlowOkBoolean">
            <summary>Sets the stub of Model._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ChannelOpen(System.String)">
            <summary>Sets the stub of Model._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ChannelOpenString">
            <summary>Sets the stub of Model._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConfirmSelect(System.Boolean)">
            <summary>Sets the stub of Model._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConfirmSelectBoolean">
            <summary>Sets the stub of Model._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of Model._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionCloseOk">
            <summary>Sets the stub of Model._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionCloseOk01">
            <summary>Sets the stub of Model._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of Model._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionOpen(System.String,System.String,System.Boolean)">
            <summary>Sets the stub of Model._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionOpenStringStringBoolean">
            <summary>Sets the stub of Model._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionSecureOk(System.Byte[])">
            <summary>Sets the stub of Model._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionSecureOkByteArray">
            <summary>Sets the stub of Model._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionStartOk(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Byte[],System.String)">
            <summary>Sets the stub of Model._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the stub of Model._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ExchangeBind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ExchangeBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ExchangeDeclare(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ExchangeDeclareStringStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ExchangeDelete(System.String,System.Boolean,System.Boolean)">
            <summary>Sets the stub of Model._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ExchangeDeleteStringBooleanBoolean">
            <summary>Sets the stub of Model._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ExchangeUnbind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_ExchangeUnbindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_QueueBind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_QueueBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_QueueDeclare(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_QueueDeclareStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_QueueDelete(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Sets the stub of Model._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_QueueDeleteStringBooleanBooleanBoolean">
            <summary>Sets the stub of Model._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_QueuePurge(System.String,System.Boolean)">
            <summary>Sets the stub of Model._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubModel._Private_QueuePurgeStringBoolean">
            <summary>Sets the stub of Model._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubModel.handleAckNack(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Sets the stub of ModelBase.handleAckNack(UInt64 deliveryTag, Boolean multiple, Boolean isNack)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.ProtocolBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.ApiName">
            <summary>Sets the stub of ProtocolBase.get_ApiName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.ApiNameGet">
            <summary>Sets the stub of ProtocolBase.get_ApiName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.DecodeContentHeaderFrom(RabbitMQ.Util.NetworkBinaryReader)">
            <summary>Sets the stub of ProtocolBase.DecodeContentHeaderFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.DecodeContentHeaderFromNetworkBinaryReader">
            <summary>Sets the stub of ProtocolBase.DecodeContentHeaderFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.DecodeMethodFrom(RabbitMQ.Util.NetworkBinaryReader)">
            <summary>Sets the stub of ProtocolBase.DecodeMethodFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.DecodeMethodFromNetworkBinaryReader">
            <summary>Sets the stub of ProtocolBase.DecodeMethodFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.DefaultPort">
            <summary>Sets the stub of ProtocolBase.get_DefaultPort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.DefaultPortGet">
            <summary>Sets the stub of ProtocolBase.get_DefaultPort()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.Equals(System.Object)">
            <summary>Sets the stub of ProtocolBase.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.EqualsObject">
            <summary>Sets the stub of ProtocolBase.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.GetHashCode">
            <summary>Sets the stub of ProtocolBase.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.GetHashCode01">
            <summary>Sets the stub of ProtocolBase.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.InitializeStub">
            <summary>Initializes a new instance of type StubProtocolBase</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.MajorVersion">
            <summary>Sets the stub of ProtocolBase.get_MajorVersion()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.MajorVersionGet">
            <summary>Sets the stub of ProtocolBase.get_MajorVersion()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.MinorVersion">
            <summary>Sets the stub of ProtocolBase.get_MinorVersion()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.MinorVersionGet">
            <summary>Sets the stub of ProtocolBase.get_MinorVersion()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.Revision">
            <summary>Sets the stub of ProtocolBase.get_Revision()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.RevisionGet">
            <summary>Sets the stub of ProtocolBase.get_Revision()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.ToString">
            <summary>Sets the stub of ProtocolBase.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubProtocolBase.ToString01">
            <summary>Sets the stub of ProtocolBase.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueueBind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.#ctor(System.UInt16,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueueBind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueueBind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.HasContent">
            <summary>Sets the stub of QueueBind.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.HasContentGet">
            <summary>Sets the stub of QueueBind.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.InitializeStub">
            <summary>Initializes a new instance of type StubQueueBind</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.ProtocolClassId">
            <summary>Sets the stub of QueueBind.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.ProtocolClassIdGet">
            <summary>Sets the stub of QueueBind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.ProtocolMethodId">
            <summary>Sets the stub of QueueBind.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.ProtocolMethodIdGet">
            <summary>Sets the stub of QueueBind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.ProtocolMethodName">
            <summary>Sets the stub of QueueBind.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.ProtocolMethodNameGet">
            <summary>Sets the stub of QueueBind.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueueBind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueueBind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueueBind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBind.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueueBind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueueBindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueueBindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueueBindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.HasContent">
            <summary>Sets the stub of QueueBindOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.HasContentGet">
            <summary>Sets the stub of QueueBindOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.InitializeStub">
            <summary>Initializes a new instance of type StubQueueBindOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.ProtocolClassId">
            <summary>Sets the stub of QueueBindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.ProtocolClassIdGet">
            <summary>Sets the stub of QueueBindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.ProtocolMethodId">
            <summary>Sets the stub of QueueBindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.ProtocolMethodIdGet">
            <summary>Sets the stub of QueueBindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.ProtocolMethodName">
            <summary>Sets the stub of QueueBindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.ProtocolMethodNameGet">
            <summary>Sets the stub of QueueBindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueueBindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueueBindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueueBindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueBindOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueueBindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueueDeclare</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.#ctor(System.UInt16,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueueDeclare.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueueDeclare.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.HasContent">
            <summary>Sets the stub of QueueDeclare.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.HasContentGet">
            <summary>Sets the stub of QueueDeclare.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.InitializeStub">
            <summary>Initializes a new instance of type StubQueueDeclare</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.ProtocolClassId">
            <summary>Sets the stub of QueueDeclare.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.ProtocolClassIdGet">
            <summary>Sets the stub of QueueDeclare.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.ProtocolMethodId">
            <summary>Sets the stub of QueueDeclare.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.ProtocolMethodIdGet">
            <summary>Sets the stub of QueueDeclare.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.ProtocolMethodName">
            <summary>Sets the stub of QueueDeclare.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.ProtocolMethodNameGet">
            <summary>Sets the stub of QueueDeclare.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueueDeclare.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueueDeclare.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueueDeclare.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclare.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueueDeclare.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueueDeclareOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueueDeclareOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueueDeclareOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.HasContent">
            <summary>Sets the stub of QueueDeclareOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.HasContentGet">
            <summary>Sets the stub of QueueDeclareOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.InitializeStub">
            <summary>Initializes a new instance of type StubQueueDeclareOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.ProtocolClassId">
            <summary>Sets the stub of QueueDeclareOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.ProtocolClassIdGet">
            <summary>Sets the stub of QueueDeclareOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.ProtocolMethodId">
            <summary>Sets the stub of QueueDeclareOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.ProtocolMethodIdGet">
            <summary>Sets the stub of QueueDeclareOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.ProtocolMethodName">
            <summary>Sets the stub of QueueDeclareOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.ProtocolMethodNameGet">
            <summary>Sets the stub of QueueDeclareOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueueDeclareOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueueDeclareOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueueDeclareOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeclareOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueueDeclareOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueueDelete</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.#ctor(System.UInt16,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueueDelete.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueueDelete.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.HasContent">
            <summary>Sets the stub of QueueDelete.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.HasContentGet">
            <summary>Sets the stub of QueueDelete.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.InitializeStub">
            <summary>Initializes a new instance of type StubQueueDelete</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.ProtocolClassId">
            <summary>Sets the stub of QueueDelete.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.ProtocolClassIdGet">
            <summary>Sets the stub of QueueDelete.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.ProtocolMethodId">
            <summary>Sets the stub of QueueDelete.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.ProtocolMethodIdGet">
            <summary>Sets the stub of QueueDelete.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.ProtocolMethodName">
            <summary>Sets the stub of QueueDelete.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.ProtocolMethodNameGet">
            <summary>Sets the stub of QueueDelete.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueueDelete.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueueDelete.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueueDelete.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDelete.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueueDelete.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueueDeleteOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.#ctor(System.UInt32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueueDeleteOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueueDeleteOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.HasContent">
            <summary>Sets the stub of QueueDeleteOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.HasContentGet">
            <summary>Sets the stub of QueueDeleteOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.InitializeStub">
            <summary>Initializes a new instance of type StubQueueDeleteOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.ProtocolClassId">
            <summary>Sets the stub of QueueDeleteOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.ProtocolClassIdGet">
            <summary>Sets the stub of QueueDeleteOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.ProtocolMethodId">
            <summary>Sets the stub of QueueDeleteOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.ProtocolMethodIdGet">
            <summary>Sets the stub of QueueDeleteOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.ProtocolMethodName">
            <summary>Sets the stub of QueueDeleteOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.ProtocolMethodNameGet">
            <summary>Sets the stub of QueueDeleteOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueueDeleteOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueueDeleteOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueueDeleteOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueDeleteOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueueDeleteOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueuePurge</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.#ctor(System.UInt16,System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueuePurge.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueuePurge.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.HasContent">
            <summary>Sets the stub of QueuePurge.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.HasContentGet">
            <summary>Sets the stub of QueuePurge.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.InitializeStub">
            <summary>Initializes a new instance of type StubQueuePurge</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.ProtocolClassId">
            <summary>Sets the stub of QueuePurge.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.ProtocolClassIdGet">
            <summary>Sets the stub of QueuePurge.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.ProtocolMethodId">
            <summary>Sets the stub of QueuePurge.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.ProtocolMethodIdGet">
            <summary>Sets the stub of QueuePurge.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.ProtocolMethodName">
            <summary>Sets the stub of QueuePurge.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.ProtocolMethodNameGet">
            <summary>Sets the stub of QueuePurge.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueuePurge.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueuePurge.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueuePurge.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurge.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueuePurge.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueuePurgeOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.#ctor(System.UInt32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueuePurgeOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueuePurgeOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.HasContent">
            <summary>Sets the stub of QueuePurgeOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.HasContentGet">
            <summary>Sets the stub of QueuePurgeOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.InitializeStub">
            <summary>Initializes a new instance of type StubQueuePurgeOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.ProtocolClassId">
            <summary>Sets the stub of QueuePurgeOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.ProtocolClassIdGet">
            <summary>Sets the stub of QueuePurgeOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.ProtocolMethodId">
            <summary>Sets the stub of QueuePurgeOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.ProtocolMethodIdGet">
            <summary>Sets the stub of QueuePurgeOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.ProtocolMethodName">
            <summary>Sets the stub of QueuePurgeOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.ProtocolMethodNameGet">
            <summary>Sets the stub of QueuePurgeOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueuePurgeOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueuePurgeOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueuePurgeOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueuePurgeOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueuePurgeOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueueUnbind</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.#ctor(System.UInt16,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueueUnbind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueueUnbind.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.HasContent">
            <summary>Sets the stub of QueueUnbind.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.HasContentGet">
            <summary>Sets the stub of QueueUnbind.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.InitializeStub">
            <summary>Initializes a new instance of type StubQueueUnbind</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.ProtocolClassId">
            <summary>Sets the stub of QueueUnbind.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.ProtocolClassIdGet">
            <summary>Sets the stub of QueueUnbind.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.ProtocolMethodId">
            <summary>Sets the stub of QueueUnbind.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.ProtocolMethodIdGet">
            <summary>Sets the stub of QueueUnbind.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.ProtocolMethodName">
            <summary>Sets the stub of QueueUnbind.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.ProtocolMethodNameGet">
            <summary>Sets the stub of QueueUnbind.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueueUnbind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueueUnbind.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueueUnbind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbind.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueueUnbind.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.QueueUnbindOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of QueueUnbindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of QueueUnbindOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.HasContent">
            <summary>Sets the stub of QueueUnbindOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.HasContentGet">
            <summary>Sets the stub of QueueUnbindOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.InitializeStub">
            <summary>Initializes a new instance of type StubQueueUnbindOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.ProtocolClassId">
            <summary>Sets the stub of QueueUnbindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.ProtocolClassIdGet">
            <summary>Sets the stub of QueueUnbindOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.ProtocolMethodId">
            <summary>Sets the stub of QueueUnbindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.ProtocolMethodIdGet">
            <summary>Sets the stub of QueueUnbindOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.ProtocolMethodName">
            <summary>Sets the stub of QueueUnbindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.ProtocolMethodNameGet">
            <summary>Sets the stub of QueueUnbindOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of QueueUnbindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of QueueUnbindOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of QueueUnbindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubQueueUnbindOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of QueueUnbindOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.TxCommit</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of TxCommit.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of TxCommit.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.HasContent">
            <summary>Sets the stub of TxCommit.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.HasContentGet">
            <summary>Sets the stub of TxCommit.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.InitializeStub">
            <summary>Initializes a new instance of type StubTxCommit</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.ProtocolClassId">
            <summary>Sets the stub of TxCommit.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.ProtocolClassIdGet">
            <summary>Sets the stub of TxCommit.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.ProtocolMethodId">
            <summary>Sets the stub of TxCommit.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.ProtocolMethodIdGet">
            <summary>Sets the stub of TxCommit.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.ProtocolMethodName">
            <summary>Sets the stub of TxCommit.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.ProtocolMethodNameGet">
            <summary>Sets the stub of TxCommit.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of TxCommit.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of TxCommit.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of TxCommit.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommit.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of TxCommit.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.TxCommitOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of TxCommitOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of TxCommitOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.HasContent">
            <summary>Sets the stub of TxCommitOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.HasContentGet">
            <summary>Sets the stub of TxCommitOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.InitializeStub">
            <summary>Initializes a new instance of type StubTxCommitOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.ProtocolClassId">
            <summary>Sets the stub of TxCommitOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.ProtocolClassIdGet">
            <summary>Sets the stub of TxCommitOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.ProtocolMethodId">
            <summary>Sets the stub of TxCommitOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.ProtocolMethodIdGet">
            <summary>Sets the stub of TxCommitOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.ProtocolMethodName">
            <summary>Sets the stub of TxCommitOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.ProtocolMethodNameGet">
            <summary>Sets the stub of TxCommitOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of TxCommitOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of TxCommitOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of TxCommitOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxCommitOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of TxCommitOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.TxRollback</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of TxRollback.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of TxRollback.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.HasContent">
            <summary>Sets the stub of TxRollback.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.HasContentGet">
            <summary>Sets the stub of TxRollback.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.InitializeStub">
            <summary>Initializes a new instance of type StubTxRollback</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.ProtocolClassId">
            <summary>Sets the stub of TxRollback.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.ProtocolClassIdGet">
            <summary>Sets the stub of TxRollback.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.ProtocolMethodId">
            <summary>Sets the stub of TxRollback.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.ProtocolMethodIdGet">
            <summary>Sets the stub of TxRollback.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.ProtocolMethodName">
            <summary>Sets the stub of TxRollback.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.ProtocolMethodNameGet">
            <summary>Sets the stub of TxRollback.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of TxRollback.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of TxRollback.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of TxRollback.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollback.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of TxRollback.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.TxRollbackOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of TxRollbackOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of TxRollbackOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.HasContent">
            <summary>Sets the stub of TxRollbackOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.HasContentGet">
            <summary>Sets the stub of TxRollbackOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.InitializeStub">
            <summary>Initializes a new instance of type StubTxRollbackOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.ProtocolClassId">
            <summary>Sets the stub of TxRollbackOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.ProtocolClassIdGet">
            <summary>Sets the stub of TxRollbackOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.ProtocolMethodId">
            <summary>Sets the stub of TxRollbackOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.ProtocolMethodIdGet">
            <summary>Sets the stub of TxRollbackOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.ProtocolMethodName">
            <summary>Sets the stub of TxRollbackOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.ProtocolMethodNameGet">
            <summary>Sets the stub of TxRollbackOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of TxRollbackOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of TxRollbackOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of TxRollbackOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxRollbackOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of TxRollbackOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.TxSelect</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of TxSelect.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of TxSelect.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.HasContent">
            <summary>Sets the stub of TxSelect.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.HasContentGet">
            <summary>Sets the stub of TxSelect.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.InitializeStub">
            <summary>Initializes a new instance of type StubTxSelect</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.ProtocolClassId">
            <summary>Sets the stub of TxSelect.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.ProtocolClassIdGet">
            <summary>Sets the stub of TxSelect.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.ProtocolMethodId">
            <summary>Sets the stub of TxSelect.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.ProtocolMethodIdGet">
            <summary>Sets the stub of TxSelect.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.ProtocolMethodName">
            <summary>Sets the stub of TxSelect.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.ProtocolMethodNameGet">
            <summary>Sets the stub of TxSelect.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of TxSelect.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of TxSelect.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of TxSelect.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelect.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of TxSelect.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk">
            <summary>Stub type of RabbitMQ.Client.Framing.Impl.TxSelectOk</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of TxSelectOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of TxSelectOk.AppendArgumentDebugStringTo(StringBuilder sb)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.HasContent">
            <summary>Sets the stub of TxSelectOk.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.HasContentGet">
            <summary>Sets the stub of TxSelectOk.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.InitializeStub">
            <summary>Initializes a new instance of type StubTxSelectOk</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.ProtocolClassId">
            <summary>Sets the stub of TxSelectOk.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.ProtocolClassIdGet">
            <summary>Sets the stub of TxSelectOk.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.ProtocolMethodId">
            <summary>Sets the stub of TxSelectOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.ProtocolMethodIdGet">
            <summary>Sets the stub of TxSelectOk.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.ProtocolMethodName">
            <summary>Sets the stub of TxSelectOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.ProtocolMethodNameGet">
            <summary>Sets the stub of TxSelectOk.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of TxSelectOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of TxSelectOk.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of TxSelectOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Framing.Impl.Fakes.StubTxSelectOk.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of TxSelectOk.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel">
            <summary>Shim type of RabbitMQ.Client.Impl.AutorecoveringModel</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.#ctor(RabbitMQ.Client.Impl.AutorecoveringModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.Abort">
            <summary>Sets the shim of AutorecoveringModel.Abort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AbortUInt16String">
            <summary>Sets the shim of AutorecoveringModel.Abort(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.Abort">
            <summary>Sets the shim of AutorecoveringModel.Abort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.AbortUInt16String">
            <summary>Sets the shim of AutorecoveringModel.Abort(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.AutomaticallyRecoverAutorecoveringConnectionIConnection">
            <summary>Sets the shim of AutorecoveringModel.AutomaticallyRecover(AutorecoveringConnection conn, IConnection connDelegate)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicAckUInt64Boolean">
            <summary>Sets the shim of AutorecoveringModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicAcksAddEventHandlerOfBasicAckEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_BasicAcks(EventHandler`1&lt;BasicAckEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicAcksRemoveEventHandlerOfBasicAckEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_BasicAcks(EventHandler`1&lt;BasicAckEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicCancelString">
            <summary>Sets the shim of AutorecoveringModel.BasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicConsumeStringBooleanStringBooleanBooleanIDictionaryOfStringObjectIBasicConsumer">
            <summary>Sets the shim of AutorecoveringModel.BasicConsume(String queue, Boolean autoAck, String consumerTag, Boolean noLocal, Boolean exclusive, IDictionary`2&lt;String,Object&gt; arguments, IBasicConsumer consumer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicGetStringBoolean">
            <summary>Sets the shim of AutorecoveringModel.BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicNacksAddEventHandlerOfBasicNackEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_BasicNacks(EventHandler`1&lt;BasicNackEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicNacksRemoveEventHandlerOfBasicNackEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_BasicNacks(EventHandler`1&lt;BasicNackEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel.BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicQosUInt16Boolean">
            <summary>Sets the shim of AutorecoveringModel.BasicQos(UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicQosUInt32UInt16Boolean">
            <summary>Sets the shim of AutorecoveringModel.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicRecoverAsyncBoolean">
            <summary>Sets the shim of AutorecoveringModel.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicRecoverBoolean">
            <summary>Sets the shim of AutorecoveringModel.BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicRecoverOkAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_BasicRecoverOk(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicRecoverOkRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_BasicRecoverOk(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicRejectUInt64Boolean">
            <summary>Sets the shim of AutorecoveringModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicReturnAddEventHandlerOfBasicReturnEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_BasicReturn(EventHandler`1&lt;BasicReturnEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.BasicReturnRemoveEventHandlerOfBasicReturnEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_BasicReturn(EventHandler`1&lt;BasicReturnEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.CallbackExceptionAddEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.CallbackExceptionRemoveEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ChannelNumberGet">
            <summary>Sets the shim of AutorecoveringModel.get_ChannelNumber()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.Close">
            <summary>Sets the shim of AutorecoveringModel.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.CloseReasonGet">
            <summary>Sets the shim of AutorecoveringModel.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.CloseShutdownEventArgsBoolean">
            <summary>Sets the shim of AutorecoveringModel.Close(ShutdownEventArgs reason, Boolean abort)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.CloseUInt16String">
            <summary>Sets the shim of AutorecoveringModel.Close(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.CloseUInt16StringBoolean">
            <summary>Sets the shim of AutorecoveringModel.Close(UInt16 replyCode, String replyText, Boolean abort)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ConfirmSelect">
            <summary>Sets the shim of AutorecoveringModel.ConfirmSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ConnectionTuneOkUInt16UInt32UInt16">
            <summary>Sets the shim of AutorecoveringModel.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ConsumerCountString">
            <summary>Sets the shim of AutorecoveringModel.ConsumerCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ConsumerDispatcherGet">
            <summary>Sets the shim of AutorecoveringModel.get_ConsumerDispatcher()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ContinuationTimeoutGet">
            <summary>Sets the shim of AutorecoveringModel.get_ContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of AutorecoveringModel.set_ContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.CreateBasicProperties">
            <summary>Sets the shim of AutorecoveringModel.CreateBasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.DefaultConsumerGet">
            <summary>Sets the shim of AutorecoveringModel.get_DefaultConsumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.DefaultConsumerSetIBasicConsumer">
            <summary>Sets the shim of AutorecoveringModel.set_DefaultConsumer(IBasicConsumer value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.DelegateGet">
            <summary>Sets the shim of AutorecoveringModel.get_Delegate()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.DispatchAsynchronousCommand">
            <summary>Sets the shim of AutorecoveringModel.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ExchangeBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeBindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ExchangeBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeBind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ExchangeDeclareNoWaitStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDeclareNoWait(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ExchangeDeclarePassiveString">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDeclarePassive(String exchange)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ExchangeDeclareStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDeclare(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ExchangeDeleteNoWaitStringBoolean">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDeleteNoWait(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ExchangeDeleteStringBoolean">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDelete(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ExchangeUnbindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeUnbindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ExchangeUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeUnbind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.FinishClose">
            <summary>Sets the shim of AutorecoveringModel.FinishClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.FlowControlAddEventHandlerOfFlowControlEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_FlowControl(EventHandler`1&lt;FlowControlEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.FlowControlRemoveEventHandlerOfFlowControlEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_FlowControl(EventHandler`1&lt;FlowControlEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicAckUInt64Boolean">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicCancelOkString">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicCancelStringBoolean">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicConsumeOkString">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicGetEmpty">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicGetEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicRecoverOk">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicRecoverOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleBasicReturnUInt16StringStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicReturn(UInt16 replyCode, String replyText, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleChannelCloseOk">
            <summary>Sets the shim of AutorecoveringModel.HandleChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of AutorecoveringModel.HandleChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleChannelFlowBoolean">
            <summary>Sets the shim of AutorecoveringModel.HandleChannelFlow(Boolean active)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleCommandISessionCommand">
            <summary>Sets the shim of AutorecoveringModel.HandleCommand(ISession session, Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleConnectionBlockedString">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleConnectionOpenOkString">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionOpenOk(String knownHosts)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleConnectionSecureByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionSecure(Byte[] challenge)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleConnectionStartByteByteIDictionaryOfStringObjectByteArrayByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionStart(Byte versionMajor, Byte versionMinor, IDictionary`2&lt;String,Object&gt; serverProperties, Byte[] mechanisms, Byte[] locales)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleConnectionTuneUInt16UInt32UInt16">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionTune(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleConnectionUnblocked">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.HandleQueueDeclareOkStringUInt32UInt32">
            <summary>Sets the shim of AutorecoveringModel.HandleQueueDeclareOk(String queue, UInt32 messageCount, UInt32 consumerCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.IsClosedGet">
            <summary>Sets the shim of AutorecoveringModel.get_IsClosed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.IsOpenGet">
            <summary>Sets the shim of AutorecoveringModel.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.MessageCountString">
            <summary>Sets the shim of AutorecoveringModel.MessageCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ModelShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_ModelShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ModelShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_ModelShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.NextPublishSeqNoGet">
            <summary>Sets the shim of AutorecoveringModel.get_NextPublishSeqNo()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.OnBasicAckBasicAckEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.OnBasicNackBasicNackEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.OnBasicRecoverOkEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.OnBasicReturnBasicReturnEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.OnFlowControlFlowControlEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.OnModelShutdownShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.OnSessionShutdownISessionShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnSessionShutdown(ISession session, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.QueueBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueBindNoWait(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.QueueBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueBind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.QueueDeclareNoWaitStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueDeclareNoWait(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.QueueDeclarePassiveString">
            <summary>Sets the shim of AutorecoveringModel.QueueDeclarePassive(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.QueueDeclareStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueDeclare(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.QueueDeleteNoWaitStringBooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel.QueueDeleteNoWait(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.QueueDeleteStringBooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel.QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.QueuePurgeString">
            <summary>Sets the shim of AutorecoveringModel.QueuePurge(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.QueueUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.RecoverBasicAckHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverBasicAckHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.RecoverBasicNackHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverBasicNackHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.RecoverBasicReturnHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverBasicReturnHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.RecoverCallbackExceptionHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverCallbackExceptionHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.RecoverModelShutdownHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverModelShutdownHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.RecoverState">
            <summary>Sets the shim of AutorecoveringModel.RecoverState()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.RecoveryAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.RecoveryRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.RunRecoveryEventHandlers">
            <summary>Sets the shim of AutorecoveringModel.RunRecoveryEventHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.SetCloseReasonShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.SetCloseReason(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.SystemIDisposableDispose">
            <summary>Sets the shim of AutorecoveringModel.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.ToString01">
            <summary>Sets the shim of AutorecoveringModel.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.TxCommit">
            <summary>Sets the shim of AutorecoveringModel.TxCommit()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.TxRollback">
            <summary>Sets the shim of AutorecoveringModel.TxRollback()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.TxSelect">
            <summary>Sets the shim of AutorecoveringModel.TxSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.WaitForConfirms">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirms()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.WaitForConfirmsOrDie">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirmsOrDie()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.WaitForConfirmsOrDieTimeSpan">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirmsOrDie(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.WaitForConfirmsTimeSpan">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirms(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances.WaitForConfirmsTimeSpanBooleanOut">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirms(TimeSpan timeout, Boolean&amp; timedOut)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_BasicCancelStringBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_BasicConsumeStringStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_BasicGetStringBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_BasicRecoverBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ChannelCloseOk">
            <summary>Sets the shim of AutorecoveringModel._Private_ChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of AutorecoveringModel._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ChannelFlowOkBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ChannelOpenString">
            <summary>Sets the shim of AutorecoveringModel._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ConfirmSelectBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ConnectionCloseOk">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ConnectionOpenStringStringBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ConnectionSecureOkByteArray">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ExchangeBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ExchangeDeclareStringStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ExchangeDeleteStringBooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_ExchangeUnbindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_QueueBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_QueueDeclareStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_QueueDeleteStringBooleanBooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AllInstances._Private_QueuePurgeStringBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.AutomaticallyRecoverAutorecoveringConnectionIConnection">
            <summary>Sets the shim of AutorecoveringModel.AutomaticallyRecover(AutorecoveringConnection conn, IConnection connDelegate)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicAckUInt64Boolean">
            <summary>Sets the shim of AutorecoveringModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicAcksAddEventHandlerOfBasicAckEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_BasicAcks(EventHandler`1&lt;BasicAckEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicAcksRemoveEventHandlerOfBasicAckEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_BasicAcks(EventHandler`1&lt;BasicAckEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicCancelString">
            <summary>Sets the shim of AutorecoveringModel.BasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicConsumeStringBooleanStringBooleanBooleanIDictionaryOfStringObjectIBasicConsumer">
            <summary>Sets the shim of AutorecoveringModel.BasicConsume(String queue, Boolean autoAck, String consumerTag, Boolean noLocal, Boolean exclusive, IDictionary`2&lt;String,Object&gt; arguments, IBasicConsumer consumer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicGetStringBoolean">
            <summary>Sets the shim of AutorecoveringModel.BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicNacksAddEventHandlerOfBasicNackEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_BasicNacks(EventHandler`1&lt;BasicNackEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicNacksRemoveEventHandlerOfBasicNackEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_BasicNacks(EventHandler`1&lt;BasicNackEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel.BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicQosUInt16Boolean">
            <summary>Sets the shim of AutorecoveringModel.BasicQos(UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicQosUInt32UInt16Boolean">
            <summary>Sets the shim of AutorecoveringModel.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicRecoverAsyncBoolean">
            <summary>Sets the shim of AutorecoveringModel.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicRecoverBoolean">
            <summary>Sets the shim of AutorecoveringModel.BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicRecoverOkAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_BasicRecoverOk(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicRecoverOkRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_BasicRecoverOk(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicRejectUInt64Boolean">
            <summary>Sets the shim of AutorecoveringModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicReturnAddEventHandlerOfBasicReturnEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_BasicReturn(EventHandler`1&lt;BasicReturnEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BasicReturnRemoveEventHandlerOfBasicReturnEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_BasicReturn(EventHandler`1&lt;BasicReturnEventArgs&gt; value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.Bind(RabbitMQ.Client.IModel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.Bind(RabbitMQ.Client.IRecoverable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.Bind(RabbitMQ.Client.Impl.IFullModel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.CallbackExceptionAddEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.CallbackExceptionRemoveEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ChannelNumberGet">
            <summary>Sets the shim of AutorecoveringModel.get_ChannelNumber()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.Close">
            <summary>Sets the shim of AutorecoveringModel.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.CloseReasonGet">
            <summary>Sets the shim of AutorecoveringModel.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.CloseShutdownEventArgsBoolean">
            <summary>Sets the shim of AutorecoveringModel.Close(ShutdownEventArgs reason, Boolean abort)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.CloseUInt16String">
            <summary>Sets the shim of AutorecoveringModel.Close(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.CloseUInt16StringBoolean">
            <summary>Sets the shim of AutorecoveringModel.Close(UInt16 replyCode, String replyText, Boolean abort)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ConfirmSelect">
            <summary>Sets the shim of AutorecoveringModel.ConfirmSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ConnectionTuneOkUInt16UInt32UInt16">
            <summary>Sets the shim of AutorecoveringModel.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ConstructorAutorecoveringConnectionRecoveryAwareModel">
            <summary>Sets the shim of AutorecoveringModel.AutorecoveringModel(AutorecoveringConnection conn, RecoveryAwareModel _delegate)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ConsumerCountString">
            <summary>Sets the shim of AutorecoveringModel.ConsumerCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ConsumerDispatcherGet">
            <summary>Sets the shim of AutorecoveringModel.get_ConsumerDispatcher()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ContinuationTimeoutGet">
            <summary>Sets the shim of AutorecoveringModel.get_ContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of AutorecoveringModel.set_ContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.CreateBasicProperties">
            <summary>Sets the shim of AutorecoveringModel.CreateBasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.DefaultConsumerGet">
            <summary>Sets the shim of AutorecoveringModel.get_DefaultConsumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.DefaultConsumerSetIBasicConsumer">
            <summary>Sets the shim of AutorecoveringModel.set_DefaultConsumer(IBasicConsumer value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.DelegateGet">
            <summary>Sets the shim of AutorecoveringModel.get_Delegate()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.DispatchAsynchronousCommand">
            <summary>Sets the shim of AutorecoveringModel.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ExchangeBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeBindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ExchangeBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeBind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ExchangeDeclareNoWaitStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDeclareNoWait(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ExchangeDeclarePassiveString">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDeclarePassive(String exchange)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ExchangeDeclareStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDeclare(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ExchangeDeleteNoWaitStringBoolean">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDeleteNoWait(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ExchangeDeleteStringBoolean">
            <summary>Sets the shim of AutorecoveringModel.ExchangeDelete(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ExchangeUnbindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeUnbindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ExchangeUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.ExchangeUnbind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.FinishClose">
            <summary>Sets the shim of AutorecoveringModel.FinishClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.FlowControlAddEventHandlerOfFlowControlEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_FlowControl(EventHandler`1&lt;FlowControlEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.FlowControlRemoveEventHandlerOfFlowControlEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_FlowControl(EventHandler`1&lt;FlowControlEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicAckUInt64Boolean">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicCancelOkString">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicCancelStringBoolean">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicConsumeOkString">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicGetEmpty">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicGetEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicRecoverOk">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicRecoverOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleBasicReturnUInt16StringStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleBasicReturn(UInt16 replyCode, String replyText, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleChannelCloseOk">
            <summary>Sets the shim of AutorecoveringModel.HandleChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of AutorecoveringModel.HandleChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleChannelFlowBoolean">
            <summary>Sets the shim of AutorecoveringModel.HandleChannelFlow(Boolean active)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleCommandISessionCommand">
            <summary>Sets the shim of AutorecoveringModel.HandleCommand(ISession session, Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleConnectionBlockedString">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleConnectionOpenOkString">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionOpenOk(String knownHosts)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleConnectionSecureByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionSecure(Byte[] challenge)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleConnectionStartByteByteIDictionaryOfStringObjectByteArrayByteArray">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionStart(Byte versionMajor, Byte versionMinor, IDictionary`2&lt;String,Object&gt; serverProperties, Byte[] mechanisms, Byte[] locales)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleConnectionTuneUInt16UInt32UInt16">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionTune(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleConnectionUnblocked">
            <summary>Sets the shim of AutorecoveringModel.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.HandleQueueDeclareOkStringUInt32UInt32">
            <summary>Sets the shim of AutorecoveringModel.HandleQueueDeclareOk(String queue, UInt32 messageCount, UInt32 consumerCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.IsClosedGet">
            <summary>Sets the shim of AutorecoveringModel.get_IsClosed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.IsOpenGet">
            <summary>Sets the shim of AutorecoveringModel.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.MessageCountString">
            <summary>Sets the shim of AutorecoveringModel.MessageCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ModelShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_ModelShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ModelShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_ModelShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.NextPublishSeqNoGet">
            <summary>Sets the shim of AutorecoveringModel.get_NextPublishSeqNo()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.OnBasicAckBasicAckEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.OnBasicNackBasicNackEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.OnBasicRecoverOkEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.OnBasicReturnBasicReturnEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.OnFlowControlFlowControlEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.OnModelShutdownShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.OnSessionShutdownISessionShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.OnSessionShutdown(ISession session, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.QueueBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueBindNoWait(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.QueueBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueBind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.QueueDeclareNoWaitStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueDeclareNoWait(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.QueueDeclarePassiveString">
            <summary>Sets the shim of AutorecoveringModel.QueueDeclarePassive(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.QueueDeclareStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueDeclare(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.QueueDeleteNoWaitStringBooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel.QueueDeleteNoWait(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.QueueDeleteStringBooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel.QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.QueuePurgeString">
            <summary>Sets the shim of AutorecoveringModel.QueuePurge(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.QueueUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.RecoverBasicAckHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverBasicAckHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.RecoverBasicNackHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverBasicNackHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.RecoverBasicReturnHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverBasicReturnHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.RecoverCallbackExceptionHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverCallbackExceptionHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.RecoverModelShutdownHandlers">
            <summary>Sets the shim of AutorecoveringModel.RecoverModelShutdownHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.RecoverState">
            <summary>Sets the shim of AutorecoveringModel.RecoverState()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.RecoveryAddEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringModel.add_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.RecoveryRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of AutorecoveringModel.remove_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.RunRecoveryEventHandlers">
            <summary>Sets the shim of AutorecoveringModel.RunRecoveryEventHandlers()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.SetCloseReasonShutdownEventArgs">
            <summary>Sets the shim of AutorecoveringModel.SetCloseReason(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.SystemIDisposableDispose">
            <summary>Sets the shim of AutorecoveringModel.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.ToString">
            <summary>Sets the shim of AutorecoveringModel.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.TxCommit">
            <summary>Sets the shim of AutorecoveringModel.TxCommit()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.TxRollback">
            <summary>Sets the shim of AutorecoveringModel.TxRollback()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.TxSelect">
            <summary>Sets the shim of AutorecoveringModel.TxSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.WaitForConfirms">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirms()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.WaitForConfirmsOrDie">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirmsOrDie()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.WaitForConfirmsOrDieTimeSpan">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirmsOrDie(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.WaitForConfirmsTimeSpan">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirms(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel.WaitForConfirmsTimeSpanBooleanOut">
            <summary>Sets the shim of AutorecoveringModel.WaitForConfirms(TimeSpan timeout, Boolean&amp; timedOut)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_BasicCancelStringBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_BasicConsumeStringStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_BasicGetStringBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_BasicRecoverBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ChannelCloseOk">
            <summary>Sets the shim of AutorecoveringModel._Private_ChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of AutorecoveringModel._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ChannelFlowOkBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ChannelOpenString">
            <summary>Sets the shim of AutorecoveringModel._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ConfirmSelectBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ConnectionCloseOk">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ConnectionOpenStringStringBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ConnectionSecureOkByteArray">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the shim of AutorecoveringModel._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ExchangeBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ExchangeDeclareStringStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ExchangeDeleteStringBooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_ExchangeUnbindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_QueueBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_QueueDeclareStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of AutorecoveringModel._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_QueueDeleteStringBooleanBooleanBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimAutorecoveringModel._Private_QueuePurgeStringBoolean">
            <summary>Sets the shim of AutorecoveringModel._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties">
            <summary>Shim type of RabbitMQ.Client.Impl.BasicProperties</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.#ctor(RabbitMQ.Client.Impl.BasicProperties)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.AllInstances.Clone">
            <summary>Sets the shim of BasicProperties.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.AllInstances.PersistentGet">
            <summary>Sets the shim of BasicProperties.get_Persistent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.AllInstances.PersistentSetBoolean">
            <summary>Sets the shim of BasicProperties.set_Persistent(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.AllInstances.ReplyToAddressGet">
            <summary>Sets the shim of BasicProperties.get_ReplyToAddress()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.AllInstances.ReplyToAddressSetPublicationAddress">
            <summary>Sets the shim of BasicProperties.set_ReplyToAddress(PublicationAddress value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.AllInstances.SetPersistentBoolean">
            <summary>Sets the shim of BasicProperties.SetPersistent(Boolean persistent)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.Bind(RabbitMQ.Client.IBasicProperties)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.Bind(RabbitMQ.Client.IContentHeader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.Clone">
            <summary>Sets the shim of BasicProperties.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.Constructor">
            <summary>Sets the shim of BasicProperties.BasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.PersistentGet">
            <summary>Sets the shim of BasicProperties.get_Persistent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.PersistentSetBoolean">
            <summary>Sets the shim of BasicProperties.set_Persistent(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.ReplyToAddressGet">
            <summary>Sets the shim of BasicProperties.get_ReplyToAddress()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.ReplyToAddressSetPublicationAddress">
            <summary>Sets the shim of BasicProperties.set_ReplyToAddress(PublicationAddress value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimBasicProperties.SetPersistentBoolean">
            <summary>Sets the shim of BasicProperties.SetPersistent(Boolean persistent)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException">
            <summary>Shim type of RabbitMQ.Client.Impl.ChannelErrorException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.#ctor(RabbitMQ.Client.Impl.ChannelErrorException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.AllInstances.ChannelGet">
            <summary>Sets the shim of ChannelErrorException.get_Channel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.AllInstances.ChannelSetInt32">
            <summary>Sets the shim of ChannelErrorException.set_Channel(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.AllInstances.ReplyCodeGet">
            <summary>Sets the shim of ChannelErrorException.get_ReplyCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.ChannelGet">
            <summary>Sets the shim of ChannelErrorException.get_Channel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.ChannelSetInt32">
            <summary>Sets the shim of ChannelErrorException.set_Channel(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.ConstructorInt32">
            <summary>Sets the shim of ChannelErrorException.ChannelErrorException(Int32 channel)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimChannelErrorException.ReplyCodeGet">
            <summary>Sets the shim of ChannelErrorException.get_ReplyCode()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimCommand">
            <summary>Shim type of RabbitMQ.Client.Impl.Command</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimCommand.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimCommand.#ctor(RabbitMQ.Client.Impl.Command)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.AppendBodyFragmentByteArray">
            <summary>Sets the shim of Command.AppendBodyFragment(Byte[] fragment)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.BodyGet">
            <summary>Sets the shim of Command.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.ConsolidateBody">
            <summary>Sets the shim of Command.ConsolidateBody()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.HeaderGet">
            <summary>Sets the shim of Command.get_Header()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.HeaderSetContentHeaderBase">
            <summary>Sets the shim of Command.set_Header(ContentHeaderBase value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.MethodGet">
            <summary>Sets the shim of Command.get_Method()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.MethodSetMethodBase">
            <summary>Sets the shim of Command.set_Method(MethodBase value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.TransmitAsFrameSetInt32Connection">
            <summary>Sets the shim of Command.TransmitAsFrameSet(Int32 channelNumber, Connection connection)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.TransmitAsSingleFrameInt32Connection">
            <summary>Sets the shim of Command.TransmitAsSingleFrame(Int32 channelNumber, Connection connection)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AllInstances.TransmitInt32Connection">
            <summary>Sets the shim of Command.Transmit(Int32 channelNumber, Connection connection)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.AppendBodyFragmentByteArray">
            <summary>Sets the shim of Command.AppendBodyFragment(Byte[] fragment)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimCommand.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimCommand.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.BodyGet">
            <summary>Sets the shim of Command.get_Body()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.CheckEmptyFrameSize">
            <summary>Sets the shim of Command.CheckEmptyFrameSize()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.ConsolidateBody">
            <summary>Sets the shim of Command.ConsolidateBody()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.Constructor">
            <summary>Sets the shim of Command.Command()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.ConstructorMethodBase">
            <summary>Sets the shim of Command.Command(MethodBase method)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.ConstructorMethodBaseContentHeaderBaseByteArray">
            <summary>Sets the shim of Command.Command(MethodBase method, ContentHeaderBase header, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.HeaderGet">
            <summary>Sets the shim of Command.get_Header()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.HeaderSetContentHeaderBase">
            <summary>Sets the shim of Command.set_Header(ContentHeaderBase value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.MethodGet">
            <summary>Sets the shim of Command.get_Method()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.MethodSetMethodBase">
            <summary>Sets the shim of Command.set_Method(MethodBase value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.StaticConstructor">
            <summary>Sets the shim of Command.Command()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.TransmitAsFrameSetInt32Connection">
            <summary>Sets the shim of Command.TransmitAsFrameSet(Int32 channelNumber, Connection connection)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.TransmitAsSingleFrameInt32Connection">
            <summary>Sets the shim of Command.TransmitAsSingleFrame(Int32 channelNumber, Connection connection)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommand.TransmitInt32Connection">
            <summary>Sets the shim of Command.Transmit(Int32 channelNumber, Connection connection)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler">
            <summary>Shim type of RabbitMQ.Client.Impl.CommandAssembler</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.#ctor(RabbitMQ.Client.Impl.CommandAssembler)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.AllInstances.CompletedCommand">
            <summary>Sets the shim of CommandAssembler.CompletedCommand()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.AllInstances.HandleFrameFrame">
            <summary>Sets the shim of CommandAssembler.HandleFrame(Frame f)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.AllInstances.Reset">
            <summary>Sets the shim of CommandAssembler.Reset()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.AllInstances.UpdateContentBodyState">
            <summary>Sets the shim of CommandAssembler.UpdateContentBodyState()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.CompletedCommand">
            <summary>Sets the shim of CommandAssembler.CompletedCommand()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.ConstructorProtocolBase">
            <summary>Sets the shim of CommandAssembler.CommandAssembler(ProtocolBase protocol)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.HandleFrameFrame">
            <summary>Sets the shim of CommandAssembler.HandleFrame(Frame f)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.Reset">
            <summary>Sets the shim of CommandAssembler.Reset()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimCommandAssembler.UpdateContentBodyState">
            <summary>Sets the shim of CommandAssembler.UpdateContentBodyState()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimConnectionSecureOrTune">
            <summary>Shim type of RabbitMQ.Client.Impl.ConnectionSecureOrTune</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionSecureOrTune.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionSecureOrTune.#ctor(RabbitMQ.Client.Impl.ConnectionSecureOrTune)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimConnectionSecureOrTune.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionSecureOrTune.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionSecureOrTune.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimConnectionSecureOrTune.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimConnectionSecureOrTune.Constructor">
            <summary>Sets the shim of ConnectionSecureOrTune.ConnectionSecureOrTune()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimConnectionStartDetails">
            <summary>Shim type of RabbitMQ.Client.Impl.ConnectionStartDetails</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionStartDetails.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionStartDetails.#ctor(RabbitMQ.Client.Impl.ConnectionStartDetails)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimConnectionStartDetails.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionStartDetails.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionStartDetails.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimConnectionStartDetails.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimConnectionStartDetails.Constructor">
            <summary>Sets the shim of ConnectionStartDetails.ConnectionStartDetails()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimConnectionTuneDetails">
            <summary>Shim type of RabbitMQ.Client.Impl.ConnectionTuneDetails</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionTuneDetails.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimConnectionTuneDetails.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionTuneDetails.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimConnectionTuneDetails.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimConnectionTuneDetails.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase">
            <summary>Shim type of RabbitMQ.Client.Impl.ContentHeaderBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.#ctor(RabbitMQ.Client.Impl.ContentHeaderBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.AllInstances.Clone">
            <summary>Sets the shim of ContentHeaderBase.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.AllInstances.ReadFromNetworkBinaryReader">
            <summary>Sets the shim of ContentHeaderBase.ReadFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.AllInstances.WriteToNetworkBinaryWriterUInt64">
            <summary>Sets the shim of ContentHeaderBase.WriteTo(NetworkBinaryWriter writer, UInt64 bodySize)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.Bind(RabbitMQ.Client.IContentHeader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.Clone">
            <summary>Sets the shim of ContentHeaderBase.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.Constructor">
            <summary>Sets the shim of ContentHeaderBase.ContentHeaderBase()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.ReadFromNetworkBinaryReader">
            <summary>Sets the shim of ContentHeaderBase.ReadFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderBase.WriteToNetworkBinaryWriterUInt64">
            <summary>Sets the shim of ContentHeaderBase.WriteTo(NetworkBinaryWriter writer, UInt64 bodySize)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader">
            <summary>Shim type of RabbitMQ.Client.Impl.ContentHeaderPropertyReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.#ctor(RabbitMQ.Client.Impl.ContentHeaderPropertyReader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.BaseReaderGet">
            <summary>Sets the shim of ContentHeaderPropertyReader.get_BaseReader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.BaseReaderSetNetworkBinaryReader">
            <summary>Sets the shim of ContentHeaderPropertyReader.set_BaseReader(NetworkBinaryReader value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ContinuationBitSetGet">
            <summary>Sets the shim of ContentHeaderPropertyReader.get_ContinuationBitSet()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.FinishPresence">
            <summary>Sets the shim of ContentHeaderPropertyReader.FinishPresence()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadBit">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadBit()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadFlagWord">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadFlagWord()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadLong">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadLong()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadLonglong">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadLonglong()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadLongstr">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadLongstr()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadOctet">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadOctet()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadPresence">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadPresence()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadShort">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadShort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadShortstr">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadShortstr()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadTable">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadTable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.AllInstances.ReadTimestamp">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadTimestamp()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.BaseReaderGet">
            <summary>Sets the shim of ContentHeaderPropertyReader.get_BaseReader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.BaseReaderSetNetworkBinaryReader">
            <summary>Sets the shim of ContentHeaderPropertyReader.set_BaseReader(NetworkBinaryReader value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ConstructorNetworkBinaryReader">
            <summary>Sets the shim of ContentHeaderPropertyReader.ContentHeaderPropertyReader(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ContinuationBitSetGet">
            <summary>Sets the shim of ContentHeaderPropertyReader.get_ContinuationBitSet()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.FinishPresence">
            <summary>Sets the shim of ContentHeaderPropertyReader.FinishPresence()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadBit">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadBit()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadFlagWord">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadFlagWord()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadLong">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadLong()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadLonglong">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadLonglong()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadLongstr">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadLongstr()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadOctet">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadOctet()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadPresence">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadPresence()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadShort">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadShort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadShortstr">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadShortstr()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadTable">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadTable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyReader.ReadTimestamp">
            <summary>Sets the shim of ContentHeaderPropertyReader.ReadTimestamp()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter">
            <summary>Shim type of RabbitMQ.Client.Impl.ContentHeaderPropertyWriter</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.#ctor(RabbitMQ.Client.Impl.ContentHeaderPropertyWriter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.BaseWriterGet">
            <summary>Sets the shim of ContentHeaderPropertyWriter.get_BaseWriter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.BaseWriterSetNetworkBinaryWriter">
            <summary>Sets the shim of ContentHeaderPropertyWriter.set_BaseWriter(NetworkBinaryWriter value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.EmitFlagWordBoolean">
            <summary>Sets the shim of ContentHeaderPropertyWriter.EmitFlagWord(Boolean continuationBit)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.FinishPresence">
            <summary>Sets the shim of ContentHeaderPropertyWriter.FinishPresence()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WriteBitBoolean">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteBit(Boolean bit)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WriteLongUInt32">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteLong(UInt32 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WriteLonglongUInt64">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteLonglong(UInt64 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WriteLongstrByteArray">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteLongstr(Byte[] val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WriteOctetByte">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteOctet(Byte val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WritePresenceBoolean">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WritePresence(Boolean present)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WriteShortUInt16">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteShort(UInt16 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WriteShortstrString">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteShortstr(String val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WriteTableIDictionaryOfStringObject">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteTable(IDictionary`2&lt;String,Object&gt; val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.AllInstances.WriteTimestampAmqpTimestamp">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteTimestamp(AmqpTimestamp val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.BaseWriterGet">
            <summary>Sets the shim of ContentHeaderPropertyWriter.get_BaseWriter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.BaseWriterSetNetworkBinaryWriter">
            <summary>Sets the shim of ContentHeaderPropertyWriter.set_BaseWriter(NetworkBinaryWriter value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.ConstructorNetworkBinaryWriter">
            <summary>Sets the shim of ContentHeaderPropertyWriter.ContentHeaderPropertyWriter(NetworkBinaryWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.EmitFlagWordBoolean">
            <summary>Sets the shim of ContentHeaderPropertyWriter.EmitFlagWord(Boolean continuationBit)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.FinishPresence">
            <summary>Sets the shim of ContentHeaderPropertyWriter.FinishPresence()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WriteBitBoolean">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteBit(Boolean bit)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WriteLongUInt32">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteLong(UInt32 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WriteLonglongUInt64">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteLonglong(UInt64 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WriteLongstrByteArray">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteLongstr(Byte[] val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WriteOctetByte">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteOctet(Byte val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WritePresenceBoolean">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WritePresence(Boolean present)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WriteShortUInt16">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteShort(UInt16 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WriteShortstrString">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteShortstr(String val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WriteTableIDictionaryOfStringObject">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteTable(IDictionary`2&lt;String,Object&gt; val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimContentHeaderPropertyWriter.WriteTimestampAmqpTimestamp">
            <summary>Sets the shim of ContentHeaderPropertyWriter.WriteTimestamp(AmqpTimestamp val)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimExtensionMethods">
            <summary>Shim type of RabbitMQ.Client.Impl.ExtensionMethods</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimExtensionMethods.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimExtensionMethods.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimExtensionMethods.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimExtensionMethods.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimExtensionMethods.RandomItemOf1IListOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IList{``0},``0})">
            <summary>Sets the shim of ExtensionMethods.RandomItem(IList`1&lt;!!0&gt; list)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimFrame">
            <summary>Shim type of RabbitMQ.Client.Impl.Frame</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimFrame.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimFrame.#ctor(RabbitMQ.Client.Impl.Frame)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.ChannelGet">
            <summary>Sets the shim of Frame.get_Channel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.ChannelSetInt32">
            <summary>Sets the shim of Frame.set_Channel(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.FinishWriting">
            <summary>Sets the shim of Frame.FinishWriting()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.GetReader">
            <summary>Sets the shim of Frame.GetReader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.GetWriter">
            <summary>Sets the shim of Frame.GetWriter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.PayloadGet">
            <summary>Sets the shim of Frame.get_Payload()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.PayloadSetByteArray">
            <summary>Sets the shim of Frame.set_Payload(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.ToString01">
            <summary>Sets the shim of Frame.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.TypeGet">
            <summary>Sets the shim of Frame.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.TypeSetInt32">
            <summary>Sets the shim of Frame.set_Type(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.AllInstances.WriteToNetworkBinaryWriter">
            <summary>Sets the shim of Frame.WriteTo(NetworkBinaryWriter writer)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimFrame.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimFrame.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.ChannelGet">
            <summary>Sets the shim of Frame.get_Channel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.ChannelSetInt32">
            <summary>Sets the shim of Frame.set_Channel(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.Constructor">
            <summary>Sets the shim of Frame.Frame()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.ConstructorInt32Int32">
            <summary>Sets the shim of Frame.Frame(Int32 type, Int32 channel)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.ConstructorInt32Int32ByteArray">
            <summary>Sets the shim of Frame.Frame(Int32 type, Int32 channel, Byte[] payload)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.FinishWriting">
            <summary>Sets the shim of Frame.FinishWriting()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.GetReader">
            <summary>Sets the shim of Frame.GetReader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.GetWriter">
            <summary>Sets the shim of Frame.GetWriter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.PayloadGet">
            <summary>Sets the shim of Frame.get_Payload()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.PayloadSetByteArray">
            <summary>Sets the shim of Frame.set_Payload(Byte[] value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.ProcessProtocolHeaderNetworkBinaryReader">
            <summary>Sets the shim of Frame.ProcessProtocolHeader(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.ReadFromNetworkBinaryReader">
            <summary>Sets the shim of Frame.ReadFrom(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.ToString">
            <summary>Sets the shim of Frame.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.TypeGet">
            <summary>Sets the shim of Frame.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.TypeSetInt32">
            <summary>Sets the shim of Frame.set_Type(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimFrame.WriteToNetworkBinaryWriter">
            <summary>Sets the shim of Frame.WriteTo(NetworkBinaryWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimHardProtocolException">
            <summary>Shim type of RabbitMQ.Client.Impl.HardProtocolException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimHardProtocolException.#ctor(RabbitMQ.Client.Impl.HardProtocolException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimHardProtocolException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimHardProtocolException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimHardProtocolException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimHardProtocolException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimHardProtocolException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimHardProtocolException.ConstructorString">
            <summary>Sets the shim of HardProtocolException.HardProtocolException(String message)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMainSession">
            <summary>Shim type of RabbitMQ.Client.Impl.MainSession</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMainSession.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMainSession.#ctor(RabbitMQ.Client.Impl.MainSession)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMainSession.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.AllInstances.HandleFrameFrame">
            <summary>Sets the shim of MainSession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.AllInstances.HandlerGet">
            <summary>Sets the shim of MainSession.get_Handler()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.AllInstances.HandlerSetAction">
            <summary>Sets the shim of MainSession.set_Handler(Action value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.AllInstances.SetSessionClosingBoolean">
            <summary>Sets the shim of MainSession.SetSessionClosing(Boolean closeServerInitiated)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.AllInstances.TransmitCommand">
            <summary>Sets the shim of MainSession.Transmit(Command cmd)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMainSession.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMainSession.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMainSession.Bind(RabbitMQ.Client.Impl.ISession)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.ConstructorConnection">
            <summary>Sets the shim of MainSession.MainSession(Connection connection)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.HandleFrameFrame">
            <summary>Sets the shim of MainSession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.HandlerGet">
            <summary>Sets the shim of MainSession.get_Handler()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.HandlerSetAction">
            <summary>Sets the shim of MainSession.set_Handler(Action value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.SetSessionClosingBoolean">
            <summary>Sets the shim of MainSession.SetSessionClosing(Boolean closeServerInitiated)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMainSession.TransmitCommand">
            <summary>Sets the shim of MainSession.Transmit(Command cmd)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException">
            <summary>Shim type of RabbitMQ.Client.Impl.MalformedFrameException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.#ctor(RabbitMQ.Client.Impl.MalformedFrameException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.AllInstances.ReplyCodeGet">
            <summary>Sets the shim of MalformedFrameException.get_ReplyCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.ConstructorString">
            <summary>Sets the shim of MalformedFrameException.MalformedFrameException(String message)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMalformedFrameException.ReplyCodeGet">
            <summary>Sets the shim of MalformedFrameException.get_ReplyCode()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader">
            <summary>Shim type of RabbitMQ.Client.Impl.MethodArgumentReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.#ctor(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.BaseReaderGet">
            <summary>Sets the shim of MethodArgumentReader.get_BaseReader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.BaseReaderSetNetworkBinaryReader">
            <summary>Sets the shim of MethodArgumentReader.set_BaseReader(NetworkBinaryReader value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ClearBits">
            <summary>Sets the shim of MethodArgumentReader.ClearBits()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadBit">
            <summary>Sets the shim of MethodArgumentReader.ReadBit()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadContent">
            <summary>Sets the shim of MethodArgumentReader.ReadContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadLong">
            <summary>Sets the shim of MethodArgumentReader.ReadLong()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadLonglong">
            <summary>Sets the shim of MethodArgumentReader.ReadLonglong()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadLongstr">
            <summary>Sets the shim of MethodArgumentReader.ReadLongstr()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadOctet">
            <summary>Sets the shim of MethodArgumentReader.ReadOctet()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadShort">
            <summary>Sets the shim of MethodArgumentReader.ReadShort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadShortstr">
            <summary>Sets the shim of MethodArgumentReader.ReadShortstr()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadTable">
            <summary>Sets the shim of MethodArgumentReader.ReadTable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.AllInstances.ReadTimestamp">
            <summary>Sets the shim of MethodArgumentReader.ReadTimestamp()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.BaseReaderGet">
            <summary>Sets the shim of MethodArgumentReader.get_BaseReader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.BaseReaderSetNetworkBinaryReader">
            <summary>Sets the shim of MethodArgumentReader.set_BaseReader(NetworkBinaryReader value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ClearBits">
            <summary>Sets the shim of MethodArgumentReader.ClearBits()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ConstructorNetworkBinaryReader">
            <summary>Sets the shim of MethodArgumentReader.MethodArgumentReader(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadBit">
            <summary>Sets the shim of MethodArgumentReader.ReadBit()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadContent">
            <summary>Sets the shim of MethodArgumentReader.ReadContent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadLong">
            <summary>Sets the shim of MethodArgumentReader.ReadLong()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadLonglong">
            <summary>Sets the shim of MethodArgumentReader.ReadLonglong()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadLongstr">
            <summary>Sets the shim of MethodArgumentReader.ReadLongstr()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadOctet">
            <summary>Sets the shim of MethodArgumentReader.ReadOctet()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadShort">
            <summary>Sets the shim of MethodArgumentReader.ReadShort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadShortstr">
            <summary>Sets the shim of MethodArgumentReader.ReadShortstr()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadTable">
            <summary>Sets the shim of MethodArgumentReader.ReadTable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentReader.ReadTimestamp">
            <summary>Sets the shim of MethodArgumentReader.ReadTimestamp()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter">
            <summary>Shim type of RabbitMQ.Client.Impl.MethodArgumentWriter</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.#ctor(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.BaseWriterGet">
            <summary>Sets the shim of MethodArgumentWriter.get_BaseWriter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.BaseWriterSetNetworkBinaryWriter">
            <summary>Sets the shim of MethodArgumentWriter.set_BaseWriter(NetworkBinaryWriter value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.BitFlush">
            <summary>Sets the shim of MethodArgumentWriter.BitFlush()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.Flush">
            <summary>Sets the shim of MethodArgumentWriter.Flush()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.ResetBitAccumulator">
            <summary>Sets the shim of MethodArgumentWriter.ResetBitAccumulator()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteBitBoolean">
            <summary>Sets the shim of MethodArgumentWriter.WriteBit(Boolean val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteContentByteArray">
            <summary>Sets the shim of MethodArgumentWriter.WriteContent(Byte[] val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteLongUInt32">
            <summary>Sets the shim of MethodArgumentWriter.WriteLong(UInt32 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteLonglongUInt64">
            <summary>Sets the shim of MethodArgumentWriter.WriteLonglong(UInt64 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteLongstrByteArray">
            <summary>Sets the shim of MethodArgumentWriter.WriteLongstr(Byte[] val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteOctetByte">
            <summary>Sets the shim of MethodArgumentWriter.WriteOctet(Byte val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteShortUInt16">
            <summary>Sets the shim of MethodArgumentWriter.WriteShort(UInt16 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteShortstrString">
            <summary>Sets the shim of MethodArgumentWriter.WriteShortstr(String val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteTableIDictionary">
            <summary>Sets the shim of MethodArgumentWriter.WriteTable(IDictionary val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteTableIDictionaryOfStringObject">
            <summary>Sets the shim of MethodArgumentWriter.WriteTable(IDictionary`2&lt;String,Object&gt; val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.AllInstances.WriteTimestampAmqpTimestamp">
            <summary>Sets the shim of MethodArgumentWriter.WriteTimestamp(AmqpTimestamp val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.BaseWriterGet">
            <summary>Sets the shim of MethodArgumentWriter.get_BaseWriter()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.BaseWriterSetNetworkBinaryWriter">
            <summary>Sets the shim of MethodArgumentWriter.set_BaseWriter(NetworkBinaryWriter value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.BitFlush">
            <summary>Sets the shim of MethodArgumentWriter.BitFlush()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.ConstructorNetworkBinaryWriter">
            <summary>Sets the shim of MethodArgumentWriter.MethodArgumentWriter(NetworkBinaryWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.Flush">
            <summary>Sets the shim of MethodArgumentWriter.Flush()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.ResetBitAccumulator">
            <summary>Sets the shim of MethodArgumentWriter.ResetBitAccumulator()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteBitBoolean">
            <summary>Sets the shim of MethodArgumentWriter.WriteBit(Boolean val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteContentByteArray">
            <summary>Sets the shim of MethodArgumentWriter.WriteContent(Byte[] val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteLongUInt32">
            <summary>Sets the shim of MethodArgumentWriter.WriteLong(UInt32 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteLonglongUInt64">
            <summary>Sets the shim of MethodArgumentWriter.WriteLonglong(UInt64 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteLongstrByteArray">
            <summary>Sets the shim of MethodArgumentWriter.WriteLongstr(Byte[] val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteOctetByte">
            <summary>Sets the shim of MethodArgumentWriter.WriteOctet(Byte val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteShortUInt16">
            <summary>Sets the shim of MethodArgumentWriter.WriteShort(UInt16 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteShortstrString">
            <summary>Sets the shim of MethodArgumentWriter.WriteShortstr(String val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteTableIDictionary">
            <summary>Sets the shim of MethodArgumentWriter.WriteTable(IDictionary val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteTableIDictionaryOfStringObject">
            <summary>Sets the shim of MethodArgumentWriter.WriteTable(IDictionary`2&lt;String,Object&gt; val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodArgumentWriter.WriteTimestampAmqpTimestamp">
            <summary>Sets the shim of MethodArgumentWriter.WriteTimestamp(AmqpTimestamp val)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMethodBase">
            <summary>Shim type of RabbitMQ.Client.Impl.MethodBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodBase.#ctor(RabbitMQ.Client.Impl.MethodBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimMethodBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimMethodBase.Bind(RabbitMQ.Client.IMethod)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimMethodBase.Constructor">
            <summary>Sets the shim of MethodBase.MethodBase()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase">
            <summary>Shim type of RabbitMQ.Client.Impl.ModelBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.#ctor(RabbitMQ.Client.Impl.ModelBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.Abort">
            <summary>Sets the shim of ModelBase.Abort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AbortUInt16String">
            <summary>Sets the shim of ModelBase.Abort(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.Abort">
            <summary>Sets the shim of ModelBase.Abort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.AbortUInt16String">
            <summary>Sets the shim of ModelBase.Abort(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicAcksAddEventHandlerOfBasicAckEventArgs">
            <summary>Sets the shim of ModelBase.add_BasicAcks(EventHandler`1&lt;BasicAckEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicAcksRemoveEventHandlerOfBasicAckEventArgs">
            <summary>Sets the shim of ModelBase.remove_BasicAcks(EventHandler`1&lt;BasicAckEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicCancelString">
            <summary>Sets the shim of ModelBase.BasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicConsumeStringBooleanStringBooleanBooleanIDictionaryOfStringObjectIBasicConsumer">
            <summary>Sets the shim of ModelBase.BasicConsume(String queue, Boolean autoAck, String consumerTag, Boolean noLocal, Boolean exclusive, IDictionary`2&lt;String,Object&gt; arguments, IBasicConsumer consumer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicGetStringBoolean">
            <summary>Sets the shim of ModelBase.BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicNacksAddEventHandlerOfBasicNackEventArgs">
            <summary>Sets the shim of ModelBase.add_BasicNacks(EventHandler`1&lt;BasicNackEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicNacksRemoveEventHandlerOfBasicNackEventArgs">
            <summary>Sets the shim of ModelBase.remove_BasicNacks(EventHandler`1&lt;BasicNackEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of ModelBase.BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicRecoverBoolean">
            <summary>Sets the shim of ModelBase.BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicRecoverOkAddEventHandlerOfEventArgs">
            <summary>Sets the shim of ModelBase.add_BasicRecoverOk(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicRecoverOkRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of ModelBase.remove_BasicRecoverOk(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicReturnAddEventHandlerOfBasicReturnEventArgs">
            <summary>Sets the shim of ModelBase.add_BasicReturn(EventHandler`1&lt;BasicReturnEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BasicReturnRemoveEventHandlerOfBasicReturnEventArgs">
            <summary>Sets the shim of ModelBase.remove_BasicReturn(EventHandler`1&lt;BasicReturnEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.BroadcastShutdownToConsumersIDictionaryOfStringIBasicConsumerShutdownEventArgs">
            <summary>Sets the shim of ModelBase.BroadcastShutdownToConsumers(IDictionary`2&lt;String,IBasicConsumer&gt; cs, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.CallbackExceptionAddEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of ModelBase.add_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.CallbackExceptionRemoveEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of ModelBase.remove_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ChannelNumberGet">
            <summary>Sets the shim of ModelBase.get_ChannelNumber()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.Close">
            <summary>Sets the shim of ModelBase.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.CloseReasonGet">
            <summary>Sets the shim of ModelBase.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.CloseReasonSetShutdownEventArgs">
            <summary>Sets the shim of ModelBase.set_CloseReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.CloseShutdownEventArgsBoolean">
            <summary>Sets the shim of ModelBase.Close(ShutdownEventArgs reason, Boolean abort)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.CloseUInt16String">
            <summary>Sets the shim of ModelBase.Close(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.CloseUInt16StringBoolean">
            <summary>Sets the shim of ModelBase.Close(UInt16 replyCode, String replyText, Boolean abort)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ConfirmSelect">
            <summary>Sets the shim of ModelBase.ConfirmSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ConnectionOpenStringStringBoolean">
            <summary>Sets the shim of ModelBase.ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ConnectionSecureOkByteArray">
            <summary>Sets the shim of ModelBase.ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the shim of ModelBase.ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ConsumerCountString">
            <summary>Sets the shim of ModelBase.ConsumerCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ConsumerDispatcherGet">
            <summary>Sets the shim of ModelBase.get_ConsumerDispatcher()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ConsumerDispatcherSetIConsumerDispatcher">
            <summary>Sets the shim of ModelBase.set_ConsumerDispatcher(IConsumerDispatcher value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ContinuationTimeoutGet">
            <summary>Sets the shim of ModelBase.get_ContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of ModelBase.set_ContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.DefaultConsumerGet">
            <summary>Sets the shim of ModelBase.get_DefaultConsumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.DefaultConsumerSetIBasicConsumer">
            <summary>Sets the shim of ModelBase.set_DefaultConsumer(IBasicConsumer value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.EnqueueIRpcContinuation">
            <summary>Sets the shim of ModelBase.Enqueue(IRpcContinuation k)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ExchangeBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeBindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ExchangeBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeBind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ExchangeDeclareNoWaitStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeDeclareNoWait(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ExchangeDeclarePassiveString">
            <summary>Sets the shim of ModelBase.ExchangeDeclarePassive(String exchange)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ExchangeDeclareStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeDeclare(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ExchangeDeleteNoWaitStringBoolean">
            <summary>Sets the shim of ModelBase.ExchangeDeleteNoWait(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ExchangeDeleteStringBoolean">
            <summary>Sets the shim of ModelBase.ExchangeDelete(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ExchangeUnbindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeUnbindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ExchangeUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeUnbind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.FinishClose">
            <summary>Sets the shim of ModelBase.FinishClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.FlowControlAddEventHandlerOfFlowControlEventArgs">
            <summary>Sets the shim of ModelBase.add_FlowControl(EventHandler`1&lt;FlowControlEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.FlowControlRemoveEventHandlerOfFlowControlEventArgs">
            <summary>Sets the shim of ModelBase.remove_FlowControl(EventHandler`1&lt;FlowControlEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicAckUInt64Boolean">
            <summary>Sets the shim of ModelBase.HandleBasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicCancelOkString">
            <summary>Sets the shim of ModelBase.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicCancelStringBoolean">
            <summary>Sets the shim of ModelBase.HandleBasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicConsumeOkString">
            <summary>Sets the shim of ModelBase.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of ModelBase.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicGetEmpty">
            <summary>Sets the shim of ModelBase.HandleBasicGetEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the shim of ModelBase.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of ModelBase.HandleBasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicRecoverOk">
            <summary>Sets the shim of ModelBase.HandleBasicRecoverOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleBasicReturnUInt16StringStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of ModelBase.HandleBasicReturn(UInt16 replyCode, String replyText, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleChannelCloseOk">
            <summary>Sets the shim of ModelBase.HandleChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of ModelBase.HandleChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleChannelFlowBoolean">
            <summary>Sets the shim of ModelBase.HandleChannelFlow(Boolean active)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleCommandISessionCommand">
            <summary>Sets the shim of ModelBase.HandleCommand(ISession session, Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleConnectionBlockedString">
            <summary>Sets the shim of ModelBase.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of ModelBase.HandleConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleConnectionOpenOkString">
            <summary>Sets the shim of ModelBase.HandleConnectionOpenOk(String knownHosts)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleConnectionSecureByteArray">
            <summary>Sets the shim of ModelBase.HandleConnectionSecure(Byte[] challenge)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleConnectionStartByteByteIDictionaryOfStringObjectByteArrayByteArray">
            <summary>Sets the shim of ModelBase.HandleConnectionStart(Byte versionMajor, Byte versionMinor, IDictionary`2&lt;String,Object&gt; serverProperties, Byte[] mechanisms, Byte[] locales)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleConnectionTuneUInt16UInt32UInt16">
            <summary>Sets the shim of ModelBase.HandleConnectionTune(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleConnectionUnblocked">
            <summary>Sets the shim of ModelBase.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandleQueueDeclareOkStringUInt32UInt32">
            <summary>Sets the shim of ModelBase.HandleQueueDeclareOk(String queue, UInt32 messageCount, UInt32 consumerCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandshakeContinuationTimeoutGet">
            <summary>Sets the shim of ModelBase.get_HandshakeContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.HandshakeContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of ModelBase.set_HandshakeContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.InitialiseISession">
            <summary>Sets the shim of ModelBase.Initialise(ISession session)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.IsClosedGet">
            <summary>Sets the shim of ModelBase.get_IsClosed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.IsOpenGet">
            <summary>Sets the shim of ModelBase.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.MessageCountString">
            <summary>Sets the shim of ModelBase.MessageCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ModelRpcMethodBaseContentHeaderBaseByteArray">
            <summary>Sets the shim of ModelBase.ModelRpc(MethodBase method, ContentHeaderBase header, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ModelSendMethodBaseContentHeaderBaseByteArray">
            <summary>Sets the shim of ModelBase.ModelSend(MethodBase method, ContentHeaderBase header, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ModelShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of ModelBase.add_ModelShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ModelShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of ModelBase.remove_ModelShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.NextPublishSeqNoGet">
            <summary>Sets the shim of ModelBase.get_NextPublishSeqNo()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.NextPublishSeqNoSetUInt64">
            <summary>Sets the shim of ModelBase.set_NextPublishSeqNo(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.OnBasicAckBasicAckEventArgs">
            <summary>Sets the shim of ModelBase.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.OnBasicNackBasicNackEventArgs">
            <summary>Sets the shim of ModelBase.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.OnBasicRecoverOkEventArgs">
            <summary>Sets the shim of ModelBase.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.OnBasicReturnBasicReturnEventArgs">
            <summary>Sets the shim of ModelBase.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the shim of ModelBase.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.OnFlowControlFlowControlEventArgs">
            <summary>Sets the shim of ModelBase.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.OnModelShutdownShutdownEventArgs">
            <summary>Sets the shim of ModelBase.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.OnSessionShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of ModelBase.OnSessionShutdown(Object sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.QueueBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueBindNoWait(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.QueueBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueBind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.QueueDeclareNoWaitStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueDeclareNoWait(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.QueueDeclarePassiveString">
            <summary>Sets the shim of ModelBase.QueueDeclarePassive(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.QueueDeclareStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.QueueDeclareStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueDeclare(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.QueueDeleteNoWaitStringBooleanBoolean">
            <summary>Sets the shim of ModelBase.QueueDeleteNoWait(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.QueueDeleteStringBooleanBoolean">
            <summary>Sets the shim of ModelBase.QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.QueuePurgeString">
            <summary>Sets the shim of ModelBase.QueuePurge(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.RecoveryAddEventHandlerOfEventArgs">
            <summary>Sets the shim of ModelBase.add_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.RecoveryRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of ModelBase.remove_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.SessionGet">
            <summary>Sets the shim of ModelBase.get_Session()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.SessionSetISession">
            <summary>Sets the shim of ModelBase.set_Session(ISession value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.SetCloseReasonShutdownEventArgs">
            <summary>Sets the shim of ModelBase.SetCloseReason(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.SystemIDisposableDispose">
            <summary>Sets the shim of ModelBase.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.ToString01">
            <summary>Sets the shim of ModelBase.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.TransmitAndEnqueueCommandIRpcContinuation">
            <summary>Sets the shim of ModelBase.TransmitAndEnqueue(Command cmd, IRpcContinuation k)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.WaitForConfirms">
            <summary>Sets the shim of ModelBase.WaitForConfirms()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.WaitForConfirmsOrDie">
            <summary>Sets the shim of ModelBase.WaitForConfirmsOrDie()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.WaitForConfirmsOrDieTimeSpan">
            <summary>Sets the shim of ModelBase.WaitForConfirmsOrDie(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.WaitForConfirmsTimeSpan">
            <summary>Sets the shim of ModelBase.WaitForConfirms(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.WaitForConfirmsTimeSpanBooleanOut">
            <summary>Sets the shim of ModelBase.WaitForConfirms(TimeSpan timeout, Boolean&amp; timedOut)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.AllInstances.handleAckNackUInt64BooleanBoolean">
            <summary>Sets the shim of ModelBase.handleAckNack(UInt64 deliveryTag, Boolean multiple, Boolean isNack)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicAcksAddEventHandlerOfBasicAckEventArgs">
            <summary>Sets the shim of ModelBase.add_BasicAcks(EventHandler`1&lt;BasicAckEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicAcksRemoveEventHandlerOfBasicAckEventArgs">
            <summary>Sets the shim of ModelBase.remove_BasicAcks(EventHandler`1&lt;BasicAckEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicCancelString">
            <summary>Sets the shim of ModelBase.BasicCancel(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicConsumeStringBooleanStringBooleanBooleanIDictionaryOfStringObjectIBasicConsumer">
            <summary>Sets the shim of ModelBase.BasicConsume(String queue, Boolean autoAck, String consumerTag, Boolean noLocal, Boolean exclusive, IDictionary`2&lt;String,Object&gt; arguments, IBasicConsumer consumer)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicGetStringBoolean">
            <summary>Sets the shim of ModelBase.BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicNacksAddEventHandlerOfBasicNackEventArgs">
            <summary>Sets the shim of ModelBase.add_BasicNacks(EventHandler`1&lt;BasicNackEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicNacksRemoveEventHandlerOfBasicNackEventArgs">
            <summary>Sets the shim of ModelBase.remove_BasicNacks(EventHandler`1&lt;BasicNackEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of ModelBase.BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicRecoverBoolean">
            <summary>Sets the shim of ModelBase.BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicRecoverOkAddEventHandlerOfEventArgs">
            <summary>Sets the shim of ModelBase.add_BasicRecoverOk(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicRecoverOkRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of ModelBase.remove_BasicRecoverOk(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicReturnAddEventHandlerOfBasicReturnEventArgs">
            <summary>Sets the shim of ModelBase.add_BasicReturn(EventHandler`1&lt;BasicReturnEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BasicReturnRemoveEventHandlerOfBasicReturnEventArgs">
            <summary>Sets the shim of ModelBase.remove_BasicReturn(EventHandler`1&lt;BasicReturnEventArgs&gt; value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.Bind(RabbitMQ.Client.IModel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.Bind(RabbitMQ.Client.IRecoverable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.Bind(RabbitMQ.Client.Impl.IFullModel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.BroadcastShutdownToConsumersIDictionaryOfStringIBasicConsumerShutdownEventArgs">
            <summary>Sets the shim of ModelBase.BroadcastShutdownToConsumers(IDictionary`2&lt;String,IBasicConsumer&gt; cs, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.CallbackExceptionAddEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of ModelBase.add_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.CallbackExceptionRemoveEventHandlerOfCallbackExceptionEventArgs">
            <summary>Sets the shim of ModelBase.remove_CallbackException(EventHandler`1&lt;CallbackExceptionEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ChannelNumberGet">
            <summary>Sets the shim of ModelBase.get_ChannelNumber()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.Close">
            <summary>Sets the shim of ModelBase.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.CloseReasonGet">
            <summary>Sets the shim of ModelBase.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.CloseReasonSetShutdownEventArgs">
            <summary>Sets the shim of ModelBase.set_CloseReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.CloseShutdownEventArgsBoolean">
            <summary>Sets the shim of ModelBase.Close(ShutdownEventArgs reason, Boolean abort)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.CloseUInt16String">
            <summary>Sets the shim of ModelBase.Close(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.CloseUInt16StringBoolean">
            <summary>Sets the shim of ModelBase.Close(UInt16 replyCode, String replyText, Boolean abort)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ConfirmSelect">
            <summary>Sets the shim of ModelBase.ConfirmSelect()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ConnectionOpenStringStringBoolean">
            <summary>Sets the shim of ModelBase.ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ConnectionSecureOkByteArray">
            <summary>Sets the shim of ModelBase.ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the shim of ModelBase.ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ConstructorISession">
            <summary>Sets the shim of ModelBase.ModelBase(ISession session)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ConstructorISessionConsumerWorkService">
            <summary>Sets the shim of ModelBase.ModelBase(ISession session, ConsumerWorkService workService)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ConsumerCountString">
            <summary>Sets the shim of ModelBase.ConsumerCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ConsumerDispatcherGet">
            <summary>Sets the shim of ModelBase.get_ConsumerDispatcher()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ConsumerDispatcherSetIConsumerDispatcher">
            <summary>Sets the shim of ModelBase.set_ConsumerDispatcher(IConsumerDispatcher value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ContinuationTimeoutGet">
            <summary>Sets the shim of ModelBase.get_ContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of ModelBase.set_ContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.DefaultConsumerGet">
            <summary>Sets the shim of ModelBase.get_DefaultConsumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.DefaultConsumerSetIBasicConsumer">
            <summary>Sets the shim of ModelBase.set_DefaultConsumer(IBasicConsumer value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.EnqueueIRpcContinuation">
            <summary>Sets the shim of ModelBase.Enqueue(IRpcContinuation k)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ExchangeBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeBindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ExchangeBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeBind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ExchangeDeclareNoWaitStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeDeclareNoWait(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ExchangeDeclarePassiveString">
            <summary>Sets the shim of ModelBase.ExchangeDeclarePassive(String exchange)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ExchangeDeclareStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeDeclare(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ExchangeDeleteNoWaitStringBoolean">
            <summary>Sets the shim of ModelBase.ExchangeDeleteNoWait(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ExchangeDeleteStringBoolean">
            <summary>Sets the shim of ModelBase.ExchangeDelete(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ExchangeUnbindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeUnbindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ExchangeUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.ExchangeUnbind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.FinishClose">
            <summary>Sets the shim of ModelBase.FinishClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.FlowControlAddEventHandlerOfFlowControlEventArgs">
            <summary>Sets the shim of ModelBase.add_FlowControl(EventHandler`1&lt;FlowControlEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.FlowControlRemoveEventHandlerOfFlowControlEventArgs">
            <summary>Sets the shim of ModelBase.remove_FlowControl(EventHandler`1&lt;FlowControlEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicAckUInt64Boolean">
            <summary>Sets the shim of ModelBase.HandleBasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicCancelOkString">
            <summary>Sets the shim of ModelBase.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicCancelStringBoolean">
            <summary>Sets the shim of ModelBase.HandleBasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicConsumeOkString">
            <summary>Sets the shim of ModelBase.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of ModelBase.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicGetEmpty">
            <summary>Sets the shim of ModelBase.HandleBasicGetEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the shim of ModelBase.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of ModelBase.HandleBasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicRecoverOk">
            <summary>Sets the shim of ModelBase.HandleBasicRecoverOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleBasicReturnUInt16StringStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of ModelBase.HandleBasicReturn(UInt16 replyCode, String replyText, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleChannelCloseOk">
            <summary>Sets the shim of ModelBase.HandleChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of ModelBase.HandleChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleChannelFlowBoolean">
            <summary>Sets the shim of ModelBase.HandleChannelFlow(Boolean active)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleCommandISessionCommand">
            <summary>Sets the shim of ModelBase.HandleCommand(ISession session, Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleConnectionBlockedString">
            <summary>Sets the shim of ModelBase.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the shim of ModelBase.HandleConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleConnectionOpenOkString">
            <summary>Sets the shim of ModelBase.HandleConnectionOpenOk(String knownHosts)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleConnectionSecureByteArray">
            <summary>Sets the shim of ModelBase.HandleConnectionSecure(Byte[] challenge)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleConnectionStartByteByteIDictionaryOfStringObjectByteArrayByteArray">
            <summary>Sets the shim of ModelBase.HandleConnectionStart(Byte versionMajor, Byte versionMinor, IDictionary`2&lt;String,Object&gt; serverProperties, Byte[] mechanisms, Byte[] locales)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleConnectionTuneUInt16UInt32UInt16">
            <summary>Sets the shim of ModelBase.HandleConnectionTune(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleConnectionUnblocked">
            <summary>Sets the shim of ModelBase.HandleConnectionUnblocked()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandleQueueDeclareOkStringUInt32UInt32">
            <summary>Sets the shim of ModelBase.HandleQueueDeclareOk(String queue, UInt32 messageCount, UInt32 consumerCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandshakeContinuationTimeoutGet">
            <summary>Sets the shim of ModelBase.get_HandshakeContinuationTimeout()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.HandshakeContinuationTimeoutSetTimeSpan">
            <summary>Sets the shim of ModelBase.set_HandshakeContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.InitialiseISession">
            <summary>Sets the shim of ModelBase.Initialise(ISession session)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.IsClosedGet">
            <summary>Sets the shim of ModelBase.get_IsClosed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.IsOpenGet">
            <summary>Sets the shim of ModelBase.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.MessageCountString">
            <summary>Sets the shim of ModelBase.MessageCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ModelRpcMethodBaseContentHeaderBaseByteArray">
            <summary>Sets the shim of ModelBase.ModelRpc(MethodBase method, ContentHeaderBase header, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ModelSendMethodBaseContentHeaderBaseByteArray">
            <summary>Sets the shim of ModelBase.ModelSend(MethodBase method, ContentHeaderBase header, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ModelShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of ModelBase.add_ModelShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ModelShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of ModelBase.remove_ModelShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.NextPublishSeqNoGet">
            <summary>Sets the shim of ModelBase.get_NextPublishSeqNo()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.NextPublishSeqNoSetUInt64">
            <summary>Sets the shim of ModelBase.set_NextPublishSeqNo(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.OnBasicAckBasicAckEventArgs">
            <summary>Sets the shim of ModelBase.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.OnBasicNackBasicNackEventArgs">
            <summary>Sets the shim of ModelBase.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.OnBasicRecoverOkEventArgs">
            <summary>Sets the shim of ModelBase.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.OnBasicReturnBasicReturnEventArgs">
            <summary>Sets the shim of ModelBase.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the shim of ModelBase.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.OnFlowControlFlowControlEventArgs">
            <summary>Sets the shim of ModelBase.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.OnModelShutdownShutdownEventArgs">
            <summary>Sets the shim of ModelBase.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.OnSessionShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of ModelBase.OnSessionShutdown(Object sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.QueueBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueBindNoWait(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.QueueBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueBind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.QueueDeclareNoWaitStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueDeclareNoWait(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.QueueDeclarePassiveString">
            <summary>Sets the shim of ModelBase.QueueDeclarePassive(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.QueueDeclareStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.QueueDeclareStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the shim of ModelBase.QueueDeclare(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.QueueDeleteNoWaitStringBooleanBoolean">
            <summary>Sets the shim of ModelBase.QueueDeleteNoWait(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.QueueDeleteStringBooleanBoolean">
            <summary>Sets the shim of ModelBase.QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.QueuePurgeString">
            <summary>Sets the shim of ModelBase.QueuePurge(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.RecoveryAddEventHandlerOfEventArgs">
            <summary>Sets the shim of ModelBase.add_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.RecoveryRemoveEventHandlerOfEventArgs">
            <summary>Sets the shim of ModelBase.remove_Recovery(EventHandler`1&lt;EventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.SessionGet">
            <summary>Sets the shim of ModelBase.get_Session()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.SessionSetISession">
            <summary>Sets the shim of ModelBase.set_Session(ISession value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.SetCloseReasonShutdownEventArgs">
            <summary>Sets the shim of ModelBase.SetCloseReason(ShutdownEventArgs reason)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicConsumerRpcContinuation">
            <summary>Shim type of RabbitMQ.Client.Impl.ModelBase+BasicConsumerRpcContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicConsumerRpcContinuation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicConsumerRpcContinuation.#ctor(RabbitMQ.Client.Impl.ModelBase.BasicConsumerRpcContinuation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicConsumerRpcContinuation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicConsumerRpcContinuation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicConsumerRpcContinuation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicConsumerRpcContinuation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicConsumerRpcContinuation.Bind(RabbitMQ.Client.Impl.IRpcContinuation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicConsumerRpcContinuation.Constructor">
            <summary>Sets the shim of BasicConsumerRpcContinuation.BasicConsumerRpcContinuation()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicGetRpcContinuation">
            <summary>Shim type of RabbitMQ.Client.Impl.ModelBase+BasicGetRpcContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicGetRpcContinuation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicGetRpcContinuation.#ctor(RabbitMQ.Client.Impl.ModelBase.BasicGetRpcContinuation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicGetRpcContinuation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicGetRpcContinuation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicGetRpcContinuation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicGetRpcContinuation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicGetRpcContinuation.Bind(RabbitMQ.Client.Impl.IRpcContinuation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimBasicGetRpcContinuation.Constructor">
            <summary>Sets the shim of BasicGetRpcContinuation.BasicGetRpcContinuation()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionOpenContinuation">
            <summary>Shim type of RabbitMQ.Client.Impl.ModelBase+ConnectionOpenContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionOpenContinuation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionOpenContinuation.#ctor(RabbitMQ.Client.Impl.ModelBase.ConnectionOpenContinuation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionOpenContinuation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionOpenContinuation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionOpenContinuation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionOpenContinuation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionOpenContinuation.Bind(RabbitMQ.Client.Impl.IRpcContinuation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionOpenContinuation.Constructor">
            <summary>Sets the shim of ConnectionOpenContinuation.ConnectionOpenContinuation()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionStartRpcContinuation">
            <summary>Shim type of RabbitMQ.Client.Impl.ModelBase+ConnectionStartRpcContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionStartRpcContinuation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionStartRpcContinuation.#ctor(RabbitMQ.Client.Impl.ModelBase.ConnectionStartRpcContinuation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionStartRpcContinuation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionStartRpcContinuation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionStartRpcContinuation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionStartRpcContinuation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionStartRpcContinuation.Bind(RabbitMQ.Client.Impl.IRpcContinuation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimConnectionStartRpcContinuation.Constructor">
            <summary>Sets the shim of ConnectionStartRpcContinuation.ConnectionStartRpcContinuation()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimQueueDeclareRpcContinuation">
            <summary>Shim type of RabbitMQ.Client.Impl.ModelBase+QueueDeclareRpcContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimQueueDeclareRpcContinuation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimQueueDeclareRpcContinuation.#ctor(RabbitMQ.Client.Impl.ModelBase.QueueDeclareRpcContinuation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimQueueDeclareRpcContinuation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimQueueDeclareRpcContinuation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimQueueDeclareRpcContinuation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimQueueDeclareRpcContinuation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimQueueDeclareRpcContinuation.Bind(RabbitMQ.Client.Impl.IRpcContinuation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ShimQueueDeclareRpcContinuation.Constructor">
            <summary>Sets the shim of QueueDeclareRpcContinuation.QueueDeclareRpcContinuation()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.SystemIDisposableDispose">
            <summary>Sets the shim of ModelBase.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.ToString">
            <summary>Sets the shim of ModelBase.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.TransmitAndEnqueueCommandIRpcContinuation">
            <summary>Sets the shim of ModelBase.TransmitAndEnqueue(Command cmd, IRpcContinuation k)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.WaitForConfirms">
            <summary>Sets the shim of ModelBase.WaitForConfirms()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.WaitForConfirmsOrDie">
            <summary>Sets the shim of ModelBase.WaitForConfirmsOrDie()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.WaitForConfirmsOrDieTimeSpan">
            <summary>Sets the shim of ModelBase.WaitForConfirmsOrDie(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.WaitForConfirmsTimeSpan">
            <summary>Sets the shim of ModelBase.WaitForConfirms(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.WaitForConfirmsTimeSpanBooleanOut">
            <summary>Sets the shim of ModelBase.WaitForConfirms(TimeSpan timeout, Boolean&amp; timedOut)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimModelBase.handleAckNackUInt64BooleanBoolean">
            <summary>Sets the shim of ModelBase.handleAckNack(UInt64 deliveryTag, Boolean multiple, Boolean isNack)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimProtocolException">
            <summary>Shim type of RabbitMQ.Client.Impl.ProtocolException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimProtocolException.#ctor(RabbitMQ.Client.Impl.ProtocolException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimProtocolException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimProtocolException.AllInstances.ShutdownReasonGet">
            <summary>Sets the shim of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimProtocolException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimProtocolException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimProtocolException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimProtocolException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimProtocolException.ConstructorString">
            <summary>Sets the shim of ProtocolException.ProtocolException(String message)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimProtocolException.ShutdownReasonGet">
            <summary>Sets the shim of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession">
            <summary>Shim type of RabbitMQ.Client.Impl.QuiescingSession</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.#ctor(RabbitMQ.Client.Impl.QuiescingSession)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.AllInstances.CreateChannelCloseOk">
            <summary>Sets the shim of QuiescingSession.CreateChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.AllInstances.HandleFrameFrame">
            <summary>Sets the shim of QuiescingSession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.Bind(RabbitMQ.Client.Impl.ISession)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.ConstructorConnectionInt32ShutdownEventArgs">
            <summary>Sets the shim of QuiescingSession.QuiescingSession(Connection connection, Int32 channelNumber, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.CreateChannelCloseOk">
            <summary>Sets the shim of QuiescingSession.CreateChannelCloseOk()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimQuiescingSession.HandleFrameFrame">
            <summary>Sets the shim of QuiescingSession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding">
            <summary>Shim type of RabbitMQ.Client.Impl.RecordedBinding</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.#ctor(RabbitMQ.Client.Impl.RecordedBinding)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.ArgumentsGet">
            <summary>Sets the shim of RecordedBinding.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.ArgumentsSetIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedBinding.set_Arguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.DestinationGet">
            <summary>Sets the shim of RecordedBinding.get_Destination()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.DestinationSetString">
            <summary>Sets the shim of RecordedBinding.set_Destination(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.EqualsObject">
            <summary>Sets the shim of RecordedBinding.Equals(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.EqualsRecordedBinding">
            <summary>Sets the shim of RecordedBinding.Equals(RecordedBinding other)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.GetHashCode01">
            <summary>Sets the shim of RecordedBinding.GetHashCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.Recover">
            <summary>Sets the shim of RecordedBinding.Recover()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.RoutingKeyGet">
            <summary>Sets the shim of RecordedBinding.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.RoutingKeySetString">
            <summary>Sets the shim of RecordedBinding.set_RoutingKey(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.SourceGet">
            <summary>Sets the shim of RecordedBinding.get_Source()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.SourceSetString">
            <summary>Sets the shim of RecordedBinding.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.ToString01">
            <summary>Sets the shim of RecordedBinding.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.WithArgumentsIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedBinding.WithArguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.WithDestinationString">
            <summary>Sets the shim of RecordedBinding.WithDestination(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.WithRoutingKeyString">
            <summary>Sets the shim of RecordedBinding.WithRoutingKey(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.AllInstances.WithSourceString">
            <summary>Sets the shim of RecordedBinding.WithSource(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.ArgumentsGet">
            <summary>Sets the shim of RecordedBinding.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.ArgumentsSetIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedBinding.set_Arguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.ConstructorAutorecoveringModel">
            <summary>Sets the shim of RecordedBinding.RecordedBinding(AutorecoveringModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.DestinationGet">
            <summary>Sets the shim of RecordedBinding.get_Destination()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.DestinationSetString">
            <summary>Sets the shim of RecordedBinding.set_Destination(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.EqualsObject">
            <summary>Sets the shim of RecordedBinding.Equals(Object obj)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.EqualsRecordedBinding">
            <summary>Sets the shim of RecordedBinding.Equals(RecordedBinding other)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.GetHashCode">
            <summary>Sets the shim of RecordedBinding.GetHashCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.Recover">
            <summary>Sets the shim of RecordedBinding.Recover()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.RoutingKeyGet">
            <summary>Sets the shim of RecordedBinding.get_RoutingKey()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.RoutingKeySetString">
            <summary>Sets the shim of RecordedBinding.set_RoutingKey(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.SourceGet">
            <summary>Sets the shim of RecordedBinding.get_Source()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.SourceSetString">
            <summary>Sets the shim of RecordedBinding.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.ToString">
            <summary>Sets the shim of RecordedBinding.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.WithArgumentsIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedBinding.WithArguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.WithDestinationString">
            <summary>Sets the shim of RecordedBinding.WithDestination(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.WithRoutingKeyString">
            <summary>Sets the shim of RecordedBinding.WithRoutingKey(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedBinding.WithSourceString">
            <summary>Sets the shim of RecordedBinding.WithSource(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer">
            <summary>Shim type of RabbitMQ.Client.Impl.RecordedConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.#ctor(RabbitMQ.Client.Impl.RecordedConsumer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.ArgumentsGet">
            <summary>Sets the shim of RecordedConsumer.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.ArgumentsSetIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedConsumer.set_Arguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.AutoAckGet">
            <summary>Sets the shim of RecordedConsumer.get_AutoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.AutoAckSetBoolean">
            <summary>Sets the shim of RecordedConsumer.set_AutoAck(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.ConsumerGet">
            <summary>Sets the shim of RecordedConsumer.get_Consumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.ConsumerSetIBasicConsumer">
            <summary>Sets the shim of RecordedConsumer.set_Consumer(IBasicConsumer value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.ConsumerTagGet">
            <summary>Sets the shim of RecordedConsumer.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.ConsumerTagSetString">
            <summary>Sets the shim of RecordedConsumer.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.ExclusiveGet">
            <summary>Sets the shim of RecordedConsumer.get_Exclusive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.ExclusiveSetBoolean">
            <summary>Sets the shim of RecordedConsumer.set_Exclusive(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.QueueGet">
            <summary>Sets the shim of RecordedConsumer.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.QueueSetString">
            <summary>Sets the shim of RecordedConsumer.set_Queue(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.Recover">
            <summary>Sets the shim of RecordedConsumer.Recover()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.WithArgumentsIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedConsumer.WithArguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.WithAutoAckBoolean">
            <summary>Sets the shim of RecordedConsumer.WithAutoAck(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.WithConsumerIBasicConsumer">
            <summary>Sets the shim of RecordedConsumer.WithConsumer(IBasicConsumer value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.WithConsumerTagString">
            <summary>Sets the shim of RecordedConsumer.WithConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.WithExclusiveBoolean">
            <summary>Sets the shim of RecordedConsumer.WithExclusive(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AllInstances.WithQueueString">
            <summary>Sets the shim of RecordedConsumer.WithQueue(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.ArgumentsGet">
            <summary>Sets the shim of RecordedConsumer.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.ArgumentsSetIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedConsumer.set_Arguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AutoAckGet">
            <summary>Sets the shim of RecordedConsumer.get_AutoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.AutoAckSetBoolean">
            <summary>Sets the shim of RecordedConsumer.set_AutoAck(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.ConstructorAutorecoveringModelString">
            <summary>Sets the shim of RecordedConsumer.RecordedConsumer(AutorecoveringModel model, String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.ConsumerGet">
            <summary>Sets the shim of RecordedConsumer.get_Consumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.ConsumerSetIBasicConsumer">
            <summary>Sets the shim of RecordedConsumer.set_Consumer(IBasicConsumer value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.ConsumerTagGet">
            <summary>Sets the shim of RecordedConsumer.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.ConsumerTagSetString">
            <summary>Sets the shim of RecordedConsumer.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.ExclusiveGet">
            <summary>Sets the shim of RecordedConsumer.get_Exclusive()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.ExclusiveSetBoolean">
            <summary>Sets the shim of RecordedConsumer.set_Exclusive(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.QueueGet">
            <summary>Sets the shim of RecordedConsumer.get_Queue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.QueueSetString">
            <summary>Sets the shim of RecordedConsumer.set_Queue(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.Recover">
            <summary>Sets the shim of RecordedConsumer.Recover()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.WithArgumentsIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedConsumer.WithArguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.WithAutoAckBoolean">
            <summary>Sets the shim of RecordedConsumer.WithAutoAck(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.WithConsumerIBasicConsumer">
            <summary>Sets the shim of RecordedConsumer.WithConsumer(IBasicConsumer value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.WithConsumerTagString">
            <summary>Sets the shim of RecordedConsumer.WithConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.WithExclusiveBoolean">
            <summary>Sets the shim of RecordedConsumer.WithExclusive(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedConsumer.WithQueueString">
            <summary>Sets the shim of RecordedConsumer.WithQueue(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity">
            <summary>Shim type of RabbitMQ.Client.Impl.RecordedEntity</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.#ctor(RabbitMQ.Client.Impl.RecordedEntity)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.AllInstances.ModelDelegateGet">
            <summary>Sets the shim of RecordedEntity.get_ModelDelegate()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.AllInstances.ModelGet">
            <summary>Sets the shim of RecordedEntity.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.AllInstances.ModelSetAutorecoveringModel">
            <summary>Sets the shim of RecordedEntity.set_Model(AutorecoveringModel value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.ConstructorAutorecoveringModel">
            <summary>Sets the shim of RecordedEntity.RecordedEntity(AutorecoveringModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.ModelDelegateGet">
            <summary>Sets the shim of RecordedEntity.get_ModelDelegate()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.ModelGet">
            <summary>Sets the shim of RecordedEntity.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedEntity.ModelSetAutorecoveringModel">
            <summary>Sets the shim of RecordedEntity.set_Model(AutorecoveringModel value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange">
            <summary>Shim type of RabbitMQ.Client.Impl.RecordedExchange</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.#ctor(RabbitMQ.Client.Impl.RecordedExchange)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.ArgumentsGet">
            <summary>Sets the shim of RecordedExchange.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.ArgumentsSetIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedExchange.set_Arguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.DurableGet">
            <summary>Sets the shim of RecordedExchange.get_Durable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.DurableSetBoolean">
            <summary>Sets the shim of RecordedExchange.set_Durable(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.IsAutoDeleteGet">
            <summary>Sets the shim of RecordedExchange.get_IsAutoDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.IsAutoDeleteSetBoolean">
            <summary>Sets the shim of RecordedExchange.set_IsAutoDelete(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.Recover">
            <summary>Sets the shim of RecordedExchange.Recover()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.ToString01">
            <summary>Sets the shim of RecordedExchange.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.TypeGet">
            <summary>Sets the shim of RecordedExchange.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.WithArgumentsIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedExchange.WithArguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.WithAutoDeleteBoolean">
            <summary>Sets the shim of RecordedExchange.WithAutoDelete(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.WithDurableBoolean">
            <summary>Sets the shim of RecordedExchange.WithDurable(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.AllInstances.WithTypeString">
            <summary>Sets the shim of RecordedExchange.WithType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.ArgumentsGet">
            <summary>Sets the shim of RecordedExchange.get_Arguments()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.ArgumentsSetIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedExchange.set_Arguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.ConstructorAutorecoveringModelString">
            <summary>Sets the shim of RecordedExchange.RecordedExchange(AutorecoveringModel model, String name)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.DurableGet">
            <summary>Sets the shim of RecordedExchange.get_Durable()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.DurableSetBoolean">
            <summary>Sets the shim of RecordedExchange.set_Durable(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.IsAutoDeleteGet">
            <summary>Sets the shim of RecordedExchange.get_IsAutoDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.IsAutoDeleteSetBoolean">
            <summary>Sets the shim of RecordedExchange.set_IsAutoDelete(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.Recover">
            <summary>Sets the shim of RecordedExchange.Recover()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.ToString">
            <summary>Sets the shim of RecordedExchange.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.TypeGet">
            <summary>Sets the shim of RecordedExchange.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.WithArgumentsIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedExchange.WithArguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.WithAutoDeleteBoolean">
            <summary>Sets the shim of RecordedExchange.WithAutoDelete(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.WithDurableBoolean">
            <summary>Sets the shim of RecordedExchange.WithDurable(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchange.WithTypeString">
            <summary>Sets the shim of RecordedExchange.WithType(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding">
            <summary>Shim type of RabbitMQ.Client.Impl.RecordedExchangeBinding</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding.#ctor(RabbitMQ.Client.Impl.RecordedExchangeBinding)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding.AllInstances.Recover">
            <summary>Sets the shim of RecordedExchangeBinding.Recover()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding.ConstructorAutorecoveringModel">
            <summary>Sets the shim of RecordedExchangeBinding.RecordedExchangeBinding(AutorecoveringModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedExchangeBinding.Recover">
            <summary>Sets the shim of RecordedExchangeBinding.Recover()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity">
            <summary>Shim type of RabbitMQ.Client.Impl.RecordedNamedEntity</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.#ctor(RabbitMQ.Client.Impl.RecordedNamedEntity)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.AllInstances.NameGet">
            <summary>Sets the shim of RecordedNamedEntity.get_Name()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.AllInstances.NameSetString">
            <summary>Sets the shim of RecordedNamedEntity.set_Name(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.ConstructorAutorecoveringModelString">
            <summary>Sets the shim of RecordedNamedEntity.RecordedNamedEntity(AutorecoveringModel model, String name)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.NameGet">
            <summary>Sets the shim of RecordedNamedEntity.get_Name()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedNamedEntity.NameSetString">
            <summary>Sets the shim of RecordedNamedEntity.set_Name(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue">
            <summary>Shim type of RabbitMQ.Client.Impl.RecordedQueue</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.#ctor(RabbitMQ.Client.Impl.RecordedQueue)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.ArgumentsIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedQueue.Arguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.AutoDeleteBoolean">
            <summary>Sets the shim of RecordedQueue.AutoDelete(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.DurableBoolean">
            <summary>Sets the shim of RecordedQueue.Durable(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.ExclusiveBoolean">
            <summary>Sets the shim of RecordedQueue.Exclusive(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.IsAutoDeleteGet">
            <summary>Sets the shim of RecordedQueue.get_IsAutoDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.IsAutoDeleteSetBoolean">
            <summary>Sets the shim of RecordedQueue.set_IsAutoDelete(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.IsServerNamedGet">
            <summary>Sets the shim of RecordedQueue.get_IsServerNamed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.IsServerNamedSetBoolean">
            <summary>Sets the shim of RecordedQueue.set_IsServerNamed(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.NameToUseForRecoveryGet">
            <summary>Sets the shim of RecordedQueue.get_NameToUseForRecovery()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.Recover">
            <summary>Sets the shim of RecordedQueue.Recover()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.ServerNamedBoolean">
            <summary>Sets the shim of RecordedQueue.ServerNamed(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AllInstances.ToString01">
            <summary>Sets the shim of RecordedQueue.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.ArgumentsIDictionaryOfStringObject">
            <summary>Sets the shim of RecordedQueue.Arguments(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.AutoDeleteBoolean">
            <summary>Sets the shim of RecordedQueue.AutoDelete(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.ConstructorAutorecoveringModelString">
            <summary>Sets the shim of RecordedQueue.RecordedQueue(AutorecoveringModel model, String name)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.DurableBoolean">
            <summary>Sets the shim of RecordedQueue.Durable(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.ExclusiveBoolean">
            <summary>Sets the shim of RecordedQueue.Exclusive(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.IsAutoDeleteGet">
            <summary>Sets the shim of RecordedQueue.get_IsAutoDelete()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.IsAutoDeleteSetBoolean">
            <summary>Sets the shim of RecordedQueue.set_IsAutoDelete(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.IsServerNamedGet">
            <summary>Sets the shim of RecordedQueue.get_IsServerNamed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.IsServerNamedSetBoolean">
            <summary>Sets the shim of RecordedQueue.set_IsServerNamed(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.NameToUseForRecoveryGet">
            <summary>Sets the shim of RecordedQueue.get_NameToUseForRecovery()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.Recover">
            <summary>Sets the shim of RecordedQueue.Recover()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.ServerNamedBoolean">
            <summary>Sets the shim of RecordedQueue.ServerNamed(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueue.ToString">
            <summary>Sets the shim of RecordedQueue.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding">
            <summary>Shim type of RabbitMQ.Client.Impl.RecordedQueueBinding</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding.#ctor(RabbitMQ.Client.Impl.RecordedQueueBinding)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding.AllInstances.Recover">
            <summary>Sets the shim of RecordedQueueBinding.Recover()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding.ConstructorAutorecoveringModel">
            <summary>Sets the shim of RecordedQueueBinding.RecordedQueueBinding(AutorecoveringModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecordedQueueBinding.Recover">
            <summary>Sets the shim of RecordedQueueBinding.Recover()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel">
            <summary>Shim type of RabbitMQ.Client.Impl.RecoveryAwareModel</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.#ctor(RabbitMQ.Client.Impl.RecoveryAwareModel)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.ActiveDeliveryTagOffsetGet">
            <summary>Sets the shim of RecoveryAwareModel.get_ActiveDeliveryTagOffset()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.ActiveDeliveryTagOffsetSetUInt64">
            <summary>Sets the shim of RecoveryAwareModel.set_ActiveDeliveryTagOffset(UInt64 value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.ActiveDeliveryTagOffsetGet">
            <summary>Sets the shim of RecoveryAwareModel.get_ActiveDeliveryTagOffset()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.ActiveDeliveryTagOffsetSetUInt64">
            <summary>Sets the shim of RecoveryAwareModel.set_ActiveDeliveryTagOffset(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.BasicAckUInt64Boolean">
            <summary>Sets the shim of RecoveryAwareModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.BasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of RecoveryAwareModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.BasicRejectUInt64Boolean">
            <summary>Sets the shim of RecoveryAwareModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of RecoveryAwareModel.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the shim of RecoveryAwareModel.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.InheritOffsetFromRecoveryAwareModel">
            <summary>Sets the shim of RecoveryAwareModel.InheritOffsetFrom(RecoveryAwareModel other)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.MaxSeenDeliveryTagGet">
            <summary>Sets the shim of RecoveryAwareModel.get_MaxSeenDeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.MaxSeenDeliveryTagSetUInt64">
            <summary>Sets the shim of RecoveryAwareModel.set_MaxSeenDeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.AllInstances.OffsetDeliveryTagUInt64">
            <summary>Sets the shim of RecoveryAwareModel.OffsetDeliveryTag(UInt64 deliveryTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.BasicAckUInt64Boolean">
            <summary>Sets the shim of RecoveryAwareModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.BasicNackUInt64BooleanBoolean">
            <summary>Sets the shim of RecoveryAwareModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.BasicRejectUInt64Boolean">
            <summary>Sets the shim of RecoveryAwareModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.Bind(RabbitMQ.Client.IModel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.Bind(RabbitMQ.Client.IRecoverable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.Bind(RabbitMQ.Client.Impl.IFullModel)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.ConstructorISession">
            <summary>Sets the shim of RecoveryAwareModel.RecoveryAwareModel(ISession session)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the shim of RecoveryAwareModel.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the shim of RecoveryAwareModel.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.InheritOffsetFromRecoveryAwareModel">
            <summary>Sets the shim of RecoveryAwareModel.InheritOffsetFrom(RecoveryAwareModel other)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.MaxSeenDeliveryTagGet">
            <summary>Sets the shim of RecoveryAwareModel.get_MaxSeenDeliveryTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.MaxSeenDeliveryTagSetUInt64">
            <summary>Sets the shim of RecoveryAwareModel.set_MaxSeenDeliveryTag(UInt64 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRecoveryAwareModel.OffsetDeliveryTagUInt64">
            <summary>Sets the shim of RecoveryAwareModel.OffsetDeliveryTag(UInt64 deliveryTag)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue">
            <summary>Shim type of RabbitMQ.Client.Impl.RpcContinuationQueue</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.#ctor(RabbitMQ.Client.Impl.RpcContinuationQueue)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.AllInstances.EnqueueIRpcContinuation">
            <summary>Sets the shim of RpcContinuationQueue.Enqueue(IRpcContinuation k)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.AllInstances.HandleModelShutdownShutdownEventArgs">
            <summary>Sets the shim of RpcContinuationQueue.HandleModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.AllInstances.Next">
            <summary>Sets the shim of RpcContinuationQueue.Next()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.Constructor">
            <summary>Sets the shim of RpcContinuationQueue.RpcContinuationQueue()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.EnqueueIRpcContinuation">
            <summary>Sets the shim of RpcContinuationQueue.Enqueue(IRpcContinuation k)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.HandleModelShutdownShutdownEventArgs">
            <summary>Sets the shim of RpcContinuationQueue.HandleModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimRpcContinuationQueue.Next">
            <summary>Sets the shim of RpcContinuationQueue.Next()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSession">
            <summary>Shim type of RabbitMQ.Client.Impl.Session</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSession.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSession.#ctor(RabbitMQ.Client.Impl.Session)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSession.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSession.AllInstances.HandleFrameFrame">
            <summary>Sets the shim of Session.HandleFrame(Frame frame)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSession.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSession.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSession.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSession.Bind(RabbitMQ.Client.Impl.ISession)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSession.ConstructorConnectionInt32">
            <summary>Sets the shim of Session.Session(Connection connection, Int32 channelNumber)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSession.HandleFrameFrame">
            <summary>Sets the shim of Session.HandleFrame(Frame frame)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSessionBase">
            <summary>Shim type of RabbitMQ.Client.Impl.SessionBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.#ctor(RabbitMQ.Client.Impl.SessionBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.ChannelNumberGet">
            <summary>Sets the shim of SessionBase.get_ChannelNumber()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.ChannelNumberSetInt32">
            <summary>Sets the shim of SessionBase.set_ChannelNumber(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.CloseReasonGet">
            <summary>Sets the shim of SessionBase.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.CloseReasonSetShutdownEventArgs">
            <summary>Sets the shim of SessionBase.set_CloseReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.CloseShutdownEventArgs">
            <summary>Sets the shim of SessionBase.Close(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.CloseShutdownEventArgsBoolean">
            <summary>Sets the shim of SessionBase.Close(ShutdownEventArgs reason, Boolean notify)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.CommandReceivedGet">
            <summary>Sets the shim of SessionBase.get_CommandReceived()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.CommandReceivedSetActionOfISessionCommand">
            <summary>Sets the shim of SessionBase.set_CommandReceived(Action`2&lt;ISession,Command&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.ConnectionGet">
            <summary>Sets the shim of SessionBase.get_Connection()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.ConnectionRabbitMQClientImplISessionget">
            <summary>Sets the shim of SessionBase.RabbitMQ.Client.Impl.ISession.get_Connection()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.ConnectionSetConnection">
            <summary>Sets the shim of SessionBase.set_Connection(Connection value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.IsOpenGet">
            <summary>Sets the shim of SessionBase.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.Notify">
            <summary>Sets the shim of SessionBase.Notify()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.OnCommandReceivedCommand">
            <summary>Sets the shim of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.OnConnectionShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.OnSessionShutdownShutdownEventArgs">
            <summary>Sets the shim of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.SessionShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of SessionBase.add_SessionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.SessionShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of SessionBase.remove_SessionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.ToString01">
            <summary>Sets the shim of SessionBase.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.AllInstances.TransmitCommand">
            <summary>Sets the shim of SessionBase.Transmit(Command cmd)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.Bind(RabbitMQ.Client.Impl.ISession)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.ChannelNumberGet">
            <summary>Sets the shim of SessionBase.get_ChannelNumber()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.ChannelNumberSetInt32">
            <summary>Sets the shim of SessionBase.set_ChannelNumber(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.CloseReasonGet">
            <summary>Sets the shim of SessionBase.get_CloseReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.CloseReasonSetShutdownEventArgs">
            <summary>Sets the shim of SessionBase.set_CloseReason(ShutdownEventArgs value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.CloseShutdownEventArgs">
            <summary>Sets the shim of SessionBase.Close(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.CloseShutdownEventArgsBoolean">
            <summary>Sets the shim of SessionBase.Close(ShutdownEventArgs reason, Boolean notify)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.CommandReceivedGet">
            <summary>Sets the shim of SessionBase.get_CommandReceived()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.CommandReceivedSetActionOfISessionCommand">
            <summary>Sets the shim of SessionBase.set_CommandReceived(Action`2&lt;ISession,Command&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.ConnectionGet">
            <summary>Sets the shim of SessionBase.get_Connection()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.ConnectionRabbitMQClientImplISessionget">
            <summary>Sets the shim of SessionBase.RabbitMQ.Client.Impl.ISession.get_Connection()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.ConnectionSetConnection">
            <summary>Sets the shim of SessionBase.set_Connection(Connection value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.ConstructorConnectionInt32">
            <summary>Sets the shim of SessionBase.SessionBase(Connection connection, Int32 channelNumber)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.IsOpenGet">
            <summary>Sets the shim of SessionBase.get_IsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.Notify">
            <summary>Sets the shim of SessionBase.Notify()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.OnCommandReceivedCommand">
            <summary>Sets the shim of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.OnConnectionShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.OnSessionShutdownShutdownEventArgs">
            <summary>Sets the shim of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.SessionShutdownAddEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of SessionBase.add_SessionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.SessionShutdownRemoveEventHandlerOfShutdownEventArgs">
            <summary>Sets the shim of SessionBase.remove_SessionShutdown(EventHandler`1&lt;ShutdownEventArgs&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.ToString">
            <summary>Sets the shim of SessionBase.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionBase.TransmitCommand">
            <summary>Sets the shim of SessionBase.Transmit(Command cmd)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSessionManager">
            <summary>Shim type of RabbitMQ.Client.Impl.SessionManager</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.#ctor(RabbitMQ.Client.Impl.SessionManager)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.AutoCloseConnection">
            <summary>Sets the shim of SessionManager.AutoCloseConnection()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.AutoCloseGet">
            <summary>Sets the shim of SessionManager.get_AutoClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.AutoCloseSetBoolean">
            <summary>Sets the shim of SessionManager.set_AutoClose(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.CheckAutoClose">
            <summary>Sets the shim of SessionManager.CheckAutoClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.CountGet">
            <summary>Sets the shim of SessionManager.get_Count()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.Create">
            <summary>Sets the shim of SessionManager.Create()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.CreateInt32">
            <summary>Sets the shim of SessionManager.Create(Int32 channelNumber)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.CreateInternalInt32">
            <summary>Sets the shim of SessionManager.CreateInternal(Int32 channelNumber)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.HandleSessionShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of SessionManager.HandleSessionShutdown(Object sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.LookupInt32">
            <summary>Sets the shim of SessionManager.Lookup(Int32 number)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AllInstances.SwapInt32ISession">
            <summary>Sets the shim of SessionManager.Swap(Int32 channelNumber, ISession replacement)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AutoCloseConnection">
            <summary>Sets the shim of SessionManager.AutoCloseConnection()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AutoCloseGet">
            <summary>Sets the shim of SessionManager.get_AutoClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.AutoCloseSetBoolean">
            <summary>Sets the shim of SessionManager.set_AutoClose(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.CheckAutoClose">
            <summary>Sets the shim of SessionManager.CheckAutoClose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.ConstructorConnectionUInt16">
            <summary>Sets the shim of SessionManager.SessionManager(Connection connection, UInt16 channelMax)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.CountGet">
            <summary>Sets the shim of SessionManager.get_Count()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.Create">
            <summary>Sets the shim of SessionManager.Create()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.CreateInt32">
            <summary>Sets the shim of SessionManager.Create(Int32 channelNumber)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.CreateInternalInt32">
            <summary>Sets the shim of SessionManager.CreateInternal(Int32 channelNumber)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.HandleSessionShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of SessionManager.HandleSessionShutdown(Object sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.LookupInt32">
            <summary>Sets the shim of SessionManager.Lookup(Int32 number)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSessionManager.SwapInt32ISession">
            <summary>Sets the shim of SessionManager.Swap(Int32 channelNumber, ISession replacement)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation">
            <summary>Shim type of RabbitMQ.Client.Impl.ShutdownContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.#ctor(RabbitMQ.Client.Impl.ShutdownContinuation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.AllInstances.OnConnectionShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of ShutdownContinuation.OnConnectionShutdown(Object sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.AllInstances.OnModelShutdownIModelShutdownEventArgs">
            <summary>Sets the shim of ShutdownContinuation.OnModelShutdown(IModel sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.AllInstances.Wait">
            <summary>Sets the shim of ShutdownContinuation.Wait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.AllInstances.WaitTimeSpan">
            <summary>Sets the shim of ShutdownContinuation.Wait(TimeSpan timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.Constructor">
            <summary>Sets the shim of ShutdownContinuation.ShutdownContinuation()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.OnConnectionShutdownObjectShutdownEventArgs">
            <summary>Sets the shim of ShutdownContinuation.OnConnectionShutdown(Object sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.OnModelShutdownIModelShutdownEventArgs">
            <summary>Sets the shim of ShutdownContinuation.OnModelShutdown(IModel sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.Wait">
            <summary>Sets the shim of ShutdownContinuation.Wait()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimShutdownContinuation.WaitTimeSpan">
            <summary>Sets the shim of ShutdownContinuation.Wait(TimeSpan timeout)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation">
            <summary>Shim type of RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.#ctor(RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.AllInstances.GetReply">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.GetReply()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.AllInstances.GetReplyTimeSpan">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.GetReply(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.AllInstances.HandleCommandCommand">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.HandleCommand(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.AllInstances.HandleModelShutdownShutdownEventArgs">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.HandleModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.Bind(RabbitMQ.Client.Impl.IRpcContinuation)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.Constructor">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.SimpleBlockingRpcContinuation()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.GetReply">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.GetReply()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.GetReplyTimeSpan">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.GetReply(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.HandleCommandCommand">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.HandleCommand(Command cmd)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.HandleModelShutdownShutdownEventArgs">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.HandleModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSimpleBlockingRpcContinuation.ReportInvalidInvariantEither">
            <summary>Sets the shim of SimpleBlockingRpcContinuation.ReportInvalidInvariant(Either result)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler">
            <summary>Shim type of RabbitMQ.Client.Impl.SocketFrameHandler</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.#ctor(RabbitMQ.Client.Impl.SocketFrameHandler)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.Close">
            <summary>Sets the shim of SocketFrameHandler.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.ConnectOrFailITcpClientAmqpTcpEndpointInt32">
            <summary>Sets the shim of SocketFrameHandler.ConnectOrFail(ITcpClient socket, AmqpTcpEndpoint endpoint, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.ConnectUsingAddressFamilyAmqpTcpEndpointFuncOfAddressFamilyITcpClientInt32AddressFamily">
            <summary>Sets the shim of SocketFrameHandler.ConnectUsingAddressFamily(AmqpTcpEndpoint endpoint, Func`2&lt;AddressFamily,ITcpClient&gt; socketFactory, Int32 timeout, AddressFamily family)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.ConnectUsingIPv4AmqpTcpEndpointFuncOfAddressFamilyITcpClientInt32">
            <summary>Sets the shim of SocketFrameHandler.ConnectUsingIPv4(AmqpTcpEndpoint endpoint, Func`2&lt;AddressFamily,ITcpClient&gt; socketFactory, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.ConnectUsingIPv6AmqpTcpEndpointFuncOfAddressFamilyITcpClientInt32">
            <summary>Sets the shim of SocketFrameHandler.ConnectUsingIPv6(AmqpTcpEndpoint endpoint, Func`2&lt;AddressFamily,ITcpClient&gt; socketFactory, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.EndpointGet">
            <summary>Sets the shim of SocketFrameHandler.get_Endpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.EndpointSetAmqpTcpEndpoint">
            <summary>Sets the shim of SocketFrameHandler.set_Endpoint(AmqpTcpEndpoint value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.Flush">
            <summary>Sets the shim of SocketFrameHandler.Flush()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.LocalEndPointGet">
            <summary>Sets the shim of SocketFrameHandler.get_LocalEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.LocalPortGet">
            <summary>Sets the shim of SocketFrameHandler.get_LocalPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.ReadFrame">
            <summary>Sets the shim of SocketFrameHandler.ReadFrame()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.ReadTimeoutSetInt32">
            <summary>Sets the shim of SocketFrameHandler.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.RemoteEndPointGet">
            <summary>Sets the shim of SocketFrameHandler.get_RemoteEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.RemotePortGet">
            <summary>Sets the shim of SocketFrameHandler.get_RemotePort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.SendHeader">
            <summary>Sets the shim of SocketFrameHandler.SendHeader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.ShouldTryIPv6AmqpTcpEndpoint">
            <summary>Sets the shim of SocketFrameHandler.ShouldTryIPv6(AmqpTcpEndpoint endpoint)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.WriteFrameFrame">
            <summary>Sets the shim of SocketFrameHandler.WriteFrame(Frame frame)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.WriteFrameSetIListOfFrame">
            <summary>Sets the shim of SocketFrameHandler.WriteFrameSet(IList`1&lt;Frame&gt; frames)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.AllInstances.WriteTimeoutSetInt32">
            <summary>Sets the shim of SocketFrameHandler.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.Bind(RabbitMQ.Client.Impl.IFrameHandler)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.Close">
            <summary>Sets the shim of SocketFrameHandler.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.ConnectOrFailITcpClientAmqpTcpEndpointInt32">
            <summary>Sets the shim of SocketFrameHandler.ConnectOrFail(ITcpClient socket, AmqpTcpEndpoint endpoint, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.ConnectUsingAddressFamilyAmqpTcpEndpointFuncOfAddressFamilyITcpClientInt32AddressFamily">
            <summary>Sets the shim of SocketFrameHandler.ConnectUsingAddressFamily(AmqpTcpEndpoint endpoint, Func`2&lt;AddressFamily,ITcpClient&gt; socketFactory, Int32 timeout, AddressFamily family)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.ConnectUsingIPv4AmqpTcpEndpointFuncOfAddressFamilyITcpClientInt32">
            <summary>Sets the shim of SocketFrameHandler.ConnectUsingIPv4(AmqpTcpEndpoint endpoint, Func`2&lt;AddressFamily,ITcpClient&gt; socketFactory, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.ConnectUsingIPv6AmqpTcpEndpointFuncOfAddressFamilyITcpClientInt32">
            <summary>Sets the shim of SocketFrameHandler.ConnectUsingIPv6(AmqpTcpEndpoint endpoint, Func`2&lt;AddressFamily,ITcpClient&gt; socketFactory, Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.ConstructorAmqpTcpEndpointFuncOfAddressFamilyITcpClientInt32Int32Int32">
            <summary>Sets the shim of SocketFrameHandler.SocketFrameHandler(AmqpTcpEndpoint endpoint, Func`2&lt;AddressFamily,ITcpClient&gt; socketFactory, Int32 connectionTimeout, Int32 readTimeout, Int32 writeTimeout)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.EndpointGet">
            <summary>Sets the shim of SocketFrameHandler.get_Endpoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.EndpointSetAmqpTcpEndpoint">
            <summary>Sets the shim of SocketFrameHandler.set_Endpoint(AmqpTcpEndpoint value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.Flush">
            <summary>Sets the shim of SocketFrameHandler.Flush()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.LocalEndPointGet">
            <summary>Sets the shim of SocketFrameHandler.get_LocalEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.LocalPortGet">
            <summary>Sets the shim of SocketFrameHandler.get_LocalPort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.ReadFrame">
            <summary>Sets the shim of SocketFrameHandler.ReadFrame()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.ReadTimeoutSetInt32">
            <summary>Sets the shim of SocketFrameHandler.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.RemoteEndPointGet">
            <summary>Sets the shim of SocketFrameHandler.get_RemoteEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.RemotePortGet">
            <summary>Sets the shim of SocketFrameHandler.get_RemotePort()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.SendHeader">
            <summary>Sets the shim of SocketFrameHandler.SendHeader()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.ShouldTryIPv6AmqpTcpEndpoint">
            <summary>Sets the shim of SocketFrameHandler.ShouldTryIPv6(AmqpTcpEndpoint endpoint)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.WriteFrameFrame">
            <summary>Sets the shim of SocketFrameHandler.WriteFrame(Frame frame)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.WriteFrameSetIListOfFrame">
            <summary>Sets the shim of SocketFrameHandler.WriteFrameSet(IList`1&lt;Frame&gt; frames)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSocketFrameHandler.WriteTimeoutSetInt32">
            <summary>Sets the shim of SocketFrameHandler.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException">
            <summary>Shim type of RabbitMQ.Client.Impl.SoftProtocolException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.#ctor(RabbitMQ.Client.Impl.SoftProtocolException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.AllInstances.ChannelGet">
            <summary>Sets the shim of SoftProtocolException.get_Channel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.AllInstances.ChannelSetInt32">
            <summary>Sets the shim of SoftProtocolException.set_Channel(Int32 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.ChannelGet">
            <summary>Sets the shim of SoftProtocolException.get_Channel()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.ChannelSetInt32">
            <summary>Sets the shim of SoftProtocolException.set_Channel(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSoftProtocolException.ConstructorInt32String">
            <summary>Sets the shim of SoftProtocolException.SoftProtocolException(Int32 channelNumber, String message)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties">
            <summary>Shim type of RabbitMQ.Client.Impl.StreamProperties</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.#ctor(RabbitMQ.Client.Impl.StreamProperties)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.AllInstances.Clone">
            <summary>Sets the shim of StreamProperties.Clone()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.Bind(RabbitMQ.Client.IContentHeader)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.Bind(RabbitMQ.Client.IStreamProperties)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.Clone">
            <summary>Sets the shim of StreamProperties.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimStreamProperties.Constructor">
            <summary>Sets the shim of StreamProperties.StreamProperties()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError">
            <summary>Shim type of RabbitMQ.Client.Impl.SyntaxError</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.#ctor(RabbitMQ.Client.Impl.SyntaxError)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.AllInstances.ReplyCodeGet">
            <summary>Sets the shim of SyntaxError.get_ReplyCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.ConstructorString">
            <summary>Sets the shim of SyntaxError.SyntaxError(String message)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimSyntaxError.ReplyCodeGet">
            <summary>Sets the shim of SyntaxError.get_ReplyCode()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException">
            <summary>Shim type of RabbitMQ.Client.Impl.UnexpectedFrameException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.#ctor(RabbitMQ.Client.Impl.UnexpectedFrameException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.AllInstances.FrameGet">
            <summary>Sets the shim of UnexpectedFrameException.get_Frame()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.AllInstances.ReplyCodeGet">
            <summary>Sets the shim of UnexpectedFrameException.get_ReplyCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.ConstructorFrame">
            <summary>Sets the shim of UnexpectedFrameException.UnexpectedFrameException(Frame frame)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.FrameGet">
            <summary>Sets the shim of UnexpectedFrameException.get_Frame()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnexpectedFrameException.ReplyCodeGet">
            <summary>Sets the shim of UnexpectedFrameException.get_ReplyCode()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException">
            <summary>Shim type of RabbitMQ.Client.Impl.UnknownClassOrMethodException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.#ctor(RabbitMQ.Client.Impl.UnknownClassOrMethodException)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.AllInstances.ClassIdGet">
            <summary>Sets the shim of UnknownClassOrMethodException.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.AllInstances.ClassIdSetUInt16">
            <summary>Sets the shim of UnknownClassOrMethodException.set_ClassId(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.AllInstances.MethodIdGet">
            <summary>Sets the shim of UnknownClassOrMethodException.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.AllInstances.MethodIdSetUInt16">
            <summary>Sets the shim of UnknownClassOrMethodException.set_MethodId(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.AllInstances.ReplyCodeGet">
            <summary>Sets the shim of UnknownClassOrMethodException.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.AllInstances.ToString01">
            <summary>Sets the shim of UnknownClassOrMethodException.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.ClassIdGet">
            <summary>Sets the shim of UnknownClassOrMethodException.get_ClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.ClassIdSetUInt16">
            <summary>Sets the shim of UnknownClassOrMethodException.set_ClassId(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.ConstructorUInt16UInt16">
            <summary>Sets the shim of UnknownClassOrMethodException.UnknownClassOrMethodException(UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.MethodIdGet">
            <summary>Sets the shim of UnknownClassOrMethodException.get_MethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.MethodIdSetUInt16">
            <summary>Sets the shim of UnknownClassOrMethodException.set_MethodId(UInt16 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.ReplyCodeGet">
            <summary>Sets the shim of UnknownClassOrMethodException.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimUnknownClassOrMethodException.ToString">
            <summary>Sets the shim of UnknownClassOrMethodException.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting">
            <summary>Shim type of RabbitMQ.Client.Impl.WireFormatting</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.#ctor(RabbitMQ.Client.Impl.WireFormatting)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.AmqpToDecimalByteUInt32">
            <summary>Sets the shim of WireFormatting.AmqpToDecimal(Byte scale, UInt32 unsignedMantissa)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.Constructor">
            <summary>Sets the shim of WireFormatting.WireFormatting()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.DecimalToAmqpDecimalByteOutInt32Out">
            <summary>Sets the shim of WireFormatting.DecimalToAmqp(Decimal value, Byte&amp; scale, Int32&amp; mantissa)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadArrayNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadArray(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadDecimalNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadDecimal(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadFieldValueNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadFieldValue(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadLongNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadLong(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadLonglongNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadLonglong(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadLongstrNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadLongstr(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadOctetNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadOctet(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadShortNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadShort(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadShortstrNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadShortstr(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadTableNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadTable(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.ReadTimestampNetworkBinaryReader">
            <summary>Sets the shim of WireFormatting.ReadTimestamp(NetworkBinaryReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteArrayNetworkBinaryWriterIList">
            <summary>Sets the shim of WireFormatting.WriteArray(NetworkBinaryWriter writer, IList val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteDecimalNetworkBinaryWriterDecimal">
            <summary>Sets the shim of WireFormatting.WriteDecimal(NetworkBinaryWriter writer, Decimal value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteFieldValueNetworkBinaryWriterObject">
            <summary>Sets the shim of WireFormatting.WriteFieldValue(NetworkBinaryWriter writer, Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteLongNetworkBinaryWriterUInt32">
            <summary>Sets the shim of WireFormatting.WriteLong(NetworkBinaryWriter writer, UInt32 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteLonglongNetworkBinaryWriterUInt64">
            <summary>Sets the shim of WireFormatting.WriteLonglong(NetworkBinaryWriter writer, UInt64 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteLongstrNetworkBinaryWriterByteArray">
            <summary>Sets the shim of WireFormatting.WriteLongstr(NetworkBinaryWriter writer, Byte[] val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteOctetNetworkBinaryWriterByte">
            <summary>Sets the shim of WireFormatting.WriteOctet(NetworkBinaryWriter writer, Byte val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteShortNetworkBinaryWriterUInt16">
            <summary>Sets the shim of WireFormatting.WriteShort(NetworkBinaryWriter writer, UInt16 val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteShortstrNetworkBinaryWriterString">
            <summary>Sets the shim of WireFormatting.WriteShortstr(NetworkBinaryWriter writer, String val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteTableNetworkBinaryWriterIDictionary">
            <summary>Sets the shim of WireFormatting.WriteTable(NetworkBinaryWriter writer, IDictionary val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteTableNetworkBinaryWriterIDictionaryOfStringObject">
            <summary>Sets the shim of WireFormatting.WriteTable(NetworkBinaryWriter writer, IDictionary`2&lt;String,Object&gt; val)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.ShimWireFormatting.WriteTimestampNetworkBinaryWriterAmqpTimestamp">
            <summary>Sets the shim of WireFormatting.WriteTimestamp(NetworkBinaryWriter writer, AmqpTimestamp val)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel">
            <summary>Stub type of RabbitMQ.Client.Impl.AutorecoveringModel</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.#ctor(RabbitMQ.Client.Framing.Impl.AutorecoveringConnection,RabbitMQ.Client.Impl.RecoveryAwareModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.InitializeStub">
            <summary>Initializes a new instance of type StubAutorecoveringModel</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnBasicAck(RabbitMQ.Client.Events.BasicAckEventArgs)">
            <summary>Sets the stub of AutorecoveringModel.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnBasicAckBasicAckEventArgs">
            <summary>Sets the stub of AutorecoveringModel.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnBasicNack(RabbitMQ.Client.Events.BasicNackEventArgs)">
            <summary>Sets the stub of AutorecoveringModel.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnBasicNackBasicNackEventArgs">
            <summary>Sets the stub of AutorecoveringModel.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnBasicRecoverOk(System.EventArgs)">
            <summary>Sets the stub of AutorecoveringModel.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnBasicRecoverOkEventArgs">
            <summary>Sets the stub of AutorecoveringModel.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnBasicReturn(RabbitMQ.Client.Events.BasicReturnEventArgs)">
            <summary>Sets the stub of AutorecoveringModel.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnBasicReturnBasicReturnEventArgs">
            <summary>Sets the stub of AutorecoveringModel.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnCallbackException(RabbitMQ.Client.Events.CallbackExceptionEventArgs)">
            <summary>Sets the stub of AutorecoveringModel.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the stub of AutorecoveringModel.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnFlowControl(RabbitMQ.Client.Events.FlowControlEventArgs)">
            <summary>Sets the stub of AutorecoveringModel.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnFlowControlFlowControlEventArgs">
            <summary>Sets the stub of AutorecoveringModel.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnModelShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of AutorecoveringModel.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.OnModelShutdownShutdownEventArgs">
            <summary>Sets the stub of AutorecoveringModel.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.ToString">
            <summary>Sets the stub of AutorecoveringModel.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubAutorecoveringModel.ToString01">
            <summary>Sets the stub of AutorecoveringModel.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubBasicProperties">
            <summary>Stub type of RabbitMQ.Client.Impl.BasicProperties</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AppId">
            <summary>Sets the stub of BasicProperties.get_AppId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AppIdGet">
            <summary>Sets the stub of BasicProperties.get_AppId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AppIdSetString">
            <summary>Sets the stub of BasicProperties.set_AppId(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AppendPropertyDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ContentHeaderBase.AppendPropertyDebugStringTo(StringBuilder stringBuilder)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AppendPropertyDebugStringToStringBuilder">
            <summary>Sets the stub of ContentHeaderBase.AppendPropertyDebugStringTo(StringBuilder stringBuilder)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToAppId">
            <summary>Attaches delegates to emulate StubBasicProperties.AppId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToClusterId">
            <summary>Attaches delegates to emulate StubBasicProperties.ClusterId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToContentEncoding">
            <summary>Attaches delegates to emulate StubBasicProperties.ContentEncoding as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToContentType">
            <summary>Attaches delegates to emulate StubBasicProperties.ContentType as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToCorrelationId">
            <summary>Attaches delegates to emulate StubBasicProperties.CorrelationId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToDeliveryMode">
            <summary>Attaches delegates to emulate StubBasicProperties.DeliveryMode as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToExpiration">
            <summary>Attaches delegates to emulate StubBasicProperties.Expiration as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToHeaders">
            <summary>Attaches delegates to emulate StubBasicProperties.Headers as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToMessageId">
            <summary>Attaches delegates to emulate StubBasicProperties.MessageId as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToPriority">
            <summary>Attaches delegates to emulate StubBasicProperties.Priority as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToReplyTo">
            <summary>Attaches delegates to emulate StubBasicProperties.ReplyTo as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToTimestamp">
            <summary>Attaches delegates to emulate StubBasicProperties.Timestamp as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToType">
            <summary>Attaches delegates to emulate StubBasicProperties.Type as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.AttachBackingFieldToUserId">
            <summary>Attaches delegates to emulate StubBasicProperties.UserId as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearAppId">
            <summary>Sets the stub of BasicProperties.ClearAppId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearAppId01">
            <summary>Sets the stub of BasicProperties.ClearAppId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearClusterId">
            <summary>Sets the stub of BasicProperties.ClearClusterId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearClusterId01">
            <summary>Sets the stub of BasicProperties.ClearClusterId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearContentEncoding">
            <summary>Sets the stub of BasicProperties.ClearContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearContentEncoding01">
            <summary>Sets the stub of BasicProperties.ClearContentEncoding()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearContentType">
            <summary>Sets the stub of BasicProperties.ClearContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearContentType01">
            <summary>Sets the stub of BasicProperties.ClearContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearCorrelationId">
            <summary>Sets the stub of BasicProperties.ClearCorrelationId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearCorrelationId01">
            <summary>Sets the stub of BasicProperties.ClearCorrelationId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearDeliveryMode">
            <summary>Sets the stub of BasicProperties.ClearDeliveryMode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearDeliveryMode01">
            <summary>Sets the stub of BasicProperties.ClearDeliveryMode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearExpiration">
            <summary>Sets the stub of BasicProperties.ClearExpiration()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearExpiration01">
            <summary>Sets the stub of BasicProperties.ClearExpiration()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearHeaders">
            <summary>Sets the stub of BasicProperties.ClearHeaders()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearHeaders01">
            <summary>Sets the stub of BasicProperties.ClearHeaders()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearMessageId">
            <summary>Sets the stub of BasicProperties.ClearMessageId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearMessageId01">
            <summary>Sets the stub of BasicProperties.ClearMessageId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearPriority">
            <summary>Sets the stub of BasicProperties.ClearPriority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearPriority01">
            <summary>Sets the stub of BasicProperties.ClearPriority()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearReplyTo">
            <summary>Sets the stub of BasicProperties.ClearReplyTo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearReplyTo01">
            <summary>Sets the stub of BasicProperties.ClearReplyTo()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearTimestamp">
            <summary>Sets the stub of BasicProperties.ClearTimestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearTimestamp01">
            <summary>Sets the stub of BasicProperties.ClearTimestamp()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearType">
            <summary>Sets the stub of BasicProperties.ClearType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearType01">
            <summary>Sets the stub of BasicProperties.ClearType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearUserId">
            <summary>Sets the stub of BasicProperties.ClearUserId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClearUserId01">
            <summary>Sets the stub of BasicProperties.ClearUserId()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.Clone">
            <summary>Sets the stub of BasicProperties.Clone()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.Clone01">
            <summary>Sets the stub of BasicProperties.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClusterId">
            <summary>Sets the stub of BasicProperties.get_ClusterId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClusterIdGet">
            <summary>Sets the stub of BasicProperties.get_ClusterId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ClusterIdSetString">
            <summary>Sets the stub of BasicProperties.set_ClusterId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ContentEncoding">
            <summary>Sets the stub of BasicProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ContentEncodingGet">
            <summary>Sets the stub of BasicProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ContentEncodingSetString">
            <summary>Sets the stub of BasicProperties.set_ContentEncoding(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ContentType">
            <summary>Sets the stub of BasicProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ContentTypeGet">
            <summary>Sets the stub of BasicProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ContentTypeSetString">
            <summary>Sets the stub of BasicProperties.set_ContentType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.CorrelationId">
            <summary>Sets the stub of BasicProperties.get_CorrelationId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.CorrelationIdGet">
            <summary>Sets the stub of BasicProperties.get_CorrelationId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.CorrelationIdSetString">
            <summary>Sets the stub of BasicProperties.set_CorrelationId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.DeliveryMode">
            <summary>Sets the stub of BasicProperties.get_DeliveryMode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.DeliveryModeGet">
            <summary>Sets the stub of BasicProperties.get_DeliveryMode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.DeliveryModeSetByte">
            <summary>Sets the stub of BasicProperties.set_DeliveryMode(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.Expiration">
            <summary>Sets the stub of BasicProperties.get_Expiration()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ExpirationGet">
            <summary>Sets the stub of BasicProperties.get_Expiration()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ExpirationSetString">
            <summary>Sets the stub of BasicProperties.set_Expiration(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.Headers">
            <summary>Sets the stub of BasicProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.HeadersGet">
            <summary>Sets the stub of BasicProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.HeadersSetIDictionaryOfStringObject">
            <summary>Sets the stub of BasicProperties.set_Headers(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.InitializeStub">
            <summary>Initializes a new instance of type StubBasicProperties</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsAppIdPresent">
            <summary>Sets the stub of BasicProperties.IsAppIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsAppIdPresent01">
            <summary>Sets the stub of BasicProperties.IsAppIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsClusterIdPresent">
            <summary>Sets the stub of BasicProperties.IsClusterIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsClusterIdPresent01">
            <summary>Sets the stub of BasicProperties.IsClusterIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsContentEncodingPresent">
            <summary>Sets the stub of BasicProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsContentEncodingPresent01">
            <summary>Sets the stub of BasicProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsContentTypePresent">
            <summary>Sets the stub of BasicProperties.IsContentTypePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsContentTypePresent01">
            <summary>Sets the stub of BasicProperties.IsContentTypePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsCorrelationIdPresent">
            <summary>Sets the stub of BasicProperties.IsCorrelationIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsCorrelationIdPresent01">
            <summary>Sets the stub of BasicProperties.IsCorrelationIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsDeliveryModePresent">
            <summary>Sets the stub of BasicProperties.IsDeliveryModePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsDeliveryModePresent01">
            <summary>Sets the stub of BasicProperties.IsDeliveryModePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsExpirationPresent">
            <summary>Sets the stub of BasicProperties.IsExpirationPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsExpirationPresent01">
            <summary>Sets the stub of BasicProperties.IsExpirationPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsHeadersPresent">
            <summary>Sets the stub of BasicProperties.IsHeadersPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsHeadersPresent01">
            <summary>Sets the stub of BasicProperties.IsHeadersPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsMessageIdPresent">
            <summary>Sets the stub of BasicProperties.IsMessageIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsMessageIdPresent01">
            <summary>Sets the stub of BasicProperties.IsMessageIdPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsPriorityPresent">
            <summary>Sets the stub of BasicProperties.IsPriorityPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsPriorityPresent01">
            <summary>Sets the stub of BasicProperties.IsPriorityPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsReplyToPresent">
            <summary>Sets the stub of BasicProperties.IsReplyToPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsReplyToPresent01">
            <summary>Sets the stub of BasicProperties.IsReplyToPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsTimestampPresent">
            <summary>Sets the stub of BasicProperties.IsTimestampPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsTimestampPresent01">
            <summary>Sets the stub of BasicProperties.IsTimestampPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsTypePresent">
            <summary>Sets the stub of BasicProperties.IsTypePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsTypePresent01">
            <summary>Sets the stub of BasicProperties.IsTypePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsUserIdPresent">
            <summary>Sets the stub of BasicProperties.IsUserIdPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.IsUserIdPresent01">
            <summary>Sets the stub of BasicProperties.IsUserIdPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.MessageId">
            <summary>Sets the stub of BasicProperties.get_MessageId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.MessageIdGet">
            <summary>Sets the stub of BasicProperties.get_MessageId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.MessageIdSetString">
            <summary>Sets the stub of BasicProperties.set_MessageId(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.Priority">
            <summary>Sets the stub of BasicProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.PriorityGet">
            <summary>Sets the stub of BasicProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.PrioritySetByte">
            <summary>Sets the stub of BasicProperties.set_Priority(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ProtocolClassId">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ProtocolClassIdGet">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ProtocolClassName">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ProtocolClassNameGet">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ReadPropertiesFrom(RabbitMQ.Client.Impl.ContentHeaderPropertyReader)">
            <summary>Sets the stub of ContentHeaderBase.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ReadPropertiesFromContentHeaderPropertyReader">
            <summary>Sets the stub of ContentHeaderBase.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ReplyTo">
            <summary>Sets the stub of BasicProperties.get_ReplyTo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ReplyToGet">
            <summary>Sets the stub of BasicProperties.get_ReplyTo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.ReplyToSetString">
            <summary>Sets the stub of BasicProperties.set_ReplyTo(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.Timestamp">
            <summary>Sets the stub of BasicProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.TimestampGet">
            <summary>Sets the stub of BasicProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.TimestampSetAmqpTimestamp">
            <summary>Sets the stub of BasicProperties.set_Timestamp(AmqpTimestamp value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.Type">
            <summary>Sets the stub of BasicProperties.get_Type()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.TypeGet">
            <summary>Sets the stub of BasicProperties.get_Type()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.TypeSetString">
            <summary>Sets the stub of BasicProperties.set_Type(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.UserId">
            <summary>Sets the stub of BasicProperties.get_UserId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.UserIdGet">
            <summary>Sets the stub of BasicProperties.get_UserId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.UserIdSetString">
            <summary>Sets the stub of BasicProperties.set_UserId(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.WritePropertiesTo(RabbitMQ.Client.Impl.ContentHeaderPropertyWriter)">
            <summary>Sets the stub of ContentHeaderBase.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubBasicProperties.WritePropertiesToContentHeaderPropertyWriter">
            <summary>Sets the stub of ContentHeaderBase.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException">
            <summary>Stub type of RabbitMQ.Client.Impl.ChannelErrorException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.#ctor(System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubChannelErrorException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubChannelErrorException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.InitializeStub">
            <summary>Initializes a new instance of type StubChannelErrorException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.ReplyCode">
            <summary>Sets the stub of ChannelErrorException.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.ReplyCodeGet">
            <summary>Sets the stub of ChannelErrorException.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.ShutdownReason">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.ShutdownReasonGet">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubChannelErrorException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubCommand">
            <summary>Stub type of RabbitMQ.Client.Impl.Command</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubCommand.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubCommand.#ctor(RabbitMQ.Client.Impl.MethodBase)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubCommand.#ctor(RabbitMQ.Client.Impl.MethodBase,RabbitMQ.Client.Impl.ContentHeaderBase,System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubCommand.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubCommand.InitializeStub">
            <summary>Initializes a new instance of type StubCommand</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubCommand.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubCommand.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubCommandAssembler">
            <summary>Stub type of RabbitMQ.Client.Impl.CommandAssembler</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubCommandAssembler.#ctor(RabbitMQ.Client.Framing.Impl.ProtocolBase)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubCommandAssembler.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubCommandAssembler.InitializeStub">
            <summary>Initializes a new instance of type StubCommandAssembler</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubCommandAssembler.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubCommandAssembler.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubConnectionSecureOrTune">
            <summary>Stub type of RabbitMQ.Client.Impl.ConnectionSecureOrTune</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubConnectionSecureOrTune.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubConnectionSecureOrTune.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubConnectionSecureOrTune.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionSecureOrTune</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubConnectionSecureOrTune.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubConnectionSecureOrTune.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubConnectionStartDetails">
            <summary>Stub type of RabbitMQ.Client.Impl.ConnectionStartDetails</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubConnectionStartDetails.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubConnectionStartDetails.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubConnectionStartDetails.InitializeStub">
            <summary>Initializes a new instance of type StubConnectionStartDetails</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubConnectionStartDetails.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubConnectionStartDetails.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase">
            <summary>Stub type of RabbitMQ.Client.Impl.ContentHeaderBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.AppendPropertyDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ContentHeaderBase.AppendPropertyDebugStringTo(StringBuilder stringBuilder)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.AppendPropertyDebugStringToStringBuilder">
            <summary>Sets the stub of ContentHeaderBase.AppendPropertyDebugStringTo(StringBuilder stringBuilder)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.Clone">
            <summary>Sets the stub of ContentHeaderBase.Clone()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.Clone01">
            <summary>Sets the stub of ContentHeaderBase.Clone()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.InitializeStub">
            <summary>Initializes a new instance of type StubContentHeaderBase</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.ProtocolClassId">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.ProtocolClassIdGet">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.ProtocolClassName">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.ProtocolClassNameGet">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.ReadPropertiesFrom(RabbitMQ.Client.Impl.ContentHeaderPropertyReader)">
            <summary>Sets the stub of ContentHeaderBase.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.ReadPropertiesFromContentHeaderPropertyReader">
            <summary>Sets the stub of ContentHeaderBase.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.WritePropertiesTo(RabbitMQ.Client.Impl.ContentHeaderPropertyWriter)">
            <summary>Sets the stub of ContentHeaderBase.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubContentHeaderBase.WritePropertiesToContentHeaderPropertyWriter">
            <summary>Sets the stub of ContentHeaderBase.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyReader">
            <summary>Stub type of RabbitMQ.Client.Impl.ContentHeaderPropertyReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyReader.#ctor(RabbitMQ.Util.NetworkBinaryReader)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyReader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyReader.InitializeStub">
            <summary>Initializes a new instance of type StubContentHeaderPropertyReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyReader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyReader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyWriter">
            <summary>Stub type of RabbitMQ.Client.Impl.ContentHeaderPropertyWriter</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyWriter.#ctor(RabbitMQ.Util.NetworkBinaryWriter)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyWriter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyWriter.InitializeStub">
            <summary>Initializes a new instance of type StubContentHeaderPropertyWriter</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyWriter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubContentHeaderPropertyWriter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubFrame">
            <summary>Stub type of RabbitMQ.Client.Impl.Frame</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubFrame.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubFrame.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubFrame.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubFrame.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubFrame.InitializeStub">
            <summary>Initializes a new instance of type StubFrame</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubFrame.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubFrame.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubFrame.ToString">
            <summary>Sets the stub of Frame.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubFrame.ToString01">
            <summary>Sets the stub of Frame.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException">
            <summary>Stub type of RabbitMQ.Client.Impl.HardProtocolException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubHardProtocolException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubHardProtocolException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.InitializeStub">
            <summary>Initializes a new instance of type StubHardProtocolException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.ReplyCode">
            <summary>Sets the stub of ProtocolException.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.ReplyCodeGet">
            <summary>Sets the stub of ProtocolException.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.ShutdownReason">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.ShutdownReasonGet">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubHardProtocolException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher">
            <summary>Stub type of RabbitMQ.Client.Impl.IConsumerDispatcher</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.#ctor">
            <summary>Initializes a new instance of type StubIConsumerDispatcher</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.HandleBasicCancelIBasicConsumerString">
            <summary>Sets the stub of IConsumerDispatcher.HandleBasicCancel(IBasicConsumer consumer, String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.HandleBasicCancelOkIBasicConsumerString">
            <summary>Sets the stub of IConsumerDispatcher.HandleBasicCancelOk(IBasicConsumer consumer, String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.HandleBasicConsumeOkIBasicConsumerString">
            <summary>Sets the stub of IConsumerDispatcher.HandleBasicConsumeOk(IBasicConsumer consumer, String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.HandleBasicDeliverIBasicConsumerStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of IConsumerDispatcher.HandleBasicDeliver(IBasicConsumer consumer, String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.HandleModelShutdownIBasicConsumerShutdownEventArgs">
            <summary>Sets the stub of IConsumerDispatcher.HandleModelShutdown(IBasicConsumer consumer, ShutdownEventArgs reason)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.RabbitMQ#Client#Impl#IConsumerDispatcher#IsShutdown">
            <summary>Sets the stub of IConsumerDispatcher.get_IsShutdown()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.IsShutdownGet">
            <summary>Sets the stub of IConsumerDispatcher.get_IsShutdown()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.Quiesce">
            <summary>Sets the stub of IConsumerDispatcher.Quiesce()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.RabbitMQ#Client#Impl#IConsumerDispatcher#HandleBasicCancel(RabbitMQ.Client.IBasicConsumer,System.String)">
            <summary>Sets the stub of IConsumerDispatcher.HandleBasicCancel(IBasicConsumer consumer, String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.RabbitMQ#Client#Impl#IConsumerDispatcher#HandleBasicCancelOk(RabbitMQ.Client.IBasicConsumer,System.String)">
            <summary>Sets the stub of IConsumerDispatcher.HandleBasicCancelOk(IBasicConsumer consumer, String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.RabbitMQ#Client#Impl#IConsumerDispatcher#HandleBasicConsumeOk(RabbitMQ.Client.IBasicConsumer,System.String)">
            <summary>Sets the stub of IConsumerDispatcher.HandleBasicConsumeOk(IBasicConsumer consumer, String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.RabbitMQ#Client#Impl#IConsumerDispatcher#HandleBasicDeliver(RabbitMQ.Client.IBasicConsumer,System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IConsumerDispatcher.HandleBasicDeliver(IBasicConsumer consumer, String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.RabbitMQ#Client#Impl#IConsumerDispatcher#HandleModelShutdown(RabbitMQ.Client.IBasicConsumer,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of IConsumerDispatcher.HandleModelShutdown(IBasicConsumer consumer, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.RabbitMQ#Client#Impl#IConsumerDispatcher#Quiesce">
            <summary>Sets the stub of IConsumerDispatcher.Quiesce()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.RabbitMQ#Client#Impl#IConsumerDispatcher#Shutdown">
            <summary>Sets the stub of IConsumerDispatcher.Shutdown()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.RabbitMQ#Client#Impl#IConsumerDispatcher#Shutdown(RabbitMQ.Client.IModel)">
            <summary>Sets the stub of IConsumerDispatcher.Shutdown(IModel model)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.Shutdown">
            <summary>Sets the stub of IConsumerDispatcher.Shutdown()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIConsumerDispatcher.ShutdownIModel">
            <summary>Sets the stub of IConsumerDispatcher.Shutdown(IModel model)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler">
            <summary>Stub type of RabbitMQ.Client.Impl.IFrameHandler</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.#ctor">
            <summary>Initializes a new instance of type StubIFrameHandler</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.Close">
            <summary>Sets the stub of IFrameHandler.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#Endpoint">
            <summary>Sets the stub of IFrameHandler.get_Endpoint()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.EndpointGet">
            <summary>Sets the stub of IFrameHandler.get_Endpoint()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.Flush">
            <summary>Sets the stub of IFrameHandler.Flush()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#LocalEndPoint">
            <summary>Sets the stub of IFrameHandler.get_LocalEndPoint()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.LocalEndPointGet">
            <summary>Sets the stub of IFrameHandler.get_LocalEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#LocalPort">
            <summary>Sets the stub of IFrameHandler.get_LocalPort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.LocalPortGet">
            <summary>Sets the stub of IFrameHandler.get_LocalPort()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#Close">
            <summary>Sets the stub of IFrameHandler.Close()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#Flush">
            <summary>Sets the stub of IFrameHandler.Flush()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#ReadFrame">
            <summary>Sets the stub of IFrameHandler.ReadFrame()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#SendHeader">
            <summary>Sets the stub of IFrameHandler.SendHeader()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#WriteFrame(RabbitMQ.Client.Impl.Frame)">
            <summary>Sets the stub of IFrameHandler.WriteFrame(Frame frame)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#WriteFrameSet(System.Collections.Generic.IList{RabbitMQ.Client.Impl.Frame})">
            <summary>Sets the stub of IFrameHandler.WriteFrameSet(IList`1&lt;Frame&gt; frames)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.ReadFrame">
            <summary>Sets the stub of IFrameHandler.ReadFrame()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#ReadTimeout">
            <summary>Sets the stub of IFrameHandler.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.ReadTimeoutSetInt32">
            <summary>Sets the stub of IFrameHandler.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#RemoteEndPoint">
            <summary>Sets the stub of IFrameHandler.get_RemoteEndPoint()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RemoteEndPointGet">
            <summary>Sets the stub of IFrameHandler.get_RemoteEndPoint()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#RemotePort">
            <summary>Sets the stub of IFrameHandler.get_RemotePort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RemotePortGet">
            <summary>Sets the stub of IFrameHandler.get_RemotePort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.SendHeader">
            <summary>Sets the stub of IFrameHandler.SendHeader()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.WriteFrameFrame">
            <summary>Sets the stub of IFrameHandler.WriteFrame(Frame frame)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.WriteFrameSetIListOfFrame">
            <summary>Sets the stub of IFrameHandler.WriteFrameSet(IList`1&lt;Frame&gt; frames)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.RabbitMQ#Client#Impl#IFrameHandler#WriteTimeout">
            <summary>Sets the stub of IFrameHandler.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFrameHandler.WriteTimeoutSetInt32">
            <summary>Sets the stub of IFrameHandler.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubIFullModel">
            <summary>Stub type of RabbitMQ.Client.Impl.IFullModel</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.#ctor">
            <summary>Initializes a new instance of type StubIFullModel</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.Abort">
            <summary>Sets the stub of IModel.Abort()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.AbortUInt16String">
            <summary>Sets the stub of IModel.Abort(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.AttachBackingFieldToContinuationTimeout">
            <summary>Attaches delegates to emulate StubIFullModel.ContinuationTimeout as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.AttachBackingFieldToDefaultConsumer">
            <summary>Attaches delegates to emulate StubIFullModel.DefaultConsumer as a property with a backing field.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicAckUInt64Boolean">
            <summary>Sets the stub of IModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicCancelString">
            <summary>Sets the stub of IModel.BasicCancel(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicConsumeStringBooleanStringBooleanBooleanIDictionaryOfStringObjectIBasicConsumer">
            <summary>Sets the stub of IModel.BasicConsume(String queue, Boolean autoAck, String consumerTag, Boolean noLocal, Boolean exclusive, IDictionary`2&lt;String,Object&gt; arguments, IBasicConsumer consumer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicGetStringBoolean">
            <summary>Sets the stub of IModel.BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicNackUInt64BooleanBoolean">
            <summary>Sets the stub of IModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the stub of IModel.BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicQosUInt32UInt16Boolean">
            <summary>Sets the stub of IModel.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicRecoverAsyncBoolean">
            <summary>Sets the stub of IModel.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicRecoverBoolean">
            <summary>Sets the stub of IModel.BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.BasicRejectUInt64Boolean">
            <summary>Sets the stub of IModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ChannelNumber">
            <summary>Sets the stub of IModel.get_ChannelNumber()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ChannelNumberGet">
            <summary>Sets the stub of IModel.get_ChannelNumber()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.Close">
            <summary>Sets the stub of IModel.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#CloseReason">
            <summary>Sets the stub of IModel.get_CloseReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.CloseReasonGet">
            <summary>Sets the stub of IModel.get_CloseReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.CloseUInt16String">
            <summary>Sets the stub of IModel.Close(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ConfirmSelect">
            <summary>Sets the stub of IModel.ConfirmSelect()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ConnectionTuneOkUInt16UInt32UInt16">
            <summary>Sets the stub of IFullModel.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ConsumerCountString">
            <summary>Sets the stub of IModel.ConsumerCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ContinuationTimeout">
            <summary>Sets the stub of IModel.get_ContinuationTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ContinuationTimeoutGet">
            <summary>Sets the stub of IModel.get_ContinuationTimeout()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ContinuationTimeoutSetTimeSpan">
            <summary>Sets the stub of IModel.set_ContinuationTimeout(TimeSpan value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.CreateBasicProperties">
            <summary>Sets the stub of IModel.CreateBasicProperties()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#DefaultConsumer">
            <summary>Sets the stub of IModel.get_DefaultConsumer()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.DefaultConsumerGet">
            <summary>Sets the stub of IModel.get_DefaultConsumer()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.DefaultConsumerSetIBasicConsumer">
            <summary>Sets the stub of IModel.set_DefaultConsumer(IBasicConsumer value)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ExchangeBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeBindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ExchangeBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeBind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ExchangeDeclareNoWaitStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeDeclareNoWait(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ExchangeDeclarePassiveString">
            <summary>Sets the stub of IModel.ExchangeDeclarePassive(String exchange)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ExchangeDeclareStringStringBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeDeclare(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ExchangeDeleteNoWaitStringBoolean">
            <summary>Sets the stub of IModel.ExchangeDeleteNoWait(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ExchangeDeleteStringBoolean">
            <summary>Sets the stub of IModel.ExchangeDelete(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ExchangeUnbindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeUnbindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.ExchangeUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.ExchangeUnbind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicAckUInt64Boolean">
            <summary>Sets the stub of IFullModel.HandleBasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicCancelOkString">
            <summary>Sets the stub of IFullModel.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicCancelStringBoolean">
            <summary>Sets the stub of IFullModel.HandleBasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicConsumeOkString">
            <summary>Sets the stub of IFullModel.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of IFullModel.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicGetEmpty">
            <summary>Sets the stub of IFullModel.HandleBasicGetEmpty()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the stub of IFullModel.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicNackUInt64BooleanBoolean">
            <summary>Sets the stub of IFullModel.HandleBasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicRecoverOk">
            <summary>Sets the stub of IFullModel.HandleBasicRecoverOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleBasicReturnUInt16StringStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of IFullModel.HandleBasicReturn(UInt16 replyCode, String replyText, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleChannelCloseOk">
            <summary>Sets the stub of IFullModel.HandleChannelCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of IFullModel.HandleChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleChannelFlowBoolean">
            <summary>Sets the stub of IFullModel.HandleChannelFlow(Boolean active)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleConnectionBlockedString">
            <summary>Sets the stub of IFullModel.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of IFullModel.HandleConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleConnectionOpenOkString">
            <summary>Sets the stub of IFullModel.HandleConnectionOpenOk(String knownHosts)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleConnectionSecureByteArray">
            <summary>Sets the stub of IFullModel.HandleConnectionSecure(Byte[] challenge)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleConnectionStartByteByteIDictionaryOfStringObjectByteArrayByteArray">
            <summary>Sets the stub of IFullModel.HandleConnectionStart(Byte versionMajor, Byte versionMinor, IDictionary`2&lt;String,Object&gt; serverProperties, Byte[] mechanisms, Byte[] locales)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleConnectionTuneUInt16UInt32UInt16">
            <summary>Sets the stub of IFullModel.HandleConnectionTune(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleConnectionUnblocked">
            <summary>Sets the stub of IFullModel.HandleConnectionUnblocked()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.HandleQueueDeclareOkStringUInt32UInt32">
            <summary>Sets the stub of IFullModel.HandleQueueDeclareOk(String queue, UInt32 messageCount, UInt32 consumerCount)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#IsClosed">
            <summary>Sets the stub of IModel.get_IsClosed()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.IsClosedGet">
            <summary>Sets the stub of IModel.get_IsClosed()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#IsOpen">
            <summary>Sets the stub of IModel.get_IsOpen()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.IsOpenGet">
            <summary>Sets the stub of IModel.get_IsOpen()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.MessageCountString">
            <summary>Sets the stub of IModel.MessageCount(String queue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#NextPublishSeqNo">
            <summary>Sets the stub of IModel.get_NextPublishSeqNo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.NextPublishSeqNoGet">
            <summary>Sets the stub of IModel.get_NextPublishSeqNo()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.QueueBindNoWaitStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueBindNoWait(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.QueueBindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueBind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.QueueDeclareNoWaitStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueDeclareNoWait(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.QueueDeclarePassiveString">
            <summary>Sets the stub of IModel.QueueDeclarePassive(String queue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.QueueDeclareStringBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueDeclare(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.QueueDeleteNoWaitStringBooleanBoolean">
            <summary>Sets the stub of IModel.QueueDeleteNoWait(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.QueueDeleteStringBooleanBoolean">
            <summary>Sets the stub of IModel.QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.QueuePurgeString">
            <summary>Sets the stub of IModel.QueuePurge(String queue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.QueueUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of IModel.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#Abort">
            <summary>Sets the stub of IModel.Abort()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#Abort(System.UInt16,System.String)">
            <summary>Sets the stub of IModel.Abort(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicAck(System.UInt64,System.Boolean)">
            <summary>Sets the stub of IModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicCancel(System.String)">
            <summary>Sets the stub of IModel.BasicCancel(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicConsume(System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},RabbitMQ.Client.IBasicConsumer)">
            <summary>Sets the stub of IModel.BasicConsume(String queue, Boolean autoAck, String consumerTag, Boolean noLocal, Boolean exclusive, IDictionary`2&lt;String,Object&gt; arguments, IBasicConsumer consumer)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicGet(System.String,System.Boolean)">
            <summary>Sets the stub of IModel.BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicNack(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Sets the stub of IModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicPublish(System.String,System.String,System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IModel.BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicQos(System.UInt32,System.UInt16,System.Boolean)">
            <summary>Sets the stub of IModel.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicRecover(System.Boolean)">
            <summary>Sets the stub of IModel.BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicRecoverAsync(System.Boolean)">
            <summary>Sets the stub of IModel.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#BasicReject(System.UInt64,System.Boolean)">
            <summary>Sets the stub of IModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#Close">
            <summary>Sets the stub of IModel.Close()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#Close(System.UInt16,System.String)">
            <summary>Sets the stub of IModel.Close(UInt16 replyCode, String replyText)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ConfirmSelect">
            <summary>Sets the stub of IModel.ConfirmSelect()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ConsumerCount(System.String)">
            <summary>Sets the stub of IModel.ConsumerCount(String queue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#CreateBasicProperties">
            <summary>Sets the stub of IModel.CreateBasicProperties()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ExchangeBind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeBind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ExchangeBindNoWait(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeBindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ExchangeDeclare(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeDeclare(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ExchangeDeclareNoWait(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeDeclareNoWait(String exchange, String type, Boolean durable, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ExchangeDeclarePassive(System.String)">
            <summary>Sets the stub of IModel.ExchangeDeclarePassive(String exchange)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ExchangeDelete(System.String,System.Boolean)">
            <summary>Sets the stub of IModel.ExchangeDelete(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ExchangeDeleteNoWait(System.String,System.Boolean)">
            <summary>Sets the stub of IModel.ExchangeDeleteNoWait(String exchange, Boolean ifUnused)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ExchangeUnbind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeUnbind(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#ExchangeUnbindNoWait(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.ExchangeUnbindNoWait(String destination, String source, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#MessageCount(System.String)">
            <summary>Sets the stub of IModel.MessageCount(String queue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#QueueBind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueBind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#QueueBindNoWait(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueBindNoWait(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#QueueDeclare(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueDeclare(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#QueueDeclareNoWait(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueDeclareNoWait(String queue, Boolean durable, Boolean exclusive, Boolean autoDelete, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#QueueDeclarePassive(System.String)">
            <summary>Sets the stub of IModel.QueueDeclarePassive(String queue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#QueueDelete(System.String,System.Boolean,System.Boolean)">
            <summary>Sets the stub of IModel.QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#QueueDeleteNoWait(System.String,System.Boolean,System.Boolean)">
            <summary>Sets the stub of IModel.QueueDeleteNoWait(String queue, Boolean ifUnused, Boolean ifEmpty)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#QueuePurge(System.String)">
            <summary>Sets the stub of IModel.QueuePurge(String queue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#QueueUnbind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IModel.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#TxCommit">
            <summary>Sets the stub of IModel.TxCommit()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#TxRollback">
            <summary>Sets the stub of IModel.TxRollback()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#TxSelect">
            <summary>Sets the stub of IModel.TxSelect()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#WaitForConfirms">
            <summary>Sets the stub of IModel.WaitForConfirms()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#WaitForConfirms(System.TimeSpan)">
            <summary>Sets the stub of IModel.WaitForConfirms(TimeSpan timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#WaitForConfirms(System.TimeSpan,System.Boolean@)">
            <summary>Sets the stub of IModel.WaitForConfirms(TimeSpan timeout, Boolean&amp; timedOut)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#WaitForConfirmsOrDie">
            <summary>Sets the stub of IModel.WaitForConfirmsOrDie()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#IModel#WaitForConfirmsOrDie(System.TimeSpan)">
            <summary>Sets the stub of IModel.WaitForConfirmsOrDie(TimeSpan timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#ConnectionTuneOk(System.UInt16,System.UInt32,System.UInt16)">
            <summary>Sets the stub of IFullModel.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicAck(System.UInt64,System.Boolean)">
            <summary>Sets the stub of IFullModel.HandleBasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicCancel(System.String,System.Boolean)">
            <summary>Sets the stub of IFullModel.HandleBasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicCancelOk(System.String)">
            <summary>Sets the stub of IFullModel.HandleBasicCancelOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicConsumeOk(System.String)">
            <summary>Sets the stub of IFullModel.HandleBasicConsumeOk(String consumerTag)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IFullModel.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicGetEmpty">
            <summary>Sets the stub of IFullModel.HandleBasicGetEmpty()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicGetOk(System.UInt64,System.Boolean,System.String,System.String,System.UInt32,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IFullModel.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicNack(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Sets the stub of IFullModel.HandleBasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicRecoverOk">
            <summary>Sets the stub of IFullModel.HandleBasicRecoverOk()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleBasicReturn(System.UInt16,System.String,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IFullModel.HandleBasicReturn(UInt16 replyCode, String replyText, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleChannelClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of IFullModel.HandleChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleChannelCloseOk">
            <summary>Sets the stub of IFullModel.HandleChannelCloseOk()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleChannelFlow(System.Boolean)">
            <summary>Sets the stub of IFullModel.HandleChannelFlow(Boolean active)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleConnectionBlocked(System.String)">
            <summary>Sets the stub of IFullModel.HandleConnectionBlocked(String reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleConnectionClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of IFullModel.HandleConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleConnectionOpenOk(System.String)">
            <summary>Sets the stub of IFullModel.HandleConnectionOpenOk(String knownHosts)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleConnectionSecure(System.Byte[])">
            <summary>Sets the stub of IFullModel.HandleConnectionSecure(Byte[] challenge)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleConnectionStart(System.Byte,System.Byte,System.Collections.Generic.IDictionary{System.String,System.Object},System.Byte[],System.Byte[])">
            <summary>Sets the stub of IFullModel.HandleConnectionStart(Byte versionMajor, Byte versionMinor, IDictionary`2&lt;String,Object&gt; serverProperties, Byte[] mechanisms, Byte[] locales)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleConnectionTune(System.UInt16,System.UInt32,System.UInt16)">
            <summary>Sets the stub of IFullModel.HandleConnectionTune(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleConnectionUnblocked">
            <summary>Sets the stub of IFullModel.HandleConnectionUnblocked()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#HandleQueueDeclareOk(System.String,System.UInt32,System.UInt32)">
            <summary>Sets the stub of IFullModel.HandleQueueDeclareOk(String queue, UInt32 messageCount, UInt32 consumerCount)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_BasicCancel(System.String,System.Boolean)">
            <summary>Sets the stub of IFullModel._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_BasicConsume(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IFullModel._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_BasicGet(System.String,System.Boolean)">
            <summary>Sets the stub of IFullModel._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_BasicPublish(System.String,System.String,System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of IFullModel._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_BasicRecover(System.Boolean)">
            <summary>Sets the stub of IFullModel._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ChannelClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of IFullModel._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ChannelCloseOk">
            <summary>Sets the stub of IFullModel._Private_ChannelCloseOk()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ChannelFlowOk(System.Boolean)">
            <summary>Sets the stub of IFullModel._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ChannelOpen(System.String)">
            <summary>Sets the stub of IFullModel._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ConfirmSelect(System.Boolean)">
            <summary>Sets the stub of IFullModel._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ConnectionClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of IFullModel._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ConnectionCloseOk">
            <summary>Sets the stub of IFullModel._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ConnectionOpen(System.String,System.String,System.Boolean)">
            <summary>Sets the stub of IFullModel._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ConnectionSecureOk(System.Byte[])">
            <summary>Sets the stub of IFullModel._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ConnectionStartOk(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Byte[],System.String)">
            <summary>Sets the stub of IFullModel._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ExchangeBind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IFullModel._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ExchangeDeclare(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IFullModel._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ExchangeDelete(System.String,System.Boolean,System.Boolean)">
            <summary>Sets the stub of IFullModel._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_ExchangeUnbind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IFullModel._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_QueueBind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IFullModel._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_QueueDeclare(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of IFullModel._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_QueueDelete(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Sets the stub of IFullModel._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.RabbitMQ#Client#Impl#IFullModel#_Private_QueuePurge(System.String,System.Boolean)">
            <summary>Sets the stub of IFullModel._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIFullModel.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.TxCommit">
            <summary>Sets the stub of IModel.TxCommit()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.TxRollback">
            <summary>Sets the stub of IModel.TxRollback()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.TxSelect">
            <summary>Sets the stub of IModel.TxSelect()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.WaitForConfirms">
            <summary>Sets the stub of IModel.WaitForConfirms()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.WaitForConfirmsOrDie">
            <summary>Sets the stub of IModel.WaitForConfirmsOrDie()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.WaitForConfirmsOrDieTimeSpan">
            <summary>Sets the stub of IModel.WaitForConfirmsOrDie(TimeSpan timeout)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.WaitForConfirmsTimeSpan">
            <summary>Sets the stub of IModel.WaitForConfirms(TimeSpan timeout)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel.WaitForConfirmsTimeSpanBooleanOut">
            <summary>Sets the stub of IModel.WaitForConfirms(TimeSpan timeout, Boolean&amp; timedOut)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_BasicCancelStringBoolean">
            <summary>Sets the stub of IFullModel._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_BasicConsumeStringStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IFullModel._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_BasicGetStringBoolean">
            <summary>Sets the stub of IFullModel._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the stub of IFullModel._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_BasicRecoverBoolean">
            <summary>Sets the stub of IFullModel._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ChannelCloseOk">
            <summary>Sets the stub of IFullModel._Private_ChannelCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of IFullModel._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ChannelFlowOkBoolean">
            <summary>Sets the stub of IFullModel._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ChannelOpenString">
            <summary>Sets the stub of IFullModel._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ConfirmSelectBoolean">
            <summary>Sets the stub of IFullModel._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ConnectionCloseOk">
            <summary>Sets the stub of IFullModel._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of IFullModel._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ConnectionOpenStringStringBoolean">
            <summary>Sets the stub of IFullModel._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ConnectionSecureOkByteArray">
            <summary>Sets the stub of IFullModel._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the stub of IFullModel._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ExchangeBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IFullModel._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ExchangeDeclareStringStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IFullModel._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ExchangeDeleteStringBooleanBoolean">
            <summary>Sets the stub of IFullModel._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_ExchangeUnbindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IFullModel._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_QueueBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IFullModel._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_QueueDeclareStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of IFullModel._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_QueueDeleteStringBooleanBooleanBoolean">
            <summary>Sets the stub of IFullModel._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIFullModel._Private_QueuePurgeStringBoolean">
            <summary>Sets the stub of IFullModel._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubIRpcContinuation">
            <summary>Stub type of RabbitMQ.Client.Impl.IRpcContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIRpcContinuation.#ctor">
            <summary>Initializes a new instance of type StubIRpcContinuation</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIRpcContinuation.HandleCommandCommand">
            <summary>Sets the stub of IRpcContinuation.HandleCommand(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubIRpcContinuation.HandleModelShutdownShutdownEventArgs">
            <summary>Sets the stub of IRpcContinuation.HandleModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIRpcContinuation.RabbitMQ#Client#Impl#IRpcContinuation#HandleCommand(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of IRpcContinuation.HandleCommand(Command cmd)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubIRpcContinuation.RabbitMQ#Client#Impl#IRpcContinuation#HandleModelShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of IRpcContinuation.HandleModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubISession">
            <summary>Stub type of RabbitMQ.Client.Impl.ISession</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubISession.#ctor">
            <summary>Initializes a new instance of type StubISession</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubISession.AttachBackingFieldToCommandReceived">
            <summary>Attaches delegates to emulate StubISession.CommandReceived as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#ChannelNumber">
            <summary>Sets the stub of ISession.get_ChannelNumber()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.ChannelNumberGet">
            <summary>Sets the stub of ISession.get_ChannelNumber()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#CloseReason">
            <summary>Sets the stub of ISession.get_CloseReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.CloseReasonGet">
            <summary>Sets the stub of ISession.get_CloseReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.CloseShutdownEventArgs">
            <summary>Sets the stub of ISession.Close(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.CloseShutdownEventArgsBoolean">
            <summary>Sets the stub of ISession.Close(ShutdownEventArgs reason, Boolean notify)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#CommandReceived">
            <summary>Sets the stub of ISession.get_CommandReceived()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.CommandReceivedGet">
            <summary>Sets the stub of ISession.get_CommandReceived()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.CommandReceivedSetActionOfISessionCommand">
            <summary>Sets the stub of ISession.set_CommandReceived(Action`2&lt;ISession,Command&gt; value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#Connection">
            <summary>Sets the stub of ISession.get_Connection()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.ConnectionGet">
            <summary>Sets the stub of ISession.get_Connection()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.HandleFrameFrame">
            <summary>Sets the stub of ISession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#IsOpen">
            <summary>Sets the stub of ISession.get_IsOpen()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.IsOpenGet">
            <summary>Sets the stub of ISession.get_IsOpen()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.Notify">
            <summary>Sets the stub of ISession.Notify()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#Close(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of ISession.Close(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#Close(RabbitMQ.Client.ShutdownEventArgs,System.Boolean)">
            <summary>Sets the stub of ISession.Close(ShutdownEventArgs reason, Boolean notify)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#HandleFrame(RabbitMQ.Client.Impl.Frame)">
            <summary>Sets the stub of ISession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#Notify">
            <summary>Sets the stub of ISession.Notify()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubISession.RabbitMQ#Client#Impl#ISession#Transmit(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of ISession.Transmit(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubISession.TransmitCommand">
            <summary>Sets the stub of ISession.Transmit(Command cmd)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubMainSession">
            <summary>Stub type of RabbitMQ.Client.Impl.MainSession</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMainSession.#ctor(RabbitMQ.Client.Framing.Impl.Connection)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMainSession.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMainSession.HandleFrame(RabbitMQ.Client.Impl.Frame)">
            <summary>Sets the stub of MainSession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMainSession.HandleFrameFrame">
            <summary>Sets the stub of MainSession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMainSession.InitializeStub">
            <summary>Initializes a new instance of type StubMainSession</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMainSession.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMainSession.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMainSession.OnCommandReceived(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMainSession.OnCommandReceivedCommand">
            <summary>Sets the stub of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMainSession.OnConnectionShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMainSession.OnConnectionShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMainSession.OnSessionShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMainSession.OnSessionShutdownShutdownEventArgs">
            <summary>Sets the stub of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMainSession.ToString">
            <summary>Sets the stub of SessionBase.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMainSession.ToString01">
            <summary>Sets the stub of SessionBase.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMainSession.Transmit(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of MainSession.Transmit(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMainSession.TransmitCommand">
            <summary>Sets the stub of MainSession.Transmit(Command cmd)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException">
            <summary>Stub type of RabbitMQ.Client.Impl.MalformedFrameException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubMalformedFrameException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubMalformedFrameException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.InitializeStub">
            <summary>Initializes a new instance of type StubMalformedFrameException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.ReplyCode">
            <summary>Sets the stub of MalformedFrameException.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.ReplyCodeGet">
            <summary>Sets the stub of MalformedFrameException.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.ShutdownReason">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.ShutdownReasonGet">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMalformedFrameException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentReader">
            <summary>Stub type of RabbitMQ.Client.Impl.MethodArgumentReader</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentReader.#ctor(RabbitMQ.Util.NetworkBinaryReader)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentReader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentReader.InitializeStub">
            <summary>Initializes a new instance of type StubMethodArgumentReader</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentReader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentReader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentWriter">
            <summary>Stub type of RabbitMQ.Client.Impl.MethodArgumentWriter</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentWriter.#ctor(RabbitMQ.Util.NetworkBinaryWriter)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentWriter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentWriter.InitializeStub">
            <summary>Initializes a new instance of type StubMethodArgumentWriter</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentWriter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodArgumentWriter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubMethodBase">
            <summary>Stub type of RabbitMQ.Client.Impl.MethodBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMethodBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMethodBase.AppendArgumentDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of MethodBase.AppendArgumentDebugStringTo(StringBuilder stringBuilder)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMethodBase.AppendArgumentDebugStringToStringBuilder">
            <summary>Sets the stub of MethodBase.AppendArgumentDebugStringTo(StringBuilder stringBuilder)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodBase.HasContent">
            <summary>Sets the stub of MethodBase.get_HasContent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMethodBase.HasContentGet">
            <summary>Sets the stub of MethodBase.get_HasContent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMethodBase.InitializeStub">
            <summary>Initializes a new instance of type StubMethodBase</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodBase.ProtocolClassId">
            <summary>Sets the stub of MethodBase.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMethodBase.ProtocolClassIdGet">
            <summary>Sets the stub of MethodBase.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodBase.ProtocolMethodId">
            <summary>Sets the stub of MethodBase.get_ProtocolMethodId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMethodBase.ProtocolMethodIdGet">
            <summary>Sets the stub of MethodBase.get_ProtocolMethodId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubMethodBase.ProtocolMethodName">
            <summary>Sets the stub of MethodBase.get_ProtocolMethodName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMethodBase.ProtocolMethodNameGet">
            <summary>Sets the stub of MethodBase.get_ProtocolMethodName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMethodBase.ReadArgumentsFrom(RabbitMQ.Client.Impl.MethodArgumentReader)">
            <summary>Sets the stub of MethodBase.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMethodBase.ReadArgumentsFromMethodArgumentReader">
            <summary>Sets the stub of MethodBase.ReadArgumentsFrom(MethodArgumentReader reader)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubMethodBase.WriteArgumentsTo(RabbitMQ.Client.Impl.MethodArgumentWriter)">
            <summary>Sets the stub of MethodBase.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubMethodBase.WriteArgumentsToMethodArgumentWriter">
            <summary>Sets the stub of MethodBase.WriteArgumentsTo(MethodArgumentWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubModelBase">
            <summary>Stub type of RabbitMQ.Client.Impl.ModelBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.#ctor(RabbitMQ.Client.Impl.ISession)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.#ctor(RabbitMQ.Client.Impl.ISession,RabbitMQ.Client.ConsumerWorkService)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicAck(System.UInt64,System.Boolean)">
            <summary>Sets the stub of ModelBase.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicAckUInt64Boolean">
            <summary>Sets the stub of ModelBase.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicNack(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Sets the stub of ModelBase.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicNackUInt64BooleanBoolean">
            <summary>Sets the stub of ModelBase.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicQos(System.UInt32,System.UInt16,System.Boolean)">
            <summary>Sets the stub of ModelBase.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicQosUInt32UInt16Boolean">
            <summary>Sets the stub of ModelBase.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicRecoverAsync(System.Boolean)">
            <summary>Sets the stub of ModelBase.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicRecoverAsyncBoolean">
            <summary>Sets the stub of ModelBase.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicReject(System.UInt64,System.Boolean)">
            <summary>Sets the stub of ModelBase.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.BasicRejectUInt64Boolean">
            <summary>Sets the stub of ModelBase.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubModelBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.ConnectionTuneOk(System.UInt16,System.UInt32,System.UInt16)">
            <summary>Sets the stub of ModelBase.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.ConnectionTuneOkUInt16UInt32UInt16">
            <summary>Sets the stub of ModelBase.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.CreateBasicProperties">
            <summary>Sets the stub of ModelBase.CreateBasicProperties()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.CreateBasicProperties01">
            <summary>Sets the stub of ModelBase.CreateBasicProperties()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.DispatchAsynchronous(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of ModelBase.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.DispatchAsynchronousCommand">
            <summary>Sets the stub of ModelBase.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.HandleAckNackUInt64BooleanBoolean">
            <summary>Sets the stub of ModelBase.handleAckNack(UInt64 deliveryTag, Boolean multiple, Boolean isNack)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of ModelBase.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of ModelBase.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.HandleBasicGetOk(System.UInt64,System.Boolean,System.String,System.String,System.UInt32,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of ModelBase.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the stub of ModelBase.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.InitializeStub">
            <summary>Initializes a new instance of type StubModelBase</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubModelBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubModelBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnBasicAck(RabbitMQ.Client.Events.BasicAckEventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnBasicAckBasicAckEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnBasicNack(RabbitMQ.Client.Events.BasicNackEventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnBasicNackBasicNackEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnBasicRecoverOk(System.EventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnBasicRecoverOkEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnBasicReturn(RabbitMQ.Client.Events.BasicReturnEventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnBasicReturnBasicReturnEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnCallbackException(RabbitMQ.Client.Events.CallbackExceptionEventArgs)">
            <summary>Sets the stub of ModelBase.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the stub of ModelBase.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnFlowControl(RabbitMQ.Client.Events.FlowControlEventArgs)">
            <summary>Sets the stub of ModelBase.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnFlowControlFlowControlEventArgs">
            <summary>Sets the stub of ModelBase.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnModelShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of ModelBase.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.OnModelShutdownShutdownEventArgs">
            <summary>Sets the stub of ModelBase.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.QueueUnbind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of ModelBase.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.QueueUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of ModelBase.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.ToString">
            <summary>Sets the stub of ModelBase.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.ToString01">
            <summary>Sets the stub of ModelBase.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.TxCommit">
            <summary>Sets the stub of ModelBase.TxCommit()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.TxCommit01">
            <summary>Sets the stub of ModelBase.TxCommit()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.TxRollback">
            <summary>Sets the stub of ModelBase.TxRollback()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.TxRollback01">
            <summary>Sets the stub of ModelBase.TxRollback()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.TxSelect">
            <summary>Sets the stub of ModelBase.TxSelect()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase.TxSelect01">
            <summary>Sets the stub of ModelBase.TxSelect()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicCancel(System.String,System.Boolean)">
            <summary>Sets the stub of ModelBase._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicCancelStringBoolean">
            <summary>Sets the stub of ModelBase._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicConsume(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of ModelBase._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicConsumeStringStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of ModelBase._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicGet(System.String,System.Boolean)">
            <summary>Sets the stub of ModelBase._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicGetStringBoolean">
            <summary>Sets the stub of ModelBase._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicPublish(System.String,System.String,System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of ModelBase._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the stub of ModelBase._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicRecover(System.Boolean)">
            <summary>Sets the stub of ModelBase._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_BasicRecoverBoolean">
            <summary>Sets the stub of ModelBase._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ChannelClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of ModelBase._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ChannelCloseOk">
            <summary>Sets the stub of ModelBase._Private_ChannelCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ChannelCloseOk01">
            <summary>Sets the stub of ModelBase._Private_ChannelCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of ModelBase._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ChannelFlowOk(System.Boolean)">
            <summary>Sets the stub of ModelBase._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ChannelFlowOkBoolean">
            <summary>Sets the stub of ModelBase._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ChannelOpen(System.String)">
            <summary>Sets the stub of ModelBase._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ChannelOpenString">
            <summary>Sets the stub of ModelBase._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConfirmSelect(System.Boolean)">
            <summary>Sets the stub of ModelBase._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConfirmSelectBoolean">
            <summary>Sets the stub of ModelBase._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of ModelBase._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionCloseOk">
            <summary>Sets the stub of ModelBase._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionCloseOk01">
            <summary>Sets the stub of ModelBase._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of ModelBase._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionOpen(System.String,System.String,System.Boolean)">
            <summary>Sets the stub of ModelBase._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionOpenStringStringBoolean">
            <summary>Sets the stub of ModelBase._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionSecureOk(System.Byte[])">
            <summary>Sets the stub of ModelBase._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionSecureOkByteArray">
            <summary>Sets the stub of ModelBase._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionStartOk(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Byte[],System.String)">
            <summary>Sets the stub of ModelBase._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the stub of ModelBase._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ExchangeBind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of ModelBase._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ExchangeBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of ModelBase._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ExchangeDeclare(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of ModelBase._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ExchangeDeclareStringStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of ModelBase._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ExchangeDelete(System.String,System.Boolean,System.Boolean)">
            <summary>Sets the stub of ModelBase._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ExchangeDeleteStringBooleanBoolean">
            <summary>Sets the stub of ModelBase._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ExchangeUnbind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of ModelBase._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_ExchangeUnbindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of ModelBase._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_QueueBind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of ModelBase._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_QueueBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of ModelBase._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_QueueDeclare(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of ModelBase._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_QueueDeclareStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of ModelBase._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_QueueDelete(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Sets the stub of ModelBase._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_QueueDeleteStringBooleanBooleanBoolean">
            <summary>Sets the stub of ModelBase._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_QueuePurge(System.String,System.Boolean)">
            <summary>Sets the stub of ModelBase._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubModelBase._Private_QueuePurgeStringBoolean">
            <summary>Sets the stub of ModelBase._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubModelBase.handleAckNack(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Sets the stub of ModelBase.handleAckNack(UInt64 deliveryTag, Boolean multiple, Boolean isNack)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubProtocolException">
            <summary>Stub type of RabbitMQ.Client.Impl.ProtocolException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubProtocolException.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubProtocolException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubProtocolException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubProtocolException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubProtocolException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubProtocolException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubProtocolException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubProtocolException.InitializeStub">
            <summary>Initializes a new instance of type StubProtocolException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.ReplyCode">
            <summary>Sets the stub of ProtocolException.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.ReplyCodeGet">
            <summary>Sets the stub of ProtocolException.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.ShutdownReason">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.ShutdownReasonGet">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubProtocolException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubProtocolException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubProtocolException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession">
            <summary>Stub type of RabbitMQ.Client.Impl.QuiescingSession</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.#ctor(RabbitMQ.Client.Framing.Impl.Connection,System.Int32,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.HandleFrame(RabbitMQ.Client.Impl.Frame)">
            <summary>Sets the stub of QuiescingSession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.HandleFrameFrame">
            <summary>Sets the stub of QuiescingSession.HandleFrame(Frame frame)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.InitializeStub">
            <summary>Initializes a new instance of type StubQuiescingSession</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.OnCommandReceived(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.OnCommandReceivedCommand">
            <summary>Sets the stub of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.OnConnectionShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.OnConnectionShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.OnSessionShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.OnSessionShutdownShutdownEventArgs">
            <summary>Sets the stub of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.ToString">
            <summary>Sets the stub of SessionBase.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.ToString01">
            <summary>Sets the stub of SessionBase.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.Transmit(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of SessionBase.Transmit(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubQuiescingSession.TransmitCommand">
            <summary>Sets the stub of SessionBase.Transmit(Command cmd)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding">
            <summary>Stub type of RabbitMQ.Client.Impl.RecordedBinding</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.#ctor(RabbitMQ.Client.Impl.AutorecoveringModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.Equals(System.Object)">
            <summary>Sets the stub of RecordedBinding.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.EqualsObject">
            <summary>Sets the stub of RecordedBinding.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.GetHashCode">
            <summary>Sets the stub of RecordedBinding.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.GetHashCode01">
            <summary>Sets the stub of RecordedBinding.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.InitializeStub">
            <summary>Initializes a new instance of type StubRecordedBinding</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.Recover">
            <summary>Sets the stub of RecordedBinding.Recover()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.Recover01">
            <summary>Sets the stub of RecordedBinding.Recover()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.ToString">
            <summary>Sets the stub of RecordedBinding.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedBinding.ToString01">
            <summary>Sets the stub of RecordedBinding.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRecordedConsumer">
            <summary>Stub type of RabbitMQ.Client.Impl.RecordedConsumer</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedConsumer.#ctor(RabbitMQ.Client.Impl.AutorecoveringModel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedConsumer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedConsumer.InitializeStub">
            <summary>Initializes a new instance of type StubRecordedConsumer</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedConsumer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedConsumer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRecordedEntity">
            <summary>Stub type of RabbitMQ.Client.Impl.RecordedEntity</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedEntity.#ctor(RabbitMQ.Client.Impl.AutorecoveringModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedEntity.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedEntity.InitializeStub">
            <summary>Initializes a new instance of type StubRecordedEntity</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedEntity.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedEntity.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRecordedExchange">
            <summary>Stub type of RabbitMQ.Client.Impl.RecordedExchange</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedExchange.#ctor(RabbitMQ.Client.Impl.AutorecoveringModel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedExchange.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedExchange.InitializeStub">
            <summary>Initializes a new instance of type StubRecordedExchange</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedExchange.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedExchange.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedExchange.ToString">
            <summary>Sets the stub of RecordedExchange.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedExchange.ToString01">
            <summary>Sets the stub of RecordedExchange.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding">
            <summary>Stub type of RabbitMQ.Client.Impl.RecordedExchangeBinding</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.#ctor(RabbitMQ.Client.Impl.AutorecoveringModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.Equals(System.Object)">
            <summary>Sets the stub of RecordedBinding.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.EqualsObject">
            <summary>Sets the stub of RecordedBinding.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.GetHashCode">
            <summary>Sets the stub of RecordedBinding.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.GetHashCode01">
            <summary>Sets the stub of RecordedBinding.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.InitializeStub">
            <summary>Initializes a new instance of type StubRecordedExchangeBinding</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.Recover">
            <summary>Sets the stub of RecordedExchangeBinding.Recover()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.Recover01">
            <summary>Sets the stub of RecordedExchangeBinding.Recover()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.ToString">
            <summary>Sets the stub of RecordedBinding.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedExchangeBinding.ToString01">
            <summary>Sets the stub of RecordedBinding.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRecordedNamedEntity">
            <summary>Stub type of RabbitMQ.Client.Impl.RecordedNamedEntity</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedNamedEntity.#ctor(RabbitMQ.Client.Impl.AutorecoveringModel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedNamedEntity.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedNamedEntity.InitializeStub">
            <summary>Initializes a new instance of type StubRecordedNamedEntity</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedNamedEntity.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedNamedEntity.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRecordedQueue">
            <summary>Stub type of RabbitMQ.Client.Impl.RecordedQueue</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedQueue.#ctor(RabbitMQ.Client.Impl.AutorecoveringModel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedQueue.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedQueue.InitializeStub">
            <summary>Initializes a new instance of type StubRecordedQueue</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedQueue.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedQueue.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedQueue.ToString">
            <summary>Sets the stub of RecordedQueue.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedQueue.ToString01">
            <summary>Sets the stub of RecordedQueue.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding">
            <summary>Stub type of RabbitMQ.Client.Impl.RecordedQueueBinding</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.#ctor(RabbitMQ.Client.Impl.AutorecoveringModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.Equals(System.Object)">
            <summary>Sets the stub of RecordedBinding.Equals(Object obj)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.EqualsObject">
            <summary>Sets the stub of RecordedBinding.Equals(Object obj)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.GetHashCode">
            <summary>Sets the stub of RecordedBinding.GetHashCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.GetHashCode01">
            <summary>Sets the stub of RecordedBinding.GetHashCode()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.InitializeStub">
            <summary>Initializes a new instance of type StubRecordedQueueBinding</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.Recover">
            <summary>Sets the stub of RecordedQueueBinding.Recover()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.Recover01">
            <summary>Sets the stub of RecordedQueueBinding.Recover()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.ToString">
            <summary>Sets the stub of RecordedBinding.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecordedQueueBinding.ToString01">
            <summary>Sets the stub of RecordedBinding.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel">
            <summary>Stub type of RabbitMQ.Client.Impl.RecoveryAwareModel</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.#ctor(RabbitMQ.Client.Impl.ISession)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicAck(System.UInt64,System.Boolean)">
            <summary>Sets the stub of RecoveryAwareModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicAckUInt64Boolean">
            <summary>Sets the stub of RecoveryAwareModel.BasicAck(UInt64 deliveryTag, Boolean multiple)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicNack(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Sets the stub of RecoveryAwareModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicNackUInt64BooleanBoolean">
            <summary>Sets the stub of RecoveryAwareModel.BasicNack(UInt64 deliveryTag, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicQos(System.UInt32,System.UInt16,System.Boolean)">
            <summary>Sets the stub of Model.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicQosUInt32UInt16Boolean">
            <summary>Sets the stub of Model.BasicQos(UInt32 prefetchSize, UInt16 prefetchCount, Boolean global)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicRecoverAsync(System.Boolean)">
            <summary>Sets the stub of Model.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicRecoverAsyncBoolean">
            <summary>Sets the stub of Model.BasicRecoverAsync(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicReject(System.UInt64,System.Boolean)">
            <summary>Sets the stub of RecoveryAwareModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.BasicRejectUInt64Boolean">
            <summary>Sets the stub of RecoveryAwareModel.BasicReject(UInt64 deliveryTag, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.ConnectionTuneOk(System.UInt16,System.UInt32,System.UInt16)">
            <summary>Sets the stub of Model.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.ConnectionTuneOkUInt16UInt32UInt16">
            <summary>Sets the stub of Model.ConnectionTuneOk(UInt16 channelMax, UInt32 frameMax, UInt16 heartbeat)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.CreateBasicProperties">
            <summary>Sets the stub of Model.CreateBasicProperties()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.CreateBasicProperties01">
            <summary>Sets the stub of Model.CreateBasicProperties()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.DispatchAsynchronous(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of Model.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.DispatchAsynchronousCommand">
            <summary>Sets the stub of Model.DispatchAsynchronous(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.HandleAckNackUInt64BooleanBoolean">
            <summary>Sets the stub of ModelBase.handleAckNack(UInt64 deliveryTag, Boolean multiple, Boolean isNack)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.HandleBasicDeliver(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of RecoveryAwareModel.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.HandleBasicDeliverStringUInt64BooleanStringStringIBasicPropertiesByteArray">
            <summary>Sets the stub of RecoveryAwareModel.HandleBasicDeliver(String consumerTag, UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.HandleBasicGetOk(System.UInt64,System.Boolean,System.String,System.String,System.UInt32,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of RecoveryAwareModel.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.HandleBasicGetOkUInt64BooleanStringStringUInt32IBasicPropertiesByteArray">
            <summary>Sets the stub of RecoveryAwareModel.HandleBasicGetOk(UInt64 deliveryTag, Boolean redelivered, String exchange, String routingKey, UInt32 messageCount, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.InitializeStub">
            <summary>Initializes a new instance of type StubRecoveryAwareModel</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnBasicAck(RabbitMQ.Client.Events.BasicAckEventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnBasicAckBasicAckEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicAck(BasicAckEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnBasicNack(RabbitMQ.Client.Events.BasicNackEventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnBasicNackBasicNackEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicNack(BasicNackEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnBasicRecoverOk(System.EventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnBasicRecoverOkEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicRecoverOk(EventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnBasicReturn(RabbitMQ.Client.Events.BasicReturnEventArgs)">
            <summary>Sets the stub of ModelBase.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnBasicReturnBasicReturnEventArgs">
            <summary>Sets the stub of ModelBase.OnBasicReturn(BasicReturnEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnCallbackException(RabbitMQ.Client.Events.CallbackExceptionEventArgs)">
            <summary>Sets the stub of ModelBase.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnCallbackExceptionCallbackExceptionEventArgs">
            <summary>Sets the stub of ModelBase.OnCallbackException(CallbackExceptionEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnFlowControl(RabbitMQ.Client.Events.FlowControlEventArgs)">
            <summary>Sets the stub of ModelBase.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnFlowControlFlowControlEventArgs">
            <summary>Sets the stub of ModelBase.OnFlowControl(FlowControlEventArgs args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnModelShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of ModelBase.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.OnModelShutdownShutdownEventArgs">
            <summary>Sets the stub of ModelBase.OnModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.QueueUnbind(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.QueueUnbindStringStringStringIDictionaryOfStringObject">
            <summary>Sets the stub of Model.QueueUnbind(String queue, String exchange, String routingKey, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.ToString">
            <summary>Sets the stub of ModelBase.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.ToString01">
            <summary>Sets the stub of ModelBase.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.TxCommit">
            <summary>Sets the stub of Model.TxCommit()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.TxCommit01">
            <summary>Sets the stub of Model.TxCommit()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.TxRollback">
            <summary>Sets the stub of Model.TxRollback()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.TxRollback01">
            <summary>Sets the stub of Model.TxRollback()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.TxSelect">
            <summary>Sets the stub of Model.TxSelect()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.TxSelect01">
            <summary>Sets the stub of Model.TxSelect()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicCancel(System.String,System.Boolean)">
            <summary>Sets the stub of Model._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicCancelStringBoolean">
            <summary>Sets the stub of Model._Private_BasicCancel(String consumerTag, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicConsume(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicConsumeStringStringBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_BasicConsume(String queue, String consumerTag, Boolean noLocal, Boolean autoAck, Boolean exclusive, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicGet(System.String,System.Boolean)">
            <summary>Sets the stub of Model._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicGetStringBoolean">
            <summary>Sets the stub of Model._Private_BasicGet(String queue, Boolean autoAck)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicPublish(System.String,System.String,System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of Model._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicPublishStringStringBooleanIBasicPropertiesByteArray">
            <summary>Sets the stub of Model._Private_BasicPublish(String exchange, String routingKey, Boolean mandatory, IBasicProperties basicProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicRecover(System.Boolean)">
            <summary>Sets the stub of Model._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_BasicRecoverBoolean">
            <summary>Sets the stub of Model._Private_BasicRecover(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ChannelClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of Model._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ChannelCloseOk">
            <summary>Sets the stub of Model._Private_ChannelCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ChannelCloseOk01">
            <summary>Sets the stub of Model._Private_ChannelCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ChannelCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of Model._Private_ChannelClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ChannelFlowOk(System.Boolean)">
            <summary>Sets the stub of Model._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ChannelFlowOkBoolean">
            <summary>Sets the stub of Model._Private_ChannelFlowOk(Boolean active)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ChannelOpen(System.String)">
            <summary>Sets the stub of Model._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ChannelOpenString">
            <summary>Sets the stub of Model._Private_ChannelOpen(String outOfBand)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConfirmSelect(System.Boolean)">
            <summary>Sets the stub of Model._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConfirmSelectBoolean">
            <summary>Sets the stub of Model._Private_ConfirmSelect(Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionClose(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>Sets the stub of Model._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionCloseOk">
            <summary>Sets the stub of Model._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionCloseOk01">
            <summary>Sets the stub of Model._Private_ConnectionCloseOk()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionCloseUInt16StringUInt16UInt16">
            <summary>Sets the stub of Model._Private_ConnectionClose(UInt16 replyCode, String replyText, UInt16 classId, UInt16 methodId)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionOpen(System.String,System.String,System.Boolean)">
            <summary>Sets the stub of Model._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionOpenStringStringBoolean">
            <summary>Sets the stub of Model._Private_ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionSecureOk(System.Byte[])">
            <summary>Sets the stub of Model._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionSecureOkByteArray">
            <summary>Sets the stub of Model._Private_ConnectionSecureOk(Byte[] response)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionStartOk(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Byte[],System.String)">
            <summary>Sets the stub of Model._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ConnectionStartOkIDictionaryOfStringObjectStringByteArrayString">
            <summary>Sets the stub of Model._Private_ConnectionStartOk(IDictionary`2&lt;String,Object&gt; clientProperties, String mechanism, Byte[] response, String locale)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ExchangeBind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ExchangeBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_ExchangeBind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ExchangeDeclare(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ExchangeDeclareStringStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_ExchangeDeclare(String exchange, String type, Boolean passive, Boolean durable, Boolean autoDelete, Boolean internal, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ExchangeDelete(System.String,System.Boolean,System.Boolean)">
            <summary>Sets the stub of Model._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ExchangeDeleteStringBooleanBoolean">
            <summary>Sets the stub of Model._Private_ExchangeDelete(String exchange, Boolean ifUnused, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ExchangeUnbind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_ExchangeUnbindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_ExchangeUnbind(String destination, String source, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_QueueBind(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_QueueBindStringStringStringBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_QueueBind(String queue, String exchange, String routingKey, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_QueueDeclare(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Sets the stub of Model._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_QueueDeclareStringBooleanBooleanBooleanBooleanBooleanIDictionaryOfStringObject">
            <summary>Sets the stub of Model._Private_QueueDeclare(String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary`2&lt;String,Object&gt; arguments)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_QueueDelete(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Sets the stub of Model._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_QueueDeleteStringBooleanBooleanBoolean">
            <summary>Sets the stub of Model._Private_QueueDelete(String queue, Boolean ifUnused, Boolean ifEmpty, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_QueuePurge(System.String,System.Boolean)">
            <summary>Sets the stub of Model._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel._Private_QueuePurgeStringBoolean">
            <summary>Sets the stub of Model._Private_QueuePurge(String queue, Boolean nowait)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRecoveryAwareModel.handleAckNack(System.UInt64,System.Boolean,System.Boolean)">
            <summary>Sets the stub of ModelBase.handleAckNack(UInt64 deliveryTag, Boolean multiple, Boolean isNack)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubRpcContinuationQueue">
            <summary>Stub type of RabbitMQ.Client.Impl.RpcContinuationQueue</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRpcContinuationQueue.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRpcContinuationQueue.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubRpcContinuationQueue.InitializeStub">
            <summary>Initializes a new instance of type StubRpcContinuationQueue</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRpcContinuationQueue.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubRpcContinuationQueue.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubSession">
            <summary>Stub type of RabbitMQ.Client.Impl.Session</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSession.#ctor(RabbitMQ.Client.Framing.Impl.Connection,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSession.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSession.HandleFrame(RabbitMQ.Client.Impl.Frame)">
            <summary>Sets the stub of Session.HandleFrame(Frame frame)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSession.HandleFrameFrame">
            <summary>Sets the stub of Session.HandleFrame(Frame frame)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSession.InitializeStub">
            <summary>Initializes a new instance of type StubSession</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSession.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSession.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSession.OnCommandReceived(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSession.OnCommandReceivedCommand">
            <summary>Sets the stub of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSession.OnConnectionShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSession.OnConnectionShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSession.OnSessionShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSession.OnSessionShutdownShutdownEventArgs">
            <summary>Sets the stub of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSession.ToString">
            <summary>Sets the stub of SessionBase.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSession.ToString01">
            <summary>Sets the stub of SessionBase.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSession.Transmit(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of SessionBase.Transmit(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSession.TransmitCommand">
            <summary>Sets the stub of SessionBase.Transmit(Command cmd)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubSessionBase">
            <summary>Stub type of RabbitMQ.Client.Impl.SessionBase</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionBase.#ctor(RabbitMQ.Client.Framing.Impl.Connection,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSessionBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionBase.HandleFrame(RabbitMQ.Client.Impl.Frame)">
            <summary>Sets the stub of SessionBase.HandleFrame(Frame frame)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSessionBase.HandleFrameFrame">
            <summary>Sets the stub of SessionBase.HandleFrame(Frame frame)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionBase.InitializeStub">
            <summary>Initializes a new instance of type StubSessionBase</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSessionBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSessionBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionBase.OnCommandReceived(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSessionBase.OnCommandReceivedCommand">
            <summary>Sets the stub of SessionBase.OnCommandReceived(Command cmd)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionBase.OnConnectionShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSessionBase.OnConnectionShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of SessionBase.OnConnectionShutdown(Object conn, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionBase.OnSessionShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSessionBase.OnSessionShutdownShutdownEventArgs">
            <summary>Sets the stub of SessionBase.OnSessionShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionBase.ToString">
            <summary>Sets the stub of SessionBase.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSessionBase.ToString01">
            <summary>Sets the stub of SessionBase.ToString()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionBase.Transmit(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of SessionBase.Transmit(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSessionBase.TransmitCommand">
            <summary>Sets the stub of SessionBase.Transmit(Command cmd)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubSessionManager">
            <summary>Stub type of RabbitMQ.Client.Impl.SessionManager</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionManager.#ctor(RabbitMQ.Client.Framing.Impl.Connection,System.UInt16)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSessionManager.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSessionManager.InitializeStub">
            <summary>Initializes a new instance of type StubSessionManager</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSessionManager.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSessionManager.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation">
            <summary>Stub type of RabbitMQ.Client.Impl.ShutdownContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.InitializeStub">
            <summary>Initializes a new instance of type StubShutdownContinuation</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.OnConnectionShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of ShutdownContinuation.OnConnectionShutdown(Object sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.OnConnectionShutdownObjectShutdownEventArgs">
            <summary>Sets the stub of ShutdownContinuation.OnConnectionShutdown(Object sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.OnModelShutdown(RabbitMQ.Client.IModel,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of ShutdownContinuation.OnModelShutdown(IModel sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.OnModelShutdownIModelShutdownEventArgs">
            <summary>Sets the stub of ShutdownContinuation.OnModelShutdown(IModel sender, ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.Wait">
            <summary>Sets the stub of ShutdownContinuation.Wait()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubShutdownContinuation.Wait01">
            <summary>Sets the stub of ShutdownContinuation.Wait()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation">
            <summary>Stub type of RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.GetReply">
            <summary>Sets the stub of SimpleBlockingRpcContinuation.GetReply()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.GetReply(System.TimeSpan)">
            <summary>Sets the stub of SimpleBlockingRpcContinuation.GetReply(TimeSpan timeout)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.GetReply01">
            <summary>Sets the stub of SimpleBlockingRpcContinuation.GetReply()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.GetReplyTimeSpan">
            <summary>Sets the stub of SimpleBlockingRpcContinuation.GetReply(TimeSpan timeout)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.HandleCommand(RabbitMQ.Client.Impl.Command)">
            <summary>Sets the stub of SimpleBlockingRpcContinuation.HandleCommand(Command cmd)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.HandleCommandCommand">
            <summary>Sets the stub of SimpleBlockingRpcContinuation.HandleCommand(Command cmd)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.HandleModelShutdown(RabbitMQ.Client.ShutdownEventArgs)">
            <summary>Sets the stub of SimpleBlockingRpcContinuation.HandleModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.HandleModelShutdownShutdownEventArgs">
            <summary>Sets the stub of SimpleBlockingRpcContinuation.HandleModelShutdown(ShutdownEventArgs reason)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.InitializeStub">
            <summary>Initializes a new instance of type StubSimpleBlockingRpcContinuation</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSimpleBlockingRpcContinuation.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubSocketFrameHandler">
            <summary>Stub type of RabbitMQ.Client.Impl.SocketFrameHandler</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSocketFrameHandler.#ctor(RabbitMQ.Client.AmqpTcpEndpoint,System.Func{System.Net.Sockets.AddressFamily,RabbitMQ.Client.ITcpClient},System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSocketFrameHandler.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSocketFrameHandler.InitializeStub">
            <summary>Initializes a new instance of type StubSocketFrameHandler</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSocketFrameHandler.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSocketFrameHandler.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException">
            <summary>Stub type of RabbitMQ.Client.Impl.SoftProtocolException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.#ctor(System.Int32,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubSoftProtocolException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubSoftProtocolException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.InitializeStub">
            <summary>Initializes a new instance of type StubSoftProtocolException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.ReplyCode">
            <summary>Sets the stub of ProtocolException.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.ReplyCodeGet">
            <summary>Sets the stub of ProtocolException.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.ShutdownReason">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.ShutdownReasonGet">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSoftProtocolException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubStreamProperties">
            <summary>Stub type of RabbitMQ.Client.Impl.StreamProperties</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.AppendPropertyDebugStringTo(System.Text.StringBuilder)">
            <summary>Sets the stub of ContentHeaderBase.AppendPropertyDebugStringTo(StringBuilder stringBuilder)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.AppendPropertyDebugStringToStringBuilder">
            <summary>Sets the stub of ContentHeaderBase.AppendPropertyDebugStringTo(StringBuilder stringBuilder)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.AttachBackingFieldToContentEncoding">
            <summary>Attaches delegates to emulate StubStreamProperties.ContentEncoding as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.AttachBackingFieldToContentType">
            <summary>Attaches delegates to emulate StubStreamProperties.ContentType as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.AttachBackingFieldToHeaders">
            <summary>Attaches delegates to emulate StubStreamProperties.Headers as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.AttachBackingFieldToPriority">
            <summary>Attaches delegates to emulate StubStreamProperties.Priority as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.AttachBackingFieldToTimestamp">
            <summary>Attaches delegates to emulate StubStreamProperties.Timestamp as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearContentEncoding">
            <summary>Sets the stub of StreamProperties.ClearContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearContentEncoding01">
            <summary>Sets the stub of StreamProperties.ClearContentEncoding()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearContentType">
            <summary>Sets the stub of StreamProperties.ClearContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearContentType01">
            <summary>Sets the stub of StreamProperties.ClearContentType()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearHeaders">
            <summary>Sets the stub of StreamProperties.ClearHeaders()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearHeaders01">
            <summary>Sets the stub of StreamProperties.ClearHeaders()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearPriority">
            <summary>Sets the stub of StreamProperties.ClearPriority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearPriority01">
            <summary>Sets the stub of StreamProperties.ClearPriority()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearTimestamp">
            <summary>Sets the stub of StreamProperties.ClearTimestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ClearTimestamp01">
            <summary>Sets the stub of StreamProperties.ClearTimestamp()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.Clone">
            <summary>Sets the stub of StreamProperties.Clone()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.Clone01">
            <summary>Sets the stub of StreamProperties.Clone()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ContentEncoding">
            <summary>Sets the stub of StreamProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ContentEncodingGet">
            <summary>Sets the stub of StreamProperties.get_ContentEncoding()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ContentEncodingSetString">
            <summary>Sets the stub of StreamProperties.set_ContentEncoding(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ContentType">
            <summary>Sets the stub of StreamProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ContentTypeGet">
            <summary>Sets the stub of StreamProperties.get_ContentType()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ContentTypeSetString">
            <summary>Sets the stub of StreamProperties.set_ContentType(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.Headers">
            <summary>Sets the stub of StreamProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.HeadersGet">
            <summary>Sets the stub of StreamProperties.get_Headers()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.HeadersSetIDictionaryOfStringObject">
            <summary>Sets the stub of StreamProperties.set_Headers(IDictionary`2&lt;String,Object&gt; value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.InitializeStub">
            <summary>Initializes a new instance of type StubStreamProperties</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsContentEncodingPresent">
            <summary>Sets the stub of StreamProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsContentEncodingPresent01">
            <summary>Sets the stub of StreamProperties.IsContentEncodingPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsContentTypePresent">
            <summary>Sets the stub of StreamProperties.IsContentTypePresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsContentTypePresent01">
            <summary>Sets the stub of StreamProperties.IsContentTypePresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsHeadersPresent">
            <summary>Sets the stub of StreamProperties.IsHeadersPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsHeadersPresent01">
            <summary>Sets the stub of StreamProperties.IsHeadersPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsPriorityPresent">
            <summary>Sets the stub of StreamProperties.IsPriorityPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsPriorityPresent01">
            <summary>Sets the stub of StreamProperties.IsPriorityPresent()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsTimestampPresent">
            <summary>Sets the stub of StreamProperties.IsTimestampPresent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.IsTimestampPresent01">
            <summary>Sets the stub of StreamProperties.IsTimestampPresent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.Priority">
            <summary>Sets the stub of StreamProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.PriorityGet">
            <summary>Sets the stub of StreamProperties.get_Priority()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.PrioritySetByte">
            <summary>Sets the stub of StreamProperties.set_Priority(Byte value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ProtocolClassId">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassId()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ProtocolClassIdGet">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassId()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ProtocolClassName">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ProtocolClassNameGet">
            <summary>Sets the stub of ContentHeaderBase.get_ProtocolClassName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ReadPropertiesFrom(RabbitMQ.Client.Impl.ContentHeaderPropertyReader)">
            <summary>Sets the stub of ContentHeaderBase.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.ReadPropertiesFromContentHeaderPropertyReader">
            <summary>Sets the stub of ContentHeaderBase.ReadPropertiesFrom(ContentHeaderPropertyReader reader)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.Timestamp">
            <summary>Sets the stub of StreamProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.TimestampGet">
            <summary>Sets the stub of StreamProperties.get_Timestamp()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.TimestampSetAmqpTimestamp">
            <summary>Sets the stub of StreamProperties.set_Timestamp(AmqpTimestamp value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.WritePropertiesTo(RabbitMQ.Client.Impl.ContentHeaderPropertyWriter)">
            <summary>Sets the stub of ContentHeaderBase.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubStreamProperties.WritePropertiesToContentHeaderPropertyWriter">
            <summary>Sets the stub of ContentHeaderBase.WritePropertiesTo(ContentHeaderPropertyWriter writer)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubSyntaxError">
            <summary>Stub type of RabbitMQ.Client.Impl.SyntaxError</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.#ctor(System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubSyntaxError.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubSyntaxError.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.InitializeStub">
            <summary>Initializes a new instance of type StubSyntaxError</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.ReplyCode">
            <summary>Sets the stub of SyntaxError.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.ReplyCodeGet">
            <summary>Sets the stub of SyntaxError.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.ShutdownReason">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.ShutdownReasonGet">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubSyntaxError.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException">
            <summary>Stub type of RabbitMQ.Client.Impl.UnexpectedFrameException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.#ctor(RabbitMQ.Client.Impl.Frame)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubUnexpectedFrameException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubUnexpectedFrameException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.InitializeStub">
            <summary>Initializes a new instance of type StubUnexpectedFrameException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.ReplyCode">
            <summary>Sets the stub of UnexpectedFrameException.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.ReplyCodeGet">
            <summary>Sets the stub of UnexpectedFrameException.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.ShutdownReason">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.ShutdownReasonGet">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.ToString">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnexpectedFrameException.ToString01">
            <summary>Sets the stub of Exception.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException">
            <summary>Stub type of RabbitMQ.Client.Impl.UnknownClassOrMethodException</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.#ctor(System.UInt16,System.UInt16)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.AttachBackingFieldToHelpLink">
            <summary>Attaches delegates to emulate StubUnknownClassOrMethodException.HelpLink as a property with a backing field.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.AttachBackingFieldToSource">
            <summary>Attaches delegates to emulate StubUnknownClassOrMethodException.Source as a property with a backing field.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.Data">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.DataGet">
            <summary>Sets the stub of Exception.get_Data()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.GetBaseException">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.GetBaseException01">
            <summary>Sets the stub of Exception.GetBaseException()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Sets the stub of Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.HelpLink">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.HelpLinkGet">
            <summary>Sets the stub of Exception.get_HelpLink()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.HelpLinkSetString">
            <summary>Sets the stub of Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.InitializeStub">
            <summary>Initializes a new instance of type StubUnknownClassOrMethodException</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.Message">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.MessageGet">
            <summary>Sets the stub of Exception.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.ReplyCode">
            <summary>Sets the stub of UnknownClassOrMethodException.get_ReplyCode()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.ReplyCodeGet">
            <summary>Sets the stub of UnknownClassOrMethodException.get_ReplyCode()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.ShutdownReason">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.ShutdownReasonGet">
            <summary>Sets the stub of ProtocolException.get_ShutdownReason()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.Source">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.SourceGet">
            <summary>Sets the stub of Exception.get_Source()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.SourceSetString">
            <summary>Sets the stub of Exception.set_Source(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.StackTrace">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.StackTraceGet">
            <summary>Sets the stub of Exception.get_StackTrace()</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.ToString">
            <summary>Sets the stub of UnknownClassOrMethodException.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Fakes.StubUnknownClassOrMethodException.ToString01">
            <summary>Sets the stub of UnknownClassOrMethodException.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Fakes.StubWireFormatting">
            <summary>Stub type of RabbitMQ.Client.Impl.WireFormatting</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubWireFormatting.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubWireFormatting.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Fakes.StubWireFormatting.InitializeStub">
            <summary>Initializes a new instance of type StubWireFormatting</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubWireFormatting.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Fakes.StubWireFormatting.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource">
            <summary>Shim type of RabbitMQ.Client.Logging.RabbitMqClientEventSource</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.#ctor(RabbitMQ.Client.Logging.RabbitMqClientEventSource)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.AllInstances.ErrorStringException">
            <summary>Sets the shim of RabbitMqClientEventSource.Error(String message, Exception ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.AllInstances.ErrorStringRabbitMqExceptionDetail">
            <summary>Sets the shim of RabbitMqClientEventSource.Error(String message, RabbitMqExceptionDetail ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.AllInstances.InfoString">
            <summary>Sets the shim of RabbitMqClientEventSource.Info(String message)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.AllInstances.WarnString">
            <summary>Sets the shim of RabbitMqClientEventSource.Warn(String message)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.Constructor">
            <summary>Sets the shim of RabbitMqClientEventSource.RabbitMqClientEventSource()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ErrorStringException">
            <summary>Sets the shim of RabbitMqClientEventSource.Error(String message, Exception ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ErrorStringRabbitMqExceptionDetail">
            <summary>Sets the shim of RabbitMqClientEventSource.Error(String message, RabbitMqExceptionDetail ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.InfoString">
            <summary>Sets the shim of RabbitMqClientEventSource.Info(String message)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ShimKeywords">
            <summary>Shim type of RabbitMQ.Client.Logging.RabbitMqClientEventSource+Keywords</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ShimKeywords.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ShimKeywords.#ctor(RabbitMQ.Client.Logging.RabbitMqClientEventSource.Keywords)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ShimKeywords.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ShimKeywords.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ShimKeywords.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ShimKeywords.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.ShimKeywords.Constructor">
            <summary>Sets the shim of Keywords.Keywords()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.StaticConstructor">
            <summary>Sets the shim of RabbitMqClientEventSource.RabbitMqClientEventSource()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqClientEventSource.WarnString">
            <summary>Sets the shim of RabbitMqClientEventSource.Warn(String message)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener">
            <summary>Shim type of RabbitMQ.Client.Logging.RabbitMqConsoleEventListener</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.#ctor(RabbitMQ.Client.Logging.RabbitMqConsoleEventListener)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.AllInstances.Dispose">
            <summary>Sets the shim of RabbitMqConsoleEventListener.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.AllInstances.OnEventWrittenEventWrittenEventArgs">
            <summary>Sets the shim of RabbitMqConsoleEventListener.OnEventWritten(EventWrittenEventArgs eventData)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.Constructor">
            <summary>Sets the shim of RabbitMqConsoleEventListener.RabbitMqConsoleEventListener()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.Dispose">
            <summary>Sets the shim of RabbitMqConsoleEventListener.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqConsoleEventListener.OnEventWrittenEventWrittenEventArgs">
            <summary>Sets the shim of RabbitMqConsoleEventListener.OnEventWritten(EventWrittenEventArgs eventData)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail">
            <summary>Shim type of RabbitMQ.Client.Logging.RabbitMqExceptionDetail</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.#ctor(RabbitMQ.Client.Logging.RabbitMqExceptionDetail)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances.InnerExceptionGet">
            <summary>Sets the shim of RabbitMqExceptionDetail.get_InnerException()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances.InnerExceptionSetString">
            <summary>Sets the shim of RabbitMqExceptionDetail.set_InnerException(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances.MessageGet">
            <summary>Sets the shim of RabbitMqExceptionDetail.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances.MessageSetString">
            <summary>Sets the shim of RabbitMqExceptionDetail.set_Message(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances.StackTraceGet">
            <summary>Sets the shim of RabbitMqExceptionDetail.get_StackTrace()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances.StackTraceSetString">
            <summary>Sets the shim of RabbitMqExceptionDetail.set_StackTrace(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances.ToString01">
            <summary>Sets the shim of RabbitMqExceptionDetail.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances.TypeGet">
            <summary>Sets the shim of RabbitMqExceptionDetail.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.AllInstances.TypeSetString">
            <summary>Sets the shim of RabbitMqExceptionDetail.set_Type(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.ConstructorException">
            <summary>Sets the shim of RabbitMqExceptionDetail.RabbitMqExceptionDetail(Exception ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.ConstructorIDictionaryOfStringObject">
            <summary>Sets the shim of RabbitMqExceptionDetail.RabbitMqExceptionDetail(IDictionary`2&lt;String,Object&gt; ex)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.InnerExceptionGet">
            <summary>Sets the shim of RabbitMqExceptionDetail.get_InnerException()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.InnerExceptionSetString">
            <summary>Sets the shim of RabbitMqExceptionDetail.set_InnerException(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.MessageGet">
            <summary>Sets the shim of RabbitMqExceptionDetail.get_Message()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.MessageSetString">
            <summary>Sets the shim of RabbitMqExceptionDetail.set_Message(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.StackTraceGet">
            <summary>Sets the shim of RabbitMqExceptionDetail.get_StackTrace()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.StackTraceSetString">
            <summary>Sets the shim of RabbitMqExceptionDetail.set_StackTrace(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.ToString">
            <summary>Sets the shim of RabbitMqExceptionDetail.ToString()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.TypeGet">
            <summary>Sets the shim of RabbitMqExceptionDetail.get_Type()</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.ShimRabbitMqExceptionDetail.TypeSetString">
            <summary>Sets the shim of RabbitMqExceptionDetail.set_Type(String value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.Logging.Fakes.StubRabbitMqExceptionDetail">
            <summary>Stub type of RabbitMQ.Client.Logging.RabbitMqExceptionDetail</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.StubRabbitMqExceptionDetail.#ctor(System.Exception)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.StubRabbitMqExceptionDetail.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.StubRabbitMqExceptionDetail.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.StubRabbitMqExceptionDetail.InitializeStub">
            <summary>Initializes a new instance of type StubRabbitMqExceptionDetail</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.StubRabbitMqExceptionDetail.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Logging.Fakes.StubRabbitMqExceptionDetail.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Logging.Fakes.StubRabbitMqExceptionDetail.ToString">
            <summary>Sets the stub of RabbitMqExceptionDetail.ToString()</summary>
        </member>
        <member name="F:RabbitMQ.Client.Logging.Fakes.StubRabbitMqExceptionDetail.ToString01">
            <summary>Sets the stub of RabbitMqExceptionDetail.ToString()</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient">
            <summary>Shim type of RabbitMQ.Client.MessagePatterns.SimpleRpcClient</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.#ctor(RabbitMQ.Client.MessagePatterns.SimpleRpcClient)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AddressGet">
            <summary>Sets the shim of SimpleRpcClient.get_Address()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AddressSetPublicationAddress">
            <summary>Sets the shim of SimpleRpcClient.set_Address(PublicationAddress value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.AddressGet">
            <summary>Sets the shim of SimpleRpcClient.get_Address()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.AddressSetPublicationAddress">
            <summary>Sets the shim of SimpleRpcClient.set_Address(PublicationAddress value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.CallByteArray">
            <summary>Sets the shim of SimpleRpcClient.Call(Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.CallIBasicPropertiesByteArray">
            <summary>Sets the shim of SimpleRpcClient.Call(IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.CallIBasicPropertiesByteArrayIBasicPropertiesOut">
            <summary>Sets the shim of SimpleRpcClient.Call(IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.CallObjectArray">
            <summary>Sets the shim of SimpleRpcClient.Call(Object[] args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.CastIBasicPropertiesByteArray">
            <summary>Sets the shim of SimpleRpcClient.Cast(IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.Close">
            <summary>Sets the shim of SimpleRpcClient.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.DisconnectedAddEventHandler">
            <summary>Sets the shim of SimpleRpcClient.add_Disconnected(EventHandler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.DisconnectedRemoveEventHandler">
            <summary>Sets the shim of SimpleRpcClient.remove_Disconnected(EventHandler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.EnsureSubscription">
            <summary>Sets the shim of SimpleRpcClient.EnsureSubscription()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.ModelGet">
            <summary>Sets the shim of SimpleRpcClient.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.ModelSetIModel">
            <summary>Sets the shim of SimpleRpcClient.set_Model(IModel value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.OnDisconnected">
            <summary>Sets the shim of SimpleRpcClient.OnDisconnected()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.OnTimedOut">
            <summary>Sets the shim of SimpleRpcClient.OnTimedOut()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.RetrieveReplyString">
            <summary>Sets the shim of SimpleRpcClient.RetrieveReply(String correlationId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.SubscriptionGet">
            <summary>Sets the shim of SimpleRpcClient.get_Subscription()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.SubscriptionSetSubscription">
            <summary>Sets the shim of SimpleRpcClient.set_Subscription(Subscription value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.SystemIDisposableDispose">
            <summary>Sets the shim of SimpleRpcClient.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.TimedOutAddEventHandler">
            <summary>Sets the shim of SimpleRpcClient.add_TimedOut(EventHandler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.TimedOutRemoveEventHandler">
            <summary>Sets the shim of SimpleRpcClient.remove_TimedOut(EventHandler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.TimeoutMillisecondsGet">
            <summary>Sets the shim of SimpleRpcClient.get_TimeoutMilliseconds()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.AllInstances.TimeoutMillisecondsSetInt32">
            <summary>Sets the shim of SimpleRpcClient.set_TimeoutMilliseconds(Int32 value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.CallByteArray">
            <summary>Sets the shim of SimpleRpcClient.Call(Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.CallIBasicPropertiesByteArray">
            <summary>Sets the shim of SimpleRpcClient.Call(IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.CallIBasicPropertiesByteArrayIBasicPropertiesOut">
            <summary>Sets the shim of SimpleRpcClient.Call(IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.CallObjectArray">
            <summary>Sets the shim of SimpleRpcClient.Call(Object[] args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.CastIBasicPropertiesByteArray">
            <summary>Sets the shim of SimpleRpcClient.Cast(IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.Close">
            <summary>Sets the shim of SimpleRpcClient.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.ConstructorIModel">
            <summary>Sets the shim of SimpleRpcClient.SimpleRpcClient(IModel model)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.ConstructorIModelPublicationAddress">
            <summary>Sets the shim of SimpleRpcClient.SimpleRpcClient(IModel model, PublicationAddress address)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.ConstructorIModelString">
            <summary>Sets the shim of SimpleRpcClient.SimpleRpcClient(IModel model, String queueName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.ConstructorIModelStringStringString">
            <summary>Sets the shim of SimpleRpcClient.SimpleRpcClient(IModel model, String exchange, String exchangeType, String routingKey)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.DisconnectedAddEventHandler">
            <summary>Sets the shim of SimpleRpcClient.add_Disconnected(EventHandler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.DisconnectedRemoveEventHandler">
            <summary>Sets the shim of SimpleRpcClient.remove_Disconnected(EventHandler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.EnsureSubscription">
            <summary>Sets the shim of SimpleRpcClient.EnsureSubscription()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.ModelGet">
            <summary>Sets the shim of SimpleRpcClient.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.ModelSetIModel">
            <summary>Sets the shim of SimpleRpcClient.set_Model(IModel value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.OnDisconnected">
            <summary>Sets the shim of SimpleRpcClient.OnDisconnected()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.OnTimedOut">
            <summary>Sets the shim of SimpleRpcClient.OnTimedOut()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.RetrieveReplyString">
            <summary>Sets the shim of SimpleRpcClient.RetrieveReply(String correlationId)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.SubscriptionGet">
            <summary>Sets the shim of SimpleRpcClient.get_Subscription()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.SubscriptionSetSubscription">
            <summary>Sets the shim of SimpleRpcClient.set_Subscription(Subscription value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.SystemIDisposableDispose">
            <summary>Sets the shim of SimpleRpcClient.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.TimedOutAddEventHandler">
            <summary>Sets the shim of SimpleRpcClient.add_TimedOut(EventHandler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.TimedOutRemoveEventHandler">
            <summary>Sets the shim of SimpleRpcClient.remove_TimedOut(EventHandler value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.TimeoutMillisecondsGet">
            <summary>Sets the shim of SimpleRpcClient.get_TimeoutMilliseconds()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcClient.TimeoutMillisecondsSetInt32">
            <summary>Sets the shim of SimpleRpcClient.set_TimeoutMilliseconds(Int32 value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer">
            <summary>Shim type of RabbitMQ.Client.MessagePatterns.SimpleRpcServer</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.#ctor(RabbitMQ.Client.MessagePatterns.SimpleRpcServer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.Close">
            <summary>Sets the shim of SimpleRpcServer.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.HandleCallBooleanIBasicPropertiesByteArrayIBasicPropertiesOut">
            <summary>Sets the shim of SimpleRpcServer.HandleCall(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.HandleCastBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of SimpleRpcServer.HandleCast(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.HandleSimpleCallBooleanIBasicPropertiesByteArrayIBasicPropertiesOut">
            <summary>Sets the shim of SimpleRpcServer.HandleSimpleCall(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.HandleSimpleCastBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of SimpleRpcServer.HandleSimpleCast(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.HandleStreamMessageCallIStreamMessageBuilderBooleanIBasicPropertiesObjectArray">
            <summary>Sets the shim of SimpleRpcServer.HandleStreamMessageCall(IStreamMessageBuilder replyWriter, Boolean isRedelivered, IBasicProperties requestProperties, Object[] args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.MainLoop">
            <summary>Sets the shim of SimpleRpcServer.MainLoop()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.ProcessRequestBasicDeliverEventArgs">
            <summary>Sets the shim of SimpleRpcServer.ProcessRequest(BasicDeliverEventArgs evt)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.SetTransactional">
            <summary>Sets the shim of SimpleRpcServer.SetTransactional()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.SystemIDisposableDispose">
            <summary>Sets the shim of SimpleRpcServer.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.TransactionalGet">
            <summary>Sets the shim of SimpleRpcServer.get_Transactional()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.AllInstances.TransactionalSetBoolean">
            <summary>Sets the shim of SimpleRpcServer.set_Transactional(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.Close">
            <summary>Sets the shim of SimpleRpcServer.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.ConstructorSubscription">
            <summary>Sets the shim of SimpleRpcServer.SimpleRpcServer(Subscription subscription)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.HandleCallBooleanIBasicPropertiesByteArrayIBasicPropertiesOut">
            <summary>Sets the shim of SimpleRpcServer.HandleCall(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.HandleCastBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of SimpleRpcServer.HandleCast(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.HandleSimpleCallBooleanIBasicPropertiesByteArrayIBasicPropertiesOut">
            <summary>Sets the shim of SimpleRpcServer.HandleSimpleCall(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.HandleSimpleCastBooleanIBasicPropertiesByteArray">
            <summary>Sets the shim of SimpleRpcServer.HandleSimpleCast(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.HandleStreamMessageCallIStreamMessageBuilderBooleanIBasicPropertiesObjectArray">
            <summary>Sets the shim of SimpleRpcServer.HandleStreamMessageCall(IStreamMessageBuilder replyWriter, Boolean isRedelivered, IBasicProperties requestProperties, Object[] args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.MainLoop">
            <summary>Sets the shim of SimpleRpcServer.MainLoop()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.ProcessRequestBasicDeliverEventArgs">
            <summary>Sets the shim of SimpleRpcServer.ProcessRequest(BasicDeliverEventArgs evt)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.SetTransactional">
            <summary>Sets the shim of SimpleRpcServer.SetTransactional()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.SystemIDisposableDispose">
            <summary>Sets the shim of SimpleRpcServer.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.TransactionalGet">
            <summary>Sets the shim of SimpleRpcServer.get_Transactional()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSimpleRpcServer.TransactionalSetBoolean">
            <summary>Sets the shim of SimpleRpcServer.set_Transactional(Boolean value)</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription">
            <summary>Shim type of RabbitMQ.Client.MessagePatterns.Subscription</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.#ctor(RabbitMQ.Client.MessagePatterns.Subscription)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.Ack">
            <summary>Sets the shim of Subscription.Ack()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AckBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.Ack(BasicDeliverEventArgs evt)</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.Ack">
            <summary>Sets the shim of Subscription.Ack()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.AckBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.Ack(BasicDeliverEventArgs evt)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.AutoAckGet">
            <summary>Sets the shim of Subscription.get_AutoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.AutoAckSetBoolean">
            <summary>Sets the shim of Subscription.set_AutoAck(Boolean value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.Close">
            <summary>Sets the shim of Subscription.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.ConsumerGet">
            <summary>Sets the shim of Subscription.get_Consumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.ConsumerTagGet">
            <summary>Sets the shim of Subscription.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.ConsumerTagSetString">
            <summary>Sets the shim of Subscription.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.CurrentSystemCollectionsIEnumeratorget">
            <summary>Sets the shim of Subscription.System.Collections.IEnumerator.get_Current()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.HandleConsumerCancelledObjectConsumerEventArgs">
            <summary>Sets the shim of Subscription.HandleConsumerCancelled(Object sender, ConsumerEventArgs e)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.LatestEventGet">
            <summary>Sets the shim of Subscription.get_LatestEvent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.LatestEventSetBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.set_LatestEvent(BasicDeliverEventArgs value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.ModelGet">
            <summary>Sets the shim of Subscription.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.ModelSetIModel">
            <summary>Sets the shim of Subscription.set_Model(IModel value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.MutateLatestEventBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.MutateLatestEvent(BasicDeliverEventArgs value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.NackBasicDeliverEventArgsBooleanBoolean">
            <summary>Sets the shim of Subscription.Nack(BasicDeliverEventArgs evt, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.NackBoolean">
            <summary>Sets the shim of Subscription.Nack(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.NackBooleanBoolean">
            <summary>Sets the shim of Subscription.Nack(Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.Next">
            <summary>Sets the shim of Subscription.Next()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.NextInt32BasicDeliverEventArgsOut">
            <summary>Sets the shim of Subscription.Next(Int32 millisecondsTimeout, BasicDeliverEventArgs&amp; result)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.QueueNameGet">
            <summary>Sets the shim of Subscription.get_QueueName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.QueueNameSetString">
            <summary>Sets the shim of Subscription.set_QueueName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of Subscription.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.SystemCollectionsIEnumeratorMoveNext">
            <summary>Sets the shim of Subscription.System.Collections.IEnumerator.MoveNext()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.SystemCollectionsIEnumeratorReset">
            <summary>Sets the shim of Subscription.System.Collections.IEnumerator.Reset()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances.SystemIDisposableDispose">
            <summary>Sets the shim of Subscription.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances._ctorb__5_0ObjectBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.&lt;.ctor&gt;b__5_0(Object sender, BasicDeliverEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AllInstances._ctorb__6_0ObjectBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.&lt;.ctor&gt;b__6_0(Object sender, BasicDeliverEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AutoAckGet">
            <summary>Sets the shim of Subscription.get_AutoAck()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.AutoAckSetBoolean">
            <summary>Sets the shim of Subscription.set_AutoAck(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.Bind(RabbitMQ.Client.MessagePatterns.ISubscription)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.Bind(System.Collections.IEnumerator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.Close">
            <summary>Sets the shim of Subscription.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.ConstructorIModelString">
            <summary>Sets the shim of Subscription.Subscription(IModel model, String queueName)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.ConstructorIModelStringBoolean">
            <summary>Sets the shim of Subscription.Subscription(IModel model, String queueName, Boolean autoAck)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.ConstructorIModelStringBooleanString">
            <summary>Sets the shim of Subscription.Subscription(IModel model, String queueName, Boolean autoAck, String consumerTag)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.ConsumerGet">
            <summary>Sets the shim of Subscription.get_Consumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.ConsumerTagGet">
            <summary>Sets the shim of Subscription.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.ConsumerTagSetString">
            <summary>Sets the shim of Subscription.set_ConsumerTag(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.CurrentSystemCollectionsIEnumeratorget">
            <summary>Sets the shim of Subscription.System.Collections.IEnumerator.get_Current()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.HandleConsumerCancelledObjectConsumerEventArgs">
            <summary>Sets the shim of Subscription.HandleConsumerCancelled(Object sender, ConsumerEventArgs e)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.LatestEventGet">
            <summary>Sets the shim of Subscription.get_LatestEvent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.LatestEventSetBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.set_LatestEvent(BasicDeliverEventArgs value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.ModelGet">
            <summary>Sets the shim of Subscription.get_Model()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.ModelSetIModel">
            <summary>Sets the shim of Subscription.set_Model(IModel value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.MutateLatestEventBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.MutateLatestEvent(BasicDeliverEventArgs value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.NackBasicDeliverEventArgsBooleanBoolean">
            <summary>Sets the shim of Subscription.Nack(BasicDeliverEventArgs evt, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.NackBoolean">
            <summary>Sets the shim of Subscription.Nack(Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.NackBooleanBoolean">
            <summary>Sets the shim of Subscription.Nack(Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.Next">
            <summary>Sets the shim of Subscription.Next()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.NextInt32BasicDeliverEventArgsOut">
            <summary>Sets the shim of Subscription.Next(Int32 millisecondsTimeout, BasicDeliverEventArgs&amp; result)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.QueueNameGet">
            <summary>Sets the shim of Subscription.get_QueueName()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.QueueNameSetString">
            <summary>Sets the shim of Subscription.set_QueueName(String value)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of Subscription.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.SystemCollectionsIEnumeratorMoveNext">
            <summary>Sets the shim of Subscription.System.Collections.IEnumerator.MoveNext()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.SystemCollectionsIEnumeratorReset">
            <summary>Sets the shim of Subscription.System.Collections.IEnumerator.Reset()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription.SystemIDisposableDispose">
            <summary>Sets the shim of Subscription.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription._ctorb__5_0ObjectBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.&lt;.ctor&gt;b__5_0(Object sender, BasicDeliverEventArgs args)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.ShimSubscription._ctorb__6_0ObjectBasicDeliverEventArgs">
            <summary>Sets the shim of Subscription.&lt;.ctor&gt;b__6_0(Object sender, BasicDeliverEventArgs args)</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription">
            <summary>Stub type of RabbitMQ.Client.MessagePatterns.ISubscription</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.#ctor">
            <summary>Initializes a new instance of type StubISubscription</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.Ack">
            <summary>Sets the stub of ISubscription.Ack()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.AckBasicDeliverEventArgs">
            <summary>Sets the stub of ISubscription.Ack(BasicDeliverEventArgs evt)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#AutoAck">
            <summary>Sets the stub of ISubscription.get_AutoAck()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.AutoAckGet">
            <summary>Sets the stub of ISubscription.get_AutoAck()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.Close">
            <summary>Sets the stub of ISubscription.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Consumer">
            <summary>Sets the stub of ISubscription.get_Consumer()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.ConsumerGet">
            <summary>Sets the stub of ISubscription.get_Consumer()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#ConsumerTag">
            <summary>Sets the stub of ISubscription.get_ConsumerTag()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.ConsumerTagGet">
            <summary>Sets the stub of ISubscription.get_ConsumerTag()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.System#Collections#IEnumerator#Current">
            <summary>Sets the stub of IEnumerator.get_Current()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.CurrentGet">
            <summary>Sets the stub of IEnumerator.get_Current()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.GetEnumerator">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#LatestEvent">
            <summary>Sets the stub of ISubscription.get_LatestEvent()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.LatestEventGet">
            <summary>Sets the stub of ISubscription.get_LatestEvent()</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Model">
            <summary>Sets the stub of ISubscription.get_Model()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.ModelGet">
            <summary>Sets the stub of ISubscription.get_Model()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.MoveNext">
            <summary>Sets the stub of IEnumerator.MoveNext()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.NackBasicDeliverEventArgsBooleanBoolean">
            <summary>Sets the stub of ISubscription.Nack(BasicDeliverEventArgs evt, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.NackBoolean">
            <summary>Sets the stub of ISubscription.Nack(Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.NackBooleanBoolean">
            <summary>Sets the stub of ISubscription.Nack(Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.Next">
            <summary>Sets the stub of ISubscription.Next()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.NextInt32BasicDeliverEventArgsOut">
            <summary>Sets the stub of ISubscription.Next(Int32 millisecondsTimeout, BasicDeliverEventArgs&amp; result)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#QueueName">
            <summary>Sets the stub of ISubscription.get_QueueName()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.QueueNameGet">
            <summary>Sets the stub of ISubscription.get_QueueName()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Ack">
            <summary>Sets the stub of ISubscription.Ack()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Ack(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>Sets the stub of ISubscription.Ack(BasicDeliverEventArgs evt)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Close">
            <summary>Sets the stub of ISubscription.Close()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Nack(System.Boolean)">
            <summary>Sets the stub of ISubscription.Nack(Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Nack(System.Boolean,System.Boolean)">
            <summary>Sets the stub of ISubscription.Nack(Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Nack(RabbitMQ.Client.Events.BasicDeliverEventArgs,System.Boolean,System.Boolean)">
            <summary>Sets the stub of ISubscription.Nack(BasicDeliverEventArgs evt, Boolean multiple, Boolean requeue)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Next(System.Int32,RabbitMQ.Client.Events.BasicDeliverEventArgs@)">
            <summary>Sets the stub of ISubscription.Next(Int32 millisecondsTimeout, BasicDeliverEventArgs&amp; result)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.RabbitMQ#Client#MessagePatterns#ISubscription#Next">
            <summary>Sets the stub of ISubscription.Next()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.Reset">
            <summary>Sets the stub of IEnumerator.Reset()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.System#Collections#IEnumerator#MoveNext">
            <summary>Sets the stub of IEnumerator.MoveNext()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.System#Collections#IEnumerator#Reset">
            <summary>Sets the stub of IEnumerator.Reset()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubISubscription.System#IDisposable#Dispose">
            <summary>Sets the stub of IDisposable.Dispose()</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient">
            <summary>Stub type of RabbitMQ.Client.MessagePatterns.SimpleRpcClient</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.#ctor(RabbitMQ.Client.IModel)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.#ctor(RabbitMQ.Client.IModel,RabbitMQ.Client.PublicationAddress)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.#ctor(RabbitMQ.Client.IModel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.#ctor(RabbitMQ.Client.IModel,System.String,System.String,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.Call(RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of SimpleRpcClient.Call(IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.Call(System.Object[])">
            <summary>Sets the stub of SimpleRpcClient.Call(Object[] args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.Call(System.Byte[])">
            <summary>Sets the stub of SimpleRpcClient.Call(Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.Call(RabbitMQ.Client.IBasicProperties,System.Byte[],RabbitMQ.Client.IBasicProperties@)">
            <summary>Sets the stub of SimpleRpcClient.Call(IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.CallByteArray">
            <summary>Sets the stub of SimpleRpcClient.Call(Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.CallIBasicPropertiesByteArray">
            <summary>Sets the stub of SimpleRpcClient.Call(IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.CallIBasicPropertiesByteArrayIBasicPropertiesOut">
            <summary>Sets the stub of SimpleRpcClient.Call(IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.CallObjectArray">
            <summary>Sets the stub of SimpleRpcClient.Call(Object[] args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.Cast(RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of SimpleRpcClient.Cast(IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.CastIBasicPropertiesByteArray">
            <summary>Sets the stub of SimpleRpcClient.Cast(IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.EnsureSubscription">
            <summary>Sets the stub of SimpleRpcClient.EnsureSubscription()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.EnsureSubscription01">
            <summary>Sets the stub of SimpleRpcClient.EnsureSubscription()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.InitializeStub">
            <summary>Initializes a new instance of type StubSimpleRpcClient</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.OnDisconnected">
            <summary>Sets the stub of SimpleRpcClient.OnDisconnected()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.OnDisconnected01">
            <summary>Sets the stub of SimpleRpcClient.OnDisconnected()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.OnTimedOut">
            <summary>Sets the stub of SimpleRpcClient.OnTimedOut()</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.OnTimedOut01">
            <summary>Sets the stub of SimpleRpcClient.OnTimedOut()</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.RetrieveReply(System.String)">
            <summary>Sets the stub of SimpleRpcClient.RetrieveReply(String correlationId)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcClient.RetrieveReplyString">
            <summary>Sets the stub of SimpleRpcClient.RetrieveReply(String correlationId)</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer">
            <summary>Stub type of RabbitMQ.Client.MessagePatterns.SimpleRpcServer</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.#ctor(RabbitMQ.Client.MessagePatterns.Subscription)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleCall(System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[],RabbitMQ.Client.IBasicProperties@)">
            <summary>Sets the stub of SimpleRpcServer.HandleCall(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleCallBooleanIBasicPropertiesByteArrayIBasicPropertiesOut">
            <summary>Sets the stub of SimpleRpcServer.HandleCall(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleCast(System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of SimpleRpcServer.HandleCast(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleCastBooleanIBasicPropertiesByteArray">
            <summary>Sets the stub of SimpleRpcServer.HandleCast(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleSimpleCall(System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[],RabbitMQ.Client.IBasicProperties@)">
            <summary>Sets the stub of SimpleRpcServer.HandleSimpleCall(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleSimpleCallBooleanIBasicPropertiesByteArrayIBasicPropertiesOut">
            <summary>Sets the stub of SimpleRpcServer.HandleSimpleCall(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body, IBasicProperties&amp; replyProperties)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleSimpleCast(System.Boolean,RabbitMQ.Client.IBasicProperties,System.Byte[])">
            <summary>Sets the stub of SimpleRpcServer.HandleSimpleCast(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleSimpleCastBooleanIBasicPropertiesByteArray">
            <summary>Sets the stub of SimpleRpcServer.HandleSimpleCast(Boolean isRedelivered, IBasicProperties requestProperties, Byte[] body)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleStreamMessageCall(RabbitMQ.Client.Content.IStreamMessageBuilder,System.Boolean,RabbitMQ.Client.IBasicProperties,System.Object[])">
            <summary>Sets the stub of SimpleRpcServer.HandleStreamMessageCall(IStreamMessageBuilder replyWriter, Boolean isRedelivered, IBasicProperties requestProperties, Object[] args)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.HandleStreamMessageCallIStreamMessageBuilderBooleanIBasicPropertiesObjectArray">
            <summary>Sets the stub of SimpleRpcServer.HandleStreamMessageCall(IStreamMessageBuilder replyWriter, Boolean isRedelivered, IBasicProperties requestProperties, Object[] args)</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.InitializeStub">
            <summary>Initializes a new instance of type StubSimpleRpcServer</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.ProcessRequest(RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>Sets the stub of SimpleRpcServer.ProcessRequest(BasicDeliverEventArgs evt)</summary>
        </member>
        <member name="F:RabbitMQ.Client.MessagePatterns.Fakes.StubSimpleRpcServer.ProcessRequestBasicDeliverEventArgs">
            <summary>Sets the stub of SimpleRpcServer.ProcessRequest(BasicDeliverEventArgs evt)</summary>
        </member>
        <member name="T:RabbitMQ.Client.MessagePatterns.Fakes.StubSubscription">
            <summary>Stub type of RabbitMQ.Client.MessagePatterns.Subscription</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSubscription.#ctor(RabbitMQ.Client.IModel,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSubscription.#ctor(RabbitMQ.Client.IModel,System.String,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSubscription.#ctor(RabbitMQ.Client.IModel,System.String,System.Boolean,System.String)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubSubscription.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Client.MessagePatterns.Fakes.StubSubscription.InitializeStub">
            <summary>Initializes a new instance of type StubSubscription</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubSubscription.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Client.MessagePatterns.Fakes.StubSubscription.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimBlockingCell">
            <summary>Shim type of RabbitMQ.Util.BlockingCell</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimBlockingCell.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimBlockingCell.#ctor(RabbitMQ.Util.BlockingCell)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimBlockingCell.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.AllInstances.GetValueInt32">
            <summary>Sets the shim of BlockingCell.GetValue(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.AllInstances.GetValueTimeSpan">
            <summary>Sets the shim of BlockingCell.GetValue(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.AllInstances.ValueGet">
            <summary>Sets the shim of BlockingCell.get_Value()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.AllInstances.ValueSetObject">
            <summary>Sets the shim of BlockingCell.set_Value(Object value)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimBlockingCell.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimBlockingCell.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.Constructor">
            <summary>Sets the shim of BlockingCell.BlockingCell()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.GetValueInt32">
            <summary>Sets the shim of BlockingCell.GetValue(Int32 timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.GetValueTimeSpan">
            <summary>Sets the shim of BlockingCell.GetValue(TimeSpan timeout)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.ValueGet">
            <summary>Sets the shim of BlockingCell.get_Value()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.ValueSetObject">
            <summary>Sets the shim of BlockingCell.set_Value(Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimBlockingCell.validatedTimeoutInt32">
            <summary>Sets the shim of BlockingCell.validatedTimeout(Int32 timeout)</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimDebugUtil">
            <summary>Shim type of RabbitMQ.Util.DebugUtil</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimDebugUtil.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimDebugUtil.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimDebugUtil.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimDebugUtil.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimDebugUtil.DumpByteArray">
            <summary>Sets the shim of DebugUtil.Dump(Byte[] bytes)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimDebugUtil.DumpByteArrayTextWriter">
            <summary>Sets the shim of DebugUtil.Dump(Byte[] bytes, TextWriter writer)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimDebugUtil.DumpKeyValueStringObjectTextWriterInt32">
            <summary>Sets the shim of DebugUtil.DumpKeyValue(String key, Object value, TextWriter writer, Int32 indent)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimDebugUtil.DumpPropertiesObjectTextWriterInt32">
            <summary>Sets the shim of DebugUtil.DumpProperties(Object value, TextWriter writer, Int32 indent)</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimEither">
            <summary>Shim type of RabbitMQ.Util.Either</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimEither.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimEither.#ctor(RabbitMQ.Util.Either)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimEither.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.AllInstances.AlternativeGet">
            <summary>Sets the shim of Either.get_Alternative()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.AllInstances.AlternativeSetEitherAlternative">
            <summary>Sets the shim of Either.set_Alternative(EitherAlternative value)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.AllInstances.ValueGet">
            <summary>Sets the shim of Either.get_Value()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.AllInstances.ValueSetObject">
            <summary>Sets the shim of Either.set_Value(Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.AlternativeGet">
            <summary>Sets the shim of Either.get_Alternative()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.AlternativeSetEitherAlternative">
            <summary>Sets the shim of Either.set_Alternative(EitherAlternative value)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimEither.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimEither.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.ConstructorEitherAlternativeObject">
            <summary>Sets the shim of Either.Either(EitherAlternative alternative, Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.LeftObject">
            <summary>Sets the shim of Either.Left(Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.RightObject">
            <summary>Sets the shim of Either.Right(Object value)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.ValueGet">
            <summary>Sets the shim of Either.get_Value()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimEither.ValueSetObject">
            <summary>Sets the shim of Either.set_Value(Object value)</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimIntAllocator">
            <summary>Shim type of RabbitMQ.Util.IntAllocator</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimIntAllocator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimIntAllocator.#ctor(RabbitMQ.Util.IntAllocator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimIntAllocator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.AllInstances.Allocate">
            <summary>Sets the shim of IntAllocator.Allocate()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.AllInstances.Flush">
            <summary>Sets the shim of IntAllocator.Flush()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.AllInstances.FreeInt32">
            <summary>Sets the shim of IntAllocator.Free(Int32 id)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.AllInstances.ReserveInt32">
            <summary>Sets the shim of IntAllocator.Reserve(Int32 id)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.Allocate">
            <summary>Sets the shim of IntAllocator.Allocate()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimIntAllocator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimIntAllocator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.ConstructorInt32Int32">
            <summary>Sets the shim of IntAllocator.IntAllocator(Int32 start, Int32 end)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.Flush">
            <summary>Sets the shim of IntAllocator.Flush()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.FreeInt32">
            <summary>Sets the shim of IntAllocator.Free(Int32 id)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.ReserveInt32">
            <summary>Sets the shim of IntAllocator.Reserve(Int32 id)</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList">
            <summary>Shim type of RabbitMQ.Util.IntAllocator+IntervalList</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList.#ctor(RabbitMQ.Util.IntAllocator.IntervalList)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList.ConstructorInt32Int32">
            <summary>Sets the shim of IntervalList.IntervalList(Int32 start, Int32 end)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList.FromArrayInt32ArrayInt32">
            <summary>Sets the shim of IntervalList.FromArray(Int32[] xs, Int32 length)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimIntAllocator.ShimIntervalList.MergeIntAllocatorIntervalListIntAllocatorIntervalList">
            <summary>Sets the shim of IntervalList.Merge(IntervalList x, IntervalList y)</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader">
            <summary>Shim type of RabbitMQ.Util.NetworkBinaryReader</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.#ctor(RabbitMQ.Util.NetworkBinaryReader)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.AllInstances.ReadDouble">
            <summary>Sets the shim of NetworkBinaryReader.ReadDouble()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.AllInstances.ReadInt16">
            <summary>Sets the shim of NetworkBinaryReader.ReadInt16()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.AllInstances.ReadInt32">
            <summary>Sets the shim of NetworkBinaryReader.ReadInt32()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.AllInstances.ReadInt64">
            <summary>Sets the shim of NetworkBinaryReader.ReadInt64()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.AllInstances.ReadSingle">
            <summary>Sets the shim of NetworkBinaryReader.ReadSingle()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.AllInstances.ReadUInt16">
            <summary>Sets the shim of NetworkBinaryReader.ReadUInt16()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.AllInstances.ReadUInt32">
            <summary>Sets the shim of NetworkBinaryReader.ReadUInt32()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.AllInstances.ReadUInt64">
            <summary>Sets the shim of NetworkBinaryReader.ReadUInt64()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.ConstructorStream">
            <summary>Sets the shim of NetworkBinaryReader.NetworkBinaryReader(Stream input)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.ReadDouble">
            <summary>Sets the shim of NetworkBinaryReader.ReadDouble()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.ReadInt16">
            <summary>Sets the shim of NetworkBinaryReader.ReadInt16()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.ReadInt32">
            <summary>Sets the shim of NetworkBinaryReader.ReadInt32()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.ReadInt64">
            <summary>Sets the shim of NetworkBinaryReader.ReadInt64()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.ReadSingle">
            <summary>Sets the shim of NetworkBinaryReader.ReadSingle()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.ReadUInt16">
            <summary>Sets the shim of NetworkBinaryReader.ReadUInt16()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.ReadUInt32">
            <summary>Sets the shim of NetworkBinaryReader.ReadUInt32()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.ReadUInt64">
            <summary>Sets the shim of NetworkBinaryReader.ReadUInt64()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryReader.TemporaryBinaryReaderByteArray">
            <summary>Sets the shim of NetworkBinaryReader.TemporaryBinaryReader(Byte[] bytes)</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter">
            <summary>Shim type of RabbitMQ.Util.NetworkBinaryWriter</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.#ctor(RabbitMQ.Util.NetworkBinaryWriter)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.AllInstances.WriteDouble">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Double d)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.AllInstances.WriteInt16">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Int16 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.AllInstances.WriteInt32">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Int32 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.AllInstances.WriteInt64">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Int64 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.AllInstances.WriteSingle">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Single f)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.AllInstances.WriteUInt16">
            <summary>Sets the shim of NetworkBinaryWriter.Write(UInt16 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.AllInstances.WriteUInt32">
            <summary>Sets the shim of NetworkBinaryWriter.Write(UInt32 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.AllInstances.WriteUInt64">
            <summary>Sets the shim of NetworkBinaryWriter.Write(UInt64 i)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.ConstructorStream">
            <summary>Sets the shim of NetworkBinaryWriter.NetworkBinaryWriter(Stream output)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.TemporaryBinaryWriterInt32">
            <summary>Sets the shim of NetworkBinaryWriter.TemporaryBinaryWriter(Int32 initialSize)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.TemporaryContentsBinaryWriter">
            <summary>Sets the shim of NetworkBinaryWriter.TemporaryContents(BinaryWriter w)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.WriteDouble">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Double d)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.WriteInt16">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Int16 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.WriteInt32">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Int32 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.WriteInt64">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Int64 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.WriteSingle">
            <summary>Sets the shim of NetworkBinaryWriter.Write(Single f)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.WriteUInt16">
            <summary>Sets the shim of NetworkBinaryWriter.Write(UInt16 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.WriteUInt32">
            <summary>Sets the shim of NetworkBinaryWriter.Write(UInt32 i)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimNetworkBinaryWriter.WriteUInt64">
            <summary>Sets the shim of NetworkBinaryWriter.Write(UInt64 i)</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimSetQueue`1">
            <summary>Shim type of RabbitMQ.Util.SetQueue`1</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSetQueue`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSetQueue`1.#ctor(RabbitMQ.Util.SetQueue{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimSetQueue`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.AllInstances.Clear">
            <summary>Sets the shim of SetQueue`1.Clear()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.AllInstances.ContainsT0">
            <summary>Sets the shim of SetQueue`1.Contains(!0 item)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.AllInstances.Dequeue">
            <summary>Sets the shim of SetQueue`1.Dequeue()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.AllInstances.EnqueueT0">
            <summary>Sets the shim of SetQueue`1.Enqueue(!0 item)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.AllInstances.IsEmpty">
            <summary>Sets the shim of SetQueue`1.IsEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.AllInstances.RemoveT0">
            <summary>Sets the shim of SetQueue`1.Remove(!0 item)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSetQueue`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSetQueue`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.Clear">
            <summary>Sets the shim of SetQueue`1.Clear()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.Constructor">
            <summary>Sets the shim of SetQueue`1.SetQueue`1()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.ContainsT0">
            <summary>Sets the shim of SetQueue`1.Contains(!0 item)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.Dequeue">
            <summary>Sets the shim of SetQueue`1.Dequeue()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.EnqueueT0">
            <summary>Sets the shim of SetQueue`1.Enqueue(!0 item)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.IsEmpty">
            <summary>Sets the shim of SetQueue`1.IsEmpty()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSetQueue`1.RemoveT0">
            <summary>Sets the shim of SetQueue`1.Remove(!0 item)</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimSharedQueue">
            <summary>Shim type of RabbitMQ.Util.SharedQueue</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue.#ctor(RabbitMQ.Util.SharedQueue)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimSharedQueue.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue.Bind(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue.Constructor">
            <summary>Sets the shim of SharedQueue.SharedQueue()</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimSharedQueue`1">
            <summary>Shim type of RabbitMQ.Util.SharedQueue`1</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue`1.#ctor(RabbitMQ.Util.SharedQueue{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimSharedQueue`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.AllInstances.Close">
            <summary>Sets the shim of SharedQueue`1.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.AllInstances.Dequeue">
            <summary>Sets the shim of SharedQueue`1.Dequeue()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.AllInstances.DequeueInt32T0Out">
            <summary>Sets the shim of SharedQueue`1.Dequeue(Int32 millisecondsTimeout, !0&amp; result)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.AllInstances.DequeueNoWaitT0">
            <summary>Sets the shim of SharedQueue`1.DequeueNoWait(!0 defaultValue)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.AllInstances.EnqueueT0">
            <summary>Sets the shim of SharedQueue`1.Enqueue(!0 o)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.AllInstances.EnsureIsOpen">
            <summary>Sets the shim of SharedQueue`1.EnsureIsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.AllInstances.SystemCollectionsGenericIEnumerableTGetEnumerator">
            <summary>Sets the shim of SharedQueue`1.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of SharedQueue`1.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue`1.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueue`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.Close">
            <summary>Sets the shim of SharedQueue`1.Close()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.Constructor">
            <summary>Sets the shim of SharedQueue`1.SharedQueue`1()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.Dequeue">
            <summary>Sets the shim of SharedQueue`1.Dequeue()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.DequeueInt32T0Out">
            <summary>Sets the shim of SharedQueue`1.Dequeue(Int32 millisecondsTimeout, !0&amp; result)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.DequeueNoWaitT0">
            <summary>Sets the shim of SharedQueue`1.DequeueNoWait(!0 defaultValue)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.EnqueueT0">
            <summary>Sets the shim of SharedQueue`1.Enqueue(!0 o)</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.EnsureIsOpen">
            <summary>Sets the shim of SharedQueue`1.EnsureIsOpen()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.SystemCollectionsGenericIEnumerableTGetEnumerator">
            <summary>Sets the shim of SharedQueue`1.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueue`1.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of SharedQueue`1.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimSharedQueueEnumerator`1">
            <summary>Shim type of RabbitMQ.Util.SharedQueueEnumerator`1</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueueEnumerator`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.ShimSharedQueueEnumerator`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueueEnumerator`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.ShimSharedQueueEnumerator`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.ShimSharedQueueEnumerator`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.StubBlockingCell">
            <summary>Stub type of RabbitMQ.Util.BlockingCell</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubBlockingCell.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubBlockingCell.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubBlockingCell.InitializeStub">
            <summary>Initializes a new instance of type StubBlockingCell</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubBlockingCell.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubBlockingCell.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.StubIntAllocator">
            <summary>Stub type of RabbitMQ.Util.IntAllocator</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubIntAllocator.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubIntAllocator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubIntAllocator.InitializeStub">
            <summary>Initializes a new instance of type StubIntAllocator</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubIntAllocator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubIntAllocator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.StubNetworkBinaryReader">
            <summary>Stub type of RabbitMQ.Util.NetworkBinaryReader</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.#ctor(System.IO.Stream)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.BaseStream">
            <summary>Sets the stub of BinaryReader.get_BaseStream()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.BaseStreamGet">
            <summary>Sets the stub of BinaryReader.get_BaseStream()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.Close">
            <summary>Sets the stub of BinaryReader.Close()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.Close01">
            <summary>Sets the stub of BinaryReader.Close()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.Dispose(System.Boolean)">
            <summary>Sets the stub of BinaryReader.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.DisposeBoolean">
            <summary>Sets the stub of BinaryReader.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.FillBuffer(System.Int32)">
            <summary>Sets the stub of BinaryReader.FillBuffer(Int32 numBytes)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.FillBufferInt32">
            <summary>Sets the stub of BinaryReader.FillBuffer(Int32 numBytes)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.InitializeStub">
            <summary>Initializes a new instance of type StubNetworkBinaryReader</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.PeekChar">
            <summary>Sets the stub of BinaryReader.PeekChar()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.PeekChar01">
            <summary>Sets the stub of BinaryReader.PeekChar()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.Read">
            <summary>Sets the stub of BinaryReader.Read()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of BinaryReader.Read(Byte[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>Sets the stub of BinaryReader.Read(Char[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.Read01">
            <summary>Sets the stub of BinaryReader.Read()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadBoolean">
            <summary>Sets the stub of BinaryReader.ReadBoolean()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadBoolean01">
            <summary>Sets the stub of BinaryReader.ReadBoolean()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadByte">
            <summary>Sets the stub of BinaryReader.ReadByte()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadByte01">
            <summary>Sets the stub of BinaryReader.ReadByte()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadByteArrayInt32Int32">
            <summary>Sets the stub of BinaryReader.Read(Byte[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadBytes(System.Int32)">
            <summary>Sets the stub of BinaryReader.ReadBytes(Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadBytesInt32">
            <summary>Sets the stub of BinaryReader.ReadBytes(Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadChar">
            <summary>Sets the stub of BinaryReader.ReadChar()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadChar01">
            <summary>Sets the stub of BinaryReader.ReadChar()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadCharArrayInt32Int32">
            <summary>Sets the stub of BinaryReader.Read(Char[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadChars(System.Int32)">
            <summary>Sets the stub of BinaryReader.ReadChars(Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadCharsInt32">
            <summary>Sets the stub of BinaryReader.ReadChars(Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadDecimal">
            <summary>Sets the stub of BinaryReader.ReadDecimal()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadDecimal01">
            <summary>Sets the stub of BinaryReader.ReadDecimal()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadDouble">
            <summary>Sets the stub of NetworkBinaryReader.ReadDouble()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadDouble01">
            <summary>Sets the stub of NetworkBinaryReader.ReadDouble()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadInt16">
            <summary>Sets the stub of NetworkBinaryReader.ReadInt16()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadInt1601">
            <summary>Sets the stub of NetworkBinaryReader.ReadInt16()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadInt32">
            <summary>Sets the stub of NetworkBinaryReader.ReadInt32()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadInt3201">
            <summary>Sets the stub of NetworkBinaryReader.ReadInt32()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadInt64">
            <summary>Sets the stub of NetworkBinaryReader.ReadInt64()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadInt6401">
            <summary>Sets the stub of NetworkBinaryReader.ReadInt64()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadSByte">
            <summary>Sets the stub of BinaryReader.ReadSByte()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadSByte01">
            <summary>Sets the stub of BinaryReader.ReadSByte()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadSingle">
            <summary>Sets the stub of NetworkBinaryReader.ReadSingle()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadSingle01">
            <summary>Sets the stub of NetworkBinaryReader.ReadSingle()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadString">
            <summary>Sets the stub of BinaryReader.ReadString()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadString01">
            <summary>Sets the stub of BinaryReader.ReadString()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadUInt16">
            <summary>Sets the stub of NetworkBinaryReader.ReadUInt16()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadUInt1601">
            <summary>Sets the stub of NetworkBinaryReader.ReadUInt16()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadUInt32">
            <summary>Sets the stub of NetworkBinaryReader.ReadUInt32()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadUInt3201">
            <summary>Sets the stub of NetworkBinaryReader.ReadUInt32()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadUInt64">
            <summary>Sets the stub of NetworkBinaryReader.ReadUInt64()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryReader.ReadUInt6401">
            <summary>Sets the stub of NetworkBinaryReader.ReadUInt64()</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter">
            <summary>Stub type of RabbitMQ.Util.NetworkBinaryWriter</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.#ctor(System.IO.Stream)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.BaseStream">
            <summary>Sets the stub of BinaryWriter.get_BaseStream()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.BaseStreamGet">
            <summary>Sets the stub of BinaryWriter.get_BaseStream()</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Close">
            <summary>Sets the stub of BinaryWriter.Close()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Close01">
            <summary>Sets the stub of BinaryWriter.Close()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Dispose(System.Boolean)">
            <summary>Sets the stub of BinaryWriter.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.DisposeBoolean">
            <summary>Sets the stub of BinaryWriter.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Flush">
            <summary>Sets the stub of BinaryWriter.Flush()</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Flush01">
            <summary>Sets the stub of BinaryWriter.Flush()</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.InitializeStub">
            <summary>Initializes a new instance of type StubNetworkBinaryWriter</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>Sets the stub of BinaryWriter.Seek(Int32 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.SeekInt32SeekOrigin">
            <summary>Sets the stub of BinaryWriter.Seek(Int32 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Decimal)">
            <summary>Sets the stub of BinaryWriter.Write(Decimal value)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.String)">
            <summary>Sets the stub of BinaryWriter.Write(String value)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Int16)">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Int16 i)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Byte[])">
            <summary>Sets the stub of BinaryWriter.Write(Byte[] buffer)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Byte)">
            <summary>Sets the stub of BinaryWriter.Write(Byte value)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Char)">
            <summary>Sets the stub of BinaryWriter.Write(Char ch)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Int32)">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Int32 i)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Char[])">
            <summary>Sets the stub of BinaryWriter.Write(Char[] chars)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Boolean)">
            <summary>Sets the stub of BinaryWriter.Write(Boolean value)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Double)">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Double d)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Int64)">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Int64 i)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.SByte)">
            <summary>Sets the stub of BinaryWriter.Write(SByte value)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Single)">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Single f)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.UInt16)">
            <summary>Sets the stub of NetworkBinaryWriter.Write(UInt16 i)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.UInt32)">
            <summary>Sets the stub of NetworkBinaryWriter.Write(UInt32 i)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.UInt64)">
            <summary>Sets the stub of NetworkBinaryWriter.Write(UInt64 i)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the stub of BinaryWriter.Write(Byte[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>Sets the stub of BinaryWriter.Write(Char[] chars, Int32 index, Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteBoolean">
            <summary>Sets the stub of BinaryWriter.Write(Boolean value)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteByte">
            <summary>Sets the stub of BinaryWriter.Write(Byte value)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteByteArray">
            <summary>Sets the stub of BinaryWriter.Write(Byte[] buffer)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteByteArrayInt32Int32">
            <summary>Sets the stub of BinaryWriter.Write(Byte[] buffer, Int32 index, Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteChar">
            <summary>Sets the stub of BinaryWriter.Write(Char ch)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteCharArray">
            <summary>Sets the stub of BinaryWriter.Write(Char[] chars)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteCharArrayInt32Int32">
            <summary>Sets the stub of BinaryWriter.Write(Char[] chars, Int32 index, Int32 count)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteDecimal">
            <summary>Sets the stub of BinaryWriter.Write(Decimal value)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteDouble">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Double d)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteInt16">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Int16 i)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteInt32">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Int32 i)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteInt64">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Int64 i)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteSByte">
            <summary>Sets the stub of BinaryWriter.Write(SByte value)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteSingle">
            <summary>Sets the stub of NetworkBinaryWriter.Write(Single f)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteString">
            <summary>Sets the stub of BinaryWriter.Write(String value)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteUInt16">
            <summary>Sets the stub of NetworkBinaryWriter.Write(UInt16 i)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteUInt32">
            <summary>Sets the stub of NetworkBinaryWriter.Write(UInt32 i)</summary>
        </member>
        <member name="F:RabbitMQ.Util.Fakes.StubNetworkBinaryWriter.WriteUInt64">
            <summary>Sets the stub of NetworkBinaryWriter.Write(UInt64 i)</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.StubSetQueue`1">
            <summary>Stub type of RabbitMQ.Util.SetQueue`1</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubSetQueue`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubSetQueue`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubSetQueue`1.InitializeStub">
            <summary>Initializes a new instance of type StubSetQueue</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubSetQueue`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubSetQueue`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.StubSharedQueue">
            <summary>Stub type of RabbitMQ.Util.SharedQueue</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubSharedQueue.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubSharedQueue.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubSharedQueue.InitializeStub">
            <summary>Initializes a new instance of type StubSharedQueue</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubSharedQueue.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubSharedQueue.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:RabbitMQ.Util.Fakes.StubSharedQueue`1">
            <summary>Stub type of RabbitMQ.Util.SharedQueue`1</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubSharedQueue`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubSharedQueue`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="M:RabbitMQ.Util.Fakes.StubSharedQueue`1.InitializeStub">
            <summary>Initializes a new instance of type StubSharedQueue</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubSharedQueue`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:RabbitMQ.Util.Fakes.StubSharedQueue`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
